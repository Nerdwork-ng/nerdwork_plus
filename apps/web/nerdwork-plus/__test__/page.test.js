"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const page_1 = __importDefault(require("@/app/page"));
require("@testing-library/jest-dom");
const react_1 = require("@testing-library/react");
describe("Home Page", () => {
    beforeEach(() => {
        (0, react_1.render)(<page_1.default />);
    });
    // NAVIGATION BAR TESTS
    it("renders navigation menu", () => {
        const nav = react_1.screen.getByRole("navigation");
        const navLogo = (0, react_1.within)(nav).getAllByAltText(/nerdwork logo/i);
        const loginButton = (0, react_1.within)(nav).getByRole("button", { name: /log in/i });
        const signupButton = (0, react_1.within)(nav).getByRole("button", { name: /sign up/i });
        expect(nav).toBeInTheDocument();
        expect(navLogo).toHaveLength(2);
        expect(react_1.screen.getByRole("link", { name: /events/i })).toBeInTheDocument();
        expect(react_1.screen.getAllByRole("link", { name: /nerdwork+/i })[0]).toBeInTheDocument();
        expect(loginButton).toBeInTheDocument();
        expect(signupButton).toBeInTheDocument();
    });
    // HERO SECTION TESTS
    it("renders hero section", () => {
        const hero = react_1.screen.getByTestId("hero");
        const heading = react_1.screen.getByRole("heading", { level: 1 });
        const input = (0, react_1.within)(hero).getByPlaceholderText(/email address/i);
        const signupButton = (0, react_1.within)(hero).getByRole("button", { name: /sign up/i });
        expect(hero).toBeInTheDocument();
        expect(heading).toBeInTheDocument();
        expect(input).toBeInTheDocument();
        expect(signupButton).toBeInTheDocument();
    });
    // COMMUNITY SECTION TESTS
    it("renders community section", () => {
        const community = react_1.screen.getByTestId("community");
        const heading = (0, react_1.within)(community).getByRole("heading", { level: 2 });
        const joinButton = (0, react_1.within)(community).getByRole("button", {
            name: /join community/i,
        });
        const comicImages = (0, react_1.within)(community).getAllByAltText(/comic con image/i);
        expect(community).toBeInTheDocument();
        expect(heading).toBeInTheDocument();
        expect(joinButton).toBeInTheDocument();
        expect(comicImages).toHaveLength(7);
    });
    // MERDWORK+ SECTION
    it("renders nerdwork+ section", () => {
        const nerdwork = react_1.screen.getByTestId("nerdwork");
        const heading = (0, react_1.within)(nerdwork).getByRole("heading", { level: 2 });
        const creators = (0, react_1.within)(nerdwork).getByRole("heading", { level: 3 });
        const nerworkPlus = (0, react_1.within)(nerdwork).getByRole("button", {
            name: /nerdwork+/i,
        });
        const learnMore = (0, react_1.within)(nerdwork).getByRole("button", {
            name: /learn more/i,
        });
        expect(nerdwork).toBeInTheDocument();
        expect(heading).toBeInTheDocument();
        expect(creators).toBeInTheDocument();
        expect(nerworkPlus).toBeInTheDocument();
        expect(learnMore).toBeInTheDocument();
    });
    // COMIC CON SECTION
    it("renders comic con section", () => {
        const comiccon = react_1.screen.getByTestId("comic-con");
        const heading = (0, react_1.within)(comiccon).getByRole("heading", { level: 2 });
        const register = (0, react_1.within)(comiccon).getByRole("button", {
            name: /register for comic con 2025/i,
        });
        const lastYear = (0, react_1.within)(comiccon).getByRole("button", {
            name: /see last year's comic con/i,
        });
        const comicImages = (0, react_1.within)(comiccon).getAllByAltText(/comic con image/i);
        const sponsors = (0, react_1.within)(comiccon).getAllByAltText(/logo/i);
        expect(comiccon).toBeInTheDocument();
        expect(heading).toBeInTheDocument();
        expect(register).toBeInTheDocument();
        expect(lastYear).toBeInTheDocument();
        expect(comicImages).toHaveLength(5);
        expect(sponsors).toHaveLength(10);
    });
    // FAQ SECTION TESTS
    it("renders the faq section", () => {
        const faq = react_1.screen.getByTestId("faq");
        const heading = (0, react_1.within)(faq).getByRole("heading", { level: 2 });
        const contact = (0, react_1.within)(faq).getAllByRole("button", {
            name: /contact support/i,
        });
        const accordionItems = (0, react_1.within)(faq).getAllByRole("button", {
            expanded: false,
        });
        expect(faq).toBeInTheDocument();
        expect(heading).toBeInTheDocument();
        expect(contact).toHaveLength(2);
        expect(accordionItems).toHaveLength(10);
    });
    // FOOTER TESTS
    it("renders footer section", () => {
        const footer = react_1.screen.getByRole("contentinfo");
        const footerLogo = (0, react_1.within)(footer).getByAltText(/nerdwork logo/i);
        const footerImage = (0, react_1.within)(footer).getByAltText(/footer image/i);
        const input = (0, react_1.within)(footer).getByPlaceholderText(/email address/i);
        const signupButton = (0, react_1.within)(footer).getByRole("button", {
            name: /sign up/i,
        });
        expect(footer).toBeInTheDocument();
        expect(footerLogo).toBeInTheDocument();
        expect(footerImage).toBeInTheDocument();
        expect(input).toBeInTheDocument();
        expect(signupButton).toBeInTheDocument();
    });
});
//# sourceMappingURL=data:application/json;base64,