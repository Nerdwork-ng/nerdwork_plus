"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const page_1 = __importDefault(require("@/app/(external)/nerdwork+/page"));
require("@testing-library/jest-dom");
const react_1 = require("@testing-library/react");
describe("Home Page", () => {
    beforeEach(() => {
        (0, react_1.render)(<page_1.default />);
    });
    // NAVIGATION BAR TESTS
    it("renders navigation menu", () => {
        const nav = react_1.screen.getByRole("navigation");
        const navLogo = (0, react_1.within)(nav).getAllByAltText(/nerdwork logo/i);
        const loginButton = (0, react_1.within)(nav).getByRole("button", { name: /log in/i });
        const signupButton = (0, react_1.within)(nav).getByRole("button", { name: /sign up/i });
        expect(nav).toBeInTheDocument();
        expect(navLogo).toHaveLength(2);
        expect(react_1.screen.getByRole("link", { name: /events/i })).toBeInTheDocument();
        expect(react_1.screen.getAllByRole("link", { name: /nerdwork+/i })[0]).toBeInTheDocument();
        expect(loginButton).toBeInTheDocument();
        expect(signupButton).toBeInTheDocument();
    });
    // HERO SECTION TESTS
    it("renders hero section", () => {
        const hero = react_1.screen.getByTestId("hero");
        const heading = react_1.screen.getByRole("heading", { level: 1 });
        const input = (0, react_1.within)(hero).getByPlaceholderText(/email address/i);
        const joinButton = (0, react_1.within)(hero).getByRole("button", {
            name: /join waitlist/i,
        });
        expect(hero).toBeInTheDocument();
        expect(heading).toBeInTheDocument();
        expect(input).toBeInTheDocument();
        expect(joinButton).toBeInTheDocument();
    });
    // STORIES SECTION
    it("renders stories section", () => {
        const stories = react_1.screen.getByTestId("stories");
        const headings = (0, react_1.within)(stories).getAllByRole("heading", { level: 2 });
        const gallery = (0, react_1.within)(stories).getByTestId("gallery");
        const african = (0, react_1.within)(stories).getByAltText(/black african man/i);
        const users = (0, react_1.within)(stories).getAllByAltText(/user icons/i);
        expect(stories).toBeInTheDocument();
        expect(headings).toHaveLength(3);
        expect(gallery).toHaveClass("bg-[url('/nerdwork+/gallery.png')]");
        expect(african).toBeInTheDocument();
        expect(users).toHaveLength(2);
    });
    // FAQ SECTION TESTS
    it("renders the faq section", () => {
        const faq = react_1.screen.getByTestId("faq");
        const heading = (0, react_1.within)(faq).getByRole("heading", { level: 2 });
        const contact = (0, react_1.within)(faq).getAllByRole("button", {
            name: /contact support/i,
        });
        const accordionItems = (0, react_1.within)(faq).getAllByRole("button", {
            expanded: false,
        });
        expect(faq).toBeInTheDocument();
        expect(heading).toBeInTheDocument();
        expect(contact).toHaveLength(2);
        expect(accordionItems).toHaveLength(10);
    });
    // FOOTER TESTS
    it("renders footer section", () => {
        const footer = react_1.screen.getByRole("contentinfo");
        const footerLogo = (0, react_1.within)(footer).getByAltText(/nerdwork logo/i);
        const footerImage = (0, react_1.within)(footer).getByAltText(/footer image/i);
        const input = (0, react_1.within)(footer).getByPlaceholderText(/email address/i);
        const signupButton = (0, react_1.within)(footer).getByRole("button", {
            name: /sign up/i,
        });
        expect(footer).toBeInTheDocument();
        expect(footerLogo).toBeInTheDocument();
        expect(footerImage).toBeInTheDocument();
        expect(input).toBeInTheDocument();
        expect(signupButton).toBeInTheDocument();
    });
});
//# sourceMappingURL=data:application/json;base64,