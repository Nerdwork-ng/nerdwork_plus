"use client";
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePageLoading = usePageLoading;
exports.useAdvancedPageLoading = useAdvancedPageLoading;
const react_1 = require("react");
const navigation_1 = require("next/navigation");
function usePageLoading() {
    const [isLoading, setIsLoading] = (0, react_1.useState)(false);
    const pathname = (0, navigation_1.usePathname)();
    (0, react_1.useEffect)(() => {
        setIsLoading(true);
        const timer = setTimeout(() => {
            setIsLoading(false);
        }, 1500);
        return () => clearTimeout(timer);
    }, [pathname]);
    return isLoading;
}
function useAdvancedPageLoading() {
    const [isLoading, setIsLoading] = (0, react_1.useState)(false);
    const pathname = (0, navigation_1.usePathname)();
    (0, react_1.useEffect)(() => {
        setIsLoading(true);
        const checkPageReady = () => {
            const checks = [
                // DOM is ready
                () => document.readyState === "complete",
                // No pending images
                () => Array.from(document.images).every((img) => img.complete),
                // No active fetch requests (if you track them)
                () => !document.querySelector('[data-loading="true"]'),
            ];
            const isReady = checks.every((check) => check());
            if (isReady) {
                setIsLoading(false);
            }
            else {
                setTimeout(checkPageReady, 50);
            }
        };
        setTimeout(checkPageReady, 100);
        const fallbackTimer = setTimeout(() => {
            setIsLoading(false);
        }, 5000);
        return () => clearTimeout(fallbackTimer);
    }, [pathname]);
    return isLoading;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlUGFnZUxvYWRpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1c2VQYWdlTG9hZGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7OztBQUtiLHdDQWVDO0FBRUQsd0RBb0NDO0FBeERELGlDQUE0QztBQUM1QyxnREFBOEM7QUFFOUMsU0FBZ0IsY0FBYztJQUM1QixNQUFNLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBQyxLQUFLLENBQUMsQ0FBQztJQUNsRCxNQUFNLFFBQVEsR0FBRyxJQUFBLHdCQUFXLEdBQUUsQ0FBQztJQUUvQixJQUFBLGlCQUFTLEVBQUMsR0FBRyxFQUFFO1FBQ2IsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRW5CLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDNUIsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVULE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFFZixPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBRUQsU0FBZ0Isc0JBQXNCO0lBQ3BDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xELE1BQU0sUUFBUSxHQUFHLElBQUEsd0JBQVcsR0FBRSxDQUFDO0lBRS9CLElBQUEsaUJBQVMsRUFBQyxHQUFHLEVBQUU7UUFDYixZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbkIsTUFBTSxjQUFjLEdBQUcsR0FBRyxFQUFFO1lBQzFCLE1BQU0sTUFBTSxHQUFHO2dCQUNiLGVBQWU7Z0JBQ2YsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsS0FBSyxVQUFVO2dCQUN4QyxvQkFBb0I7Z0JBQ3BCLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztnQkFDOUQsK0NBQStDO2dCQUMvQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsdUJBQXVCLENBQUM7YUFDdkQsQ0FBQztZQUVGLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7WUFFakQsSUFBSSxPQUFPLEVBQUUsQ0FBQztnQkFDWixZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdEIsQ0FBQztpQkFBTSxDQUFDO2dCQUNOLFVBQVUsQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDakMsQ0FBQztRQUNILENBQUMsQ0FBQztRQUVGLFVBQVUsQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFaEMsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNwQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEIsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRVQsT0FBTyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDM0MsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUVmLE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcclxuXHJcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlUGF0aG5hbWUgfSBmcm9tIFwibmV4dC9uYXZpZ2F0aW9uXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlUGFnZUxvYWRpbmcoKSB7XHJcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBwYXRobmFtZSA9IHVzZVBhdGhuYW1lKCk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XHJcblxyXG4gICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuICAgIH0sIDE1MDApO1xyXG5cclxuICAgIHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQodGltZXIpO1xyXG4gIH0sIFtwYXRobmFtZV0pO1xyXG5cclxuICByZXR1cm4gaXNMb2FkaW5nO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlQWR2YW5jZWRQYWdlTG9hZGluZygpIHtcclxuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IHBhdGhuYW1lID0gdXNlUGF0aG5hbWUoKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHNldElzTG9hZGluZyh0cnVlKTtcclxuXHJcbiAgICBjb25zdCBjaGVja1BhZ2VSZWFkeSA9ICgpID0+IHtcclxuICAgICAgY29uc3QgY2hlY2tzID0gW1xyXG4gICAgICAgIC8vIERPTSBpcyByZWFkeVxyXG4gICAgICAgICgpID0+IGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIixcclxuICAgICAgICAvLyBObyBwZW5kaW5nIGltYWdlc1xyXG4gICAgICAgICgpID0+IEFycmF5LmZyb20oZG9jdW1lbnQuaW1hZ2VzKS5ldmVyeSgoaW1nKSA9PiBpbWcuY29tcGxldGUpLFxyXG4gICAgICAgIC8vIE5vIGFjdGl2ZSBmZXRjaCByZXF1ZXN0cyAoaWYgeW91IHRyYWNrIHRoZW0pXHJcbiAgICAgICAgKCkgPT4gIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWxvYWRpbmc9XCJ0cnVlXCJdJyksXHJcbiAgICAgIF07XHJcblxyXG4gICAgICBjb25zdCBpc1JlYWR5ID0gY2hlY2tzLmV2ZXJ5KChjaGVjaykgPT4gY2hlY2soKSk7XHJcblxyXG4gICAgICBpZiAoaXNSZWFkeSkge1xyXG4gICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2V0VGltZW91dChjaGVja1BhZ2VSZWFkeSwgNTApO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHNldFRpbWVvdXQoY2hlY2tQYWdlUmVhZHksIDEwMCk7XHJcblxyXG4gICAgY29uc3QgZmFsbGJhY2tUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xyXG4gICAgfSwgNTAwMCk7XHJcblxyXG4gICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dChmYWxsYmFja1RpbWVyKTtcclxuICB9LCBbcGF0aG5hbWVdKTtcclxuXHJcbiAgcmV0dXJuIGlzTG9hZGluZztcclxufVxyXG4iXX0=