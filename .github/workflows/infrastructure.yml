# DISABLED - Focus on main CI/CD pipeline first
# name: Infrastructure Deployment (CDK)

# 🏗️ INFRASTRUCTURE PIPELINE:
# 1️⃣ changed-files        -> Detects infrastructure changes
# 2️⃣ validate-and-diff    -> Validates CDK and shows diff
# 3️⃣ deploy-to-staging    -> Deploys infrastructure to staging
# 4️⃣ deploy-to-production -> Deploys to production (manual approval)

permissions:
  contents: read
  issues: write
  deployments: write
  id-token: write  # Required for AWS OIDC

on:
  push:
    branches: [main]
    paths:
      - 'infra/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches: [main]
    paths:
      - 'infra/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      infrastructure-changed: ${{ steps.check.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check for infrastructure changes
        id: check
        run: |
          if git diff --name-only HEAD^ HEAD | grep -E '^infra/' > /dev/null; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "🏗️ Infrastructure changes detected"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No infrastructure changes"
          fi

  validate-and-diff:
    name: "🔍 Validate CDK & Show Diff"
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.infrastructure-changed == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: infra/package-lock.json
      
      - name: Install dependencies
        run: |
          cd infra
          npm ci
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      
      - name: CDK Synth & Validate
        run: |
          cd infra
          npm run build
          npx cdk synth --all
          echo "✅ CDK synthesis successful"
      
      - name: CDK Diff (Staging)
        id: diff-staging
        run: |
          cd infra
          echo "## 🏗️ Infrastructure Diff (Staging)" > diff-output.md
          echo '```diff' >> diff-output.md
          npx cdk diff --all --context environment=staging >> diff-output.md || true
          echo '```' >> diff-output.md
          
          if [ -s diff-output.md ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No infrastructure changes detected" >> diff-output.md
          fi
      
      - name: Comment Diff on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const diffOutput = fs.readFileSync('infra/diff-output.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `# 🏗️ CDK Infrastructure Changes\n\n${diffOutput}\n\n> Review these changes carefully before merging.`
            });

  deploy-staging:
    name: "🚀 Deploy to Staging"
    needs: [detect-changes, validate-and-diff]
    if: github.ref == 'refs/heads/main' && needs.detect-changes.outputs.infrastructure-changed == 'true'
    runs-on: ubuntu-latest
    environment:
      name: staging-infrastructure
      url: https://staging.nerdwork-plus.example.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: infra/package-lock.json
      
      - name: Install dependencies
        run: |
          cd infra
          npm ci
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      
      - name: Deploy to Staging
        run: |
          cd infra
          echo "🚀 Deploying infrastructure to staging..."
          
          npx cdk deploy --all \
            --context environment=staging \
            --require-approval never \
            --verbose
          
          echo "✅ Infrastructure deployed to staging"
      
      - name: Create deployment notification
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueBody = `# 🏗️ Infrastructure Deployed to Staging
            
            ## 🚀 Deployment Details
            - **Environment:** staging
            - **Commit:** [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
            - **Build:** [View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ## 🔗 Resources Updated
            - VPC, Subnets, Security Groups
            - ECS Clusters, Services, Task Definitions
            - API Gateway, Lambda Functions
            - RDS, DynamoDB, ElastiCache
            - S3 Buckets, CloudFront Distributions
            
            > **Next:** Manual approval required for production deployment.
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🏗️ Infrastructure Updated - Staging',
              body: issueBody,
              labels: ['infrastructure', 'staging', 'deployment']
            });

  deploy-production:
    name: "🏭 Deploy to Production"
    needs: [deploy-staging]
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: production-infrastructure
      url: https://nerdwork-plus.example.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Manual Approval Notice
        run: |
          echo "🚨 PRODUCTION INFRASTRUCTURE DEPLOYMENT"
          echo "This will update production AWS resources."
          echo "Please approve this deployment in the GitHub Actions UI."
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: infra/package-lock.json
      
      - name: Install dependencies
        run: |
          cd infra
          npm ci
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      
      - name: Deploy to Production
        run: |
          cd infra
          echo "🏭 Deploying infrastructure to production..."
          
          npx cdk deploy --all \
            --context environment=production \
            --require-approval never \
            --verbose
          
          echo "✅ Infrastructure deployed to production"
      
      - name: Post-deployment validation
        run: |
          echo "🔍 Running post-deployment checks..."
          
          # Check critical resources
          aws ecs describe-clusters --clusters prod-cluster --region eu-west-1
          aws rds describe-db-clusters --region eu-west-1 | grep -i available || echo "No RDS clusters found"
          
          echo "✅ Post-deployment validation completed"
      
      - name: Create production notification
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueBody = `# 🏭 Infrastructure Deployed to Production
            
            ## ✅ Production Deployment Complete
            - **Environment:** production  
            - **Commit:** [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
            - **Deployed at:** ${new Date().toISOString()}
            
            ## 🎯 Infrastructure Status
            All AWS resources have been updated and validated.
            
            ## 🔗 Monitoring Links
            - [AWS Console](https://console.aws.amazon.com)
            - [CloudWatch Dashboard](https://console.aws.amazon.com/cloudwatch)
            - [ECS Services](https://console.aws.amazon.com/ecs/home?region=eu-west-1)
            
            > Infrastructure deployment completed successfully! 🎉
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🏭 Production Infrastructure Updated',
              body: issueBody,
              labels: ['infrastructure', 'production', 'deployment']
            });