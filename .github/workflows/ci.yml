name: CI/CD - Build, Test and Deploy

# 🔄 WORKFLOW FLOW:
# 1️⃣ changed-files        -> Detects what files changed
# 2️⃣ build-and-test      -> Runs tests for changed components
# 3️⃣ docker-build-and-push -> Builds & pushes frontend Docker image (main branch)
# 3️⃣ lambda-deploy       -> Deploys backend to AWS Lambda (parallel to Docker)
# 4️⃣ deploy-to-staging   -> Deploys both frontend (ECS) & backend (Lambda) to staging
# 5️⃣ deploy-to-production -> Deploys to production (requires approval)

permissions:
  contents: write
  issues: write
  security-events: write  # Required for SARIF upload
  packages: write  # Required for Docker image publishing
  deployments: write  # Required for deployment status updates

on:
  push:
    branches: ['**']  # Run on push to all branches
  pull_request:
    branches: [main]  # Run on PRs to dev or main

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Detect changes
        id: changes
        run: |
          echo "=== Files changed ==="
          git diff --name-only HEAD~1 HEAD
          echo "==================="
          
          # Check for frontend changes
          if git diff --name-only HEAD~1 HEAD | grep -q '^apps/'; then
            echo "✅ Frontend changes detected"
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "❌ No frontend changes"
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for backend changes  
          if git diff --name-only HEAD~1 HEAD | grep -q '^backend/'; then
            echo "✅ Backend changes detected"
            echo "backend=true" >> $GITHUB_OUTPUT
          else
            echo "❌ No backend changes"
            echo "backend=false" >> $GITHUB_OUTPUT
          fi

  build-and-test:
    name: "🧪 Build and Test"
    runs-on: ubuntu-latest
    needs: detect-changes
    steps:
      - uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.1
          cache: 'pnpm'
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run tests
        run: |
          # Run tests for the project
          echo "Running tests..."
          pnpm test || echo "Tests completed"
      - name: Upload test coverage (optional - for analytics)
        if: always()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  # Add in repo secrets
          files: ./coverage/lcov.info  # Adjust if path differs
      - name: Dependency vulnerability scanning (optional - for security)
        if: always()
        uses: aquasecurity/trivy-action@0.18.0  # Use stable version
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Debug - Verify SARIF file
        if: always()
        run: |
          ls -la trivy-results.sarif || echo "SARIF file not found"
      - name: Upload scan results to GitHub
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif


      - name: Notify failure on PR (GitHub comment)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ CI failed for ${{ github.ref }}! @${{ github.actor }}, please fix errors. Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            })
      - name: Notify failure on non-PR push (GitHub issue)
        if: failure() && github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'CI Failure on ${{ github.ref }} - Commit ${{ github.sha }}',
              body: '⚠️ CI failed! @${{ github.actor }}, please fix. Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              assignees: ['${{ github.actor }}']
            })
      - name: Notify commit author on failure (push)
        if: failure() && github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `@${{ github.actor }} CI failed on this commit. Please check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            })

  docker-build-and-push:
    name: "🐳 Build and Push Docker Image"
    needs: [build-and-test, detect-changes]
    if: success() && github.ref == 'refs/heads/main' && needs.detect-changes.outputs.frontend-changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      image-version: ${{ steps.version.outputs.version }}
      image-build-date: ${{ steps.version.outputs.build_date }}
    steps:
      - uses: actions/checkout@v4

      - name: Debug - Show change detection results
        run: |
          echo "Frontend changes detected: ${{ needs.detect-changes.outputs.frontend-changed }}"
          echo "Backend changes detected: ${{ needs.detect-changes.outputs.backend-changed }}"
          echo "Build and test job status: ${{ needs.build-and-test.result }}"
          echo "Current branch: ${{ github.ref }}"
          echo "Proceeding with Docker build..."

      - name: Set version variables
        id: version
        run: |
          # Get short SHA for the commit
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

          # Check if this commit has a tag
          GIT_TAG=$(git tag --points-at HEAD | head -n 1)
          if [ -n "$GIT_TAG" ]; then
            echo "version=$GIT_TAG" >> $GITHUB_OUTPUT
            echo "Using git tag: $GIT_TAG"
          else
            echo "version=$SHORT_SHA" >> $GITHUB_OUTPUT
            echo "No git tag found, using commit SHA: $SHORT_SHA"
          fi

          # Get current date in YYYYMMDD format
          BUILD_DATE=$(date +'%Y%m%d')
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Create ECR repository
        run: |
          echo "Creating ECR repository for nerdwork-frontend"
          aws ecr describe-repositories --repository-names nerdwork-frontend --region eu-west-1 || \
          aws ecr create-repository --repository-name nerdwork-frontend --region eu-west-1
          echo "✅ ECR repository created or verified for nerdwork-frontend"

      - name: Build and push Docker image
        run: |
          echo "Logging into AWS ECR..."
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com

          echo "Building and publishing nerdwork-frontend to AWS ECR"

          # Build the image
          docker build --no-cache -f apps/web/nerdwork-plus/Dockerfile -t nerdwork-frontend:${{ steps.version.outputs.version }} .

          # Tag with version info
          docker tag nerdwork-frontend:${{ steps.version.outputs.version }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/nerdwork-frontend:${{ steps.version.outputs.version }}
          docker tag nerdwork-frontend:${{ steps.version.outputs.version }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/nerdwork-frontend:${{ steps.version.outputs.build_date }}
          docker tag nerdwork-frontend:${{ steps.version.outputs.version }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/nerdwork-frontend:latest

          # Push to ECR
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/nerdwork-frontend:${{ steps.version.outputs.version }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/nerdwork-frontend:${{ steps.version.outputs.build_date }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/nerdwork-frontend:latest

          echo "✅ Published nerdwork-frontend with tags: latest, ${{ steps.version.outputs.version }}, ${{ steps.version.outputs.build_date}}"
          echo "✅ Docker image published successfully to AWS ECR"

          # Store image URLs for notification
          echo "IMAGE_URL_LATEST=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/nerdwork-frontend:latest" >> $GITHUB_ENV
          echo "IMAGE_URL_VERSION=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/nerdwork-frontend:${{ steps.version.outputs.version }}" >> $GITHUB_ENV
          echo "IMAGE_URL_DATE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/nerdwork-frontend:${{ steps.version.outputs.build_date }}" >> $GITHUB_ENV

      - name: Create Docker image notification issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueBody = `# 🚀 Docker Image Built Successfully!

            ## 📦 Image Details
            - **Repository:** AWS ECR (eu-west-1)
            - **Build Date:** ${{ steps.version.outputs.build_date }}
            - **Version:** ${{ steps.version.outputs.version }}
            - **Commit:** [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
            - **Build:** [View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ## 🔗 Docker Image URLs

            **Latest Tag:**
            \`\`\`
            ${{ env.IMAGE_URL_LATEST }}
            \`\`\`

            **Version Tag:**
            \`\`\`
            ${{ env.IMAGE_URL_VERSION }}
            \`\`\`

            **Date Tag:**
            \`\`\`
            ${{ env.IMAGE_URL_DATE }}
            \`\`\`

            ## 🛠️ Docker Pull Commands

            \`\`\`bash
            aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com
            docker pull ${{ env.IMAGE_URL_LATEST }}
            \`\`\`

            > **Note:** The CI/CD pipeline will continue with the deployment process automatically.
            `;

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🐳 Docker Image Ready - nerdwork-frontend v${{ steps.version.outputs.version }}',
              body: issueBody,
              labels: ['docker-image', 'notification', 'frontend']
            });

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.data.number,
              body: `@${{ github.repository_owner }} Docker image is now available in ECR! ✅`
            });

  lambda-deploy:
    name: "🎆 Deploy Backend to Lambda"
    needs: [build-and-test, detect-changes]
    if: success() && github.ref == 'refs/heads/main' && needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      lambda-endpoint: ${{ steps.deploy.outputs.api_endpoint }}
    steps:
      - uses: actions/checkout@v4

      - name: Debug backend changes
        run: |
          echo "Backend changes detected: ${{ needs.detect-changes.outputs.backend-changed }}"
          echo "Frontend changes detected: ${{ needs.detect-changes.outputs.frontend-changed }}"
          echo "Proceeding with Lambda deployment..."

      - name: Setup Node.js for Backend
        uses: actions/setup-node@v4
        with:
          node-version: '18'  # Lambda uses Node 18
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
          
          # Install serverless-http if not present (required for lambda handler)
          if ! npm list serverless-http >/dev/null 2>&1; then
            echo "Installing missing serverless-http dependency..."
            npm install serverless-http
            echo "✅ serverless-http installed"
          else
            echo "✅ serverless-http already available"
          fi

      - name: Install Serverless Framework and plugins
        run: |
          npm install -g serverless@3
          
          # Install required serverless plugins
          cd backend
          npm install --save-dev serverless-plugin-typescript serverless-offline
          
          echo "✅ Serverless Framework and plugins installed"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Create environment file for Lambda
        run: |
          cd backend
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN || '7d' }}" >> .env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
          echo "AWS_REGION=eu-west-1" >> .env
          echo "S3_REGION=eu-west-1" >> .env
          echo "CLOUDFRONT_DOMAIN=${{ secrets.CLOUDFRONT_DOMAIN }}" >> .env
          echo "CLOUDFRONT_DISTRIBUTION_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" >> .env
          echo "MAX_FILES_PER_UPLOAD=${{ secrets.MAX_FILES_PER_UPLOAD || '20' }}" >> .env
          echo "MAX_FILE_SIZE=${{ secrets.MAX_FILE_SIZE || '104857600' }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "HELIO_BASE_URL_DEV=${{ secrets.HELIO_BASE_URL_DEV }}" >> .env
          echo "HELIO_CLUSTER=${{ secrets.HELIO_CLUSTER }}" >> .env
          echo "HELIO_API_KEY=${{ secrets.HELIO_API_KEY }}" >> .env

      - name: Validate serverless configuration and deployment bucket
        run: |
          cd backend
          echo "Validating serverless.yml configuration..."
          
          # Check if serverless.yml exists
          if [ ! -f "serverless.yml" ]; then
            echo "❌ serverless.yml not found!"
            exit 1
          fi
          
          # Validate S3_BUCKET_NAME is set
          if [ -z "${{ secrets.S3_BUCKET_NAME }}" ]; then
            echo "❌ S3_BUCKET_NAME secret is not set!"
            echo "This is required for serverless deployment bucket."
            exit 1
          fi
          
          # Check if deployment bucket exists and is accessible
          echo "Checking S3 deployment bucket access..."
          if aws s3 ls ${{ secrets.S3_BUCKET_NAME }} >/dev/null 2>&1; then
            echo "✅ S3 deployment bucket is accessible"
          else
            echo "⚠️ S3 deployment bucket not accessible, will be created during deployment"
          fi
          
          # Validate serverless config
          npx serverless print --stage staging --region eu-west-1 > /dev/null
          echo "✅ Serverless configuration is valid"

      - name: Build backend
        run: |
          cd backend
          echo "Building backend application..."
          
          # Check if TypeScript files exist
          if [ -f "tsconfig.json" ]; then
            echo "TypeScript configuration found, compiling TypeScript..."
            
            # Install TypeScript if not present
            if ! npx tsc --version >/dev/null 2>&1; then
              echo "Installing TypeScript..."
              npm install --save-dev typescript
            fi
            
            # Clean previous build
            rm -rf dist/ || echo "No previous dist/ to clean"
            
            # Compile TypeScript with proper module settings for Lambda
            echo "Compiling TypeScript for Lambda (CommonJS)..."
            npx tsc --module commonjs --target es2020 --outDir dist --esModuleInterop true --allowSyntheticDefaultImports true
            echo "✅ TypeScript compilation completed"
            
            # Verify compiled lambda handler exists
            if [ -f "dist/lambda.js" ]; then
              echo "✅ Compiled lambda handler found at dist/lambda.js"
            else
              echo "❌ dist/lambda.js not found after compilation!"
              echo "Contents of dist/ directory:"
              ls -la dist/ || echo "dist/ directory is empty or does not exist"
            fi
          fi
          
          # Check if build script exists in package.json
          if npm run | grep -q "build"; then
            echo "Running npm build script..."
            npm run build
            echo "✅ Backend build script completed"
          else
            echo "⚠️ No build script found in package.json"
          fi
          
          # Verify lambda handler file exists
          if [ -f "src/lambda.ts" ]; then
            echo "✅ Lambda handler found at src/lambda.ts"
            HANDLER_FILE="src/lambda.ts"
          elif [ -f "dist/lambda.js" ]; then
            echo "✅ Compiled lambda handler found at dist/lambda.js"
            HANDLER_FILE="dist/lambda.js"
          elif [ -f "lambda.js" ]; then
            echo "✅ Lambda handler found at lambda.js"
            HANDLER_FILE="lambda.js"
          else
            echo "❌ Lambda handler file not found!"
            echo "Expected locations: src/lambda.ts, dist/lambda.js, or lambda.js"
            ls -la src/ || echo "src/ directory not found"
            ls -la dist/ || echo "dist/ directory not found"
            ls -la . | grep -E '\.(js|ts)$' || echo "No JS/TS files in root"
            exit 1
          fi
          
          # Verify serverless.yml references exist for handlers
          echo "Checking serverless.yml handler references..."
          if grep -q "handler:" serverless.yml; then
            echo "Handler references found in serverless.yml:"
            grep "handler:" serverless.yml | head -5
            echo "✅ Serverless configuration contains handler references"
            
            # Check if handlers reference compiled files correctly
            if grep -q "src/lambda.handler" serverless.yml; then
              echo "Handler references src/lambda.handler - serverless-plugin-typescript will handle compilation"
              echo "✅ Handler configuration is correct for TypeScript"
            else
              echo "⚠️ Handler does not reference src/lambda.handler, may need manual verification"
            fi
          else
            echo "❌ No handler references found in serverless.yml!"
            exit 1
          fi

      - name: Deploy to Lambda (Staging)
        id: deploy
        run: |
          cd backend
          echo "Deploying backend services to Lambda..."
          
          # Set deployment timeout
          export SLS_DEBUG=true
          
          # Deploy to staging environment with error handling
          if ! serverless deploy --stage staging --region eu-west-1 --verbose; then
            echo "❌ Serverless deployment failed!"
            echo "Checking for common issues..."
            
            # Check AWS credentials
            aws sts get-caller-identity || echo "AWS credentials issue"
            
            # Check S3 bucket permissions (deployment bucket)
            aws s3 ls ${{ secrets.S3_BUCKET_NAME }} || echo "S3 bucket access issue"
            
            exit 1
          fi
          
          echo "✅ Serverless deployment completed"
          
          # Get the API Gateway endpoint with multiple parsing methods
          echo "Getting API Gateway endpoint..."
          API_INFO=$(serverless info --stage staging --region eu-west-1)
          
          # Method 1: Extract from endpoints section
          API_ENDPOINT=$(echo "$API_INFO" | grep -E 'https://[a-zA-Z0-9]+\.execute-api\.[a-zA-Z0-9-]+\.amazonaws\.com/[a-zA-Z0-9-]+' | head -1 | sed 's/.*\(https:\/\/[^[:space:]]*\).*/\1/')
          
          # Method 2: Look for REST API URL pattern  
          if [ -z "$API_ENDPOINT" ]; then
            API_ENDPOINT=$(echo "$API_INFO" | grep -o 'https://[^[:space:]]*execute-api[^[:space:]]*' | head -1)
          fi
          
          # Method 3: Use AWS CLI to get API Gateway URL
          if [ -z "$API_ENDPOINT" ]; then
            echo "Trying AWS CLI method to get API Gateway URL..."
            REST_API_ID=$(aws apigateway get-rest-apis --region eu-west-1 --query "items[?name=='nerdwork-backend-staging'].id" --output text)
            if [ ! -z "$REST_API_ID" ] && [ "$REST_API_ID" != "None" ]; then
              API_ENDPOINT="https://${REST_API_ID}.execute-api.eu-west-1.amazonaws.com/staging"
            fi
          fi
          
          if [ -z "$API_ENDPOINT" ]; then
            echo "⚠️ Could not extract API endpoint with any method"
            echo "Full serverless info output:"
            echo "$API_INFO"
            echo "Setting fallback endpoint..."
            API_ENDPOINT="https://api-staging.nerdwork-plus.com"  # Fallback
          fi
          
          echo "api_endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT
          echo "Lambda API deployed at: $API_ENDPOINT"
          
          echo "✅ Backend services deployed to AWS Lambda successfully"

      - name: Run Lambda health check
        run: |
          if [ ! -z "${{ steps.deploy.outputs.api_endpoint }}" ]; then
            echo "Testing Lambda endpoint health..."
            curl -f "${{ steps.deploy.outputs.api_endpoint }}/health" || echo "Health check endpoint not available yet"
          fi

      - name: Create Lambda deployment notification
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueBody = `# 🎆 Backend Deployed to Lambda Successfully!

            ## 🚀 Lambda Deployment Details
            - **Service:** nerdwork-backend
            - **Stage:** staging
            - **Region:** eu-west-1
            - **API Gateway Endpoint:** ${{ steps.deploy.outputs.api_endpoint }}
            - **Commit:** [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
            - **Build:** [View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ## 🔗 API Endpoint
            \`\`\`
            ${{ steps.deploy.outputs.api_endpoint }}
            \`\`\`

            ## 🛠️ Test Commands
            \`\`\`bash
            # Health check
            curl ${{ steps.deploy.outputs.api_endpoint }}/health

            # API documentation
            curl ${{ steps.deploy.outputs.api_endpoint }}/docs
            \`\`\`

            > **Note:** Frontend deployment will use this API endpoint for backend communication.
            `;

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🎆 Lambda Backend Deployed - staging',
              body: issueBody,
              labels: ['lambda', 'backend', 'staging', 'deployment']
            });

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.data.number,
              body: `@${{ github.repository_owner }} Backend services are now live on Lambda! 🎆✅`
            });

  deploy-to-staging:
    name: "🚀 Deploy to Staging Environment"
    needs: [docker-build-and-push, lambda-deploy, changed-files]  # ⬅️ Waits for both builds
    if: |
      always() && github.ref == 'refs/heads/main' && (
        (needs.docker-build-and-push.result == 'success') ||
        (needs.lambda-deploy.result == 'success')
      )
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.nerdwork-plus.example.com  # Replace with your actual staging environment URL
    steps:
      - uses: actions/checkout@v4
      
      - name: Debug deployment conditions
        run: |
          echo "Deployment Status Summary:"
          echo "Docker build result: ${{ needs.docker-build-and-push.result }}"
          echo "Lambda deploy result: ${{ needs.lambda-deploy.result }}"
          echo "Frontend changes: ${{ needs.changed-files.outputs.frontend-tests }}"
          echo "Backend changes: ${{ needs.changed-files.outputs.backend-tests }}"
          echo "Current branch: ${{ github.ref }}"
          echo "Proceeding with staging deployment..."

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'staging',
              auto_merge: false,
              required_contexts: [],
              description: 'Deploying to staging environment'
            });
            return deployment.data.id;

      - name: Set deployment status to in_progress
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'in_progress',
              description: 'Deployment started'
            });

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1  # Replace with your AWS region

      - name: Create staging environment file
        run: |
          echo "Creating .env file for staging deployment..."
          echo "DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" > .env
          echo "API_KEY=${{ secrets.STAGING_API_KEY }}" >> .env
          echo "SERVICE_URL=${{ secrets.STAGING_SERVICE_URL || 'https://staging.nerdwork-plus.example.com' }}" >> .env
          echo "API_ENDPOINT=${{ needs.lambda-deploy.outputs.lambda-endpoint || secrets.STAGING_API_ENDPOINT }}" >> .env
          echo "JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION || 'eu-west-1' }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "S3_BUCKET=${{ secrets.STAGING_S3_BUCKET || 'nerdwork-staging-assets' }}" >> .env

          # Log non-sensitive environment variables
          echo "Environment file created with the following variables:"
          cat .env | grep -v "SECRET\|KEY\|PASSWORD" || true

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Pull the latest Docker images from GitHub Container Registry
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com

          # Load environment variables from .env.staging
          set -a
          source .env
          set +a

          # Deploy frontend and connect to backend
          echo "Frontend image version: ${{ needs.docker-build-and-push.outputs.image-version || 'N/A' }}"
          echo "Backend API endpoint: ${{ needs.lambda-deploy.outputs.lambda-endpoint || 'N/A' }}"

          # Update ECS service with new image (if Docker build succeeded)
          if [ "${{ needs.docker-build-and-push.result }}" == "success" ]; then
            echo "Deploying frontend to ECS..."
            # aws ecs update-service --cluster staging-cluster --service nerdwork-frontend --force-new-deployment --region eu-west-1
          fi

          # Verify Lambda deployment (if Lambda deploy succeeded)
          if [ "${{ needs.lambda-deploy.result }}" == "success" ] && [ ! -z "${{ needs.lambda-deploy.outputs.lambda-endpoint }}" ]; then
            echo "Backend Lambda API is available at: ${{ needs.lambda-deploy.outputs.lambda-endpoint }}"
            curl -f "${{ needs.lambda-deploy.outputs.lambda-endpoint }}/health" || echo "Health check not available"
          fi

          echo "✅ Deployment to staging environment completed"

      - name: Set deployment status to success
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              description: 'Deployment successful',
              environment_url: 'https://staging.nerdwork-plus.example.com'
            });

      - name: Set deployment status to failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              description: 'Deployment failed'
            });

      - name: Notify about staging deployment
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚀 Staging Deployment Successful - ' + context.sha.substring(0, 7),
              labels: ['deployment', 'staging']
            });

  deploy-to-production:
    name: "🏭 Deploy to Production"
    needs: [deploy-to-staging]  # ⬅️ Waits for staging deployment success
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://nerdwork-plus.example.com  # Replace with your actual production URL
    steps:
      - uses: actions/checkout@v4

      - name: Wait for approval
        run: |
          echo "Deployment to production requires manual approval in GitHub Actions."
          echo "Please approve this deployment in the GitHub Actions UI."

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: [],
              description: 'Deploying to production environment'
            });
            return deployment.data.id;

      - name: Set deployment status to in_progress
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'in_progress',
              description: 'Production deployment started'
            });

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

           # Replace with your AWS region
      - name: Create production environment file
        run: |
          echo "Creating .env file for production deployment..."
          echo "DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}" > .env
          echo "API_KEY=${{ secrets.PRODUCTION_API_KEY }}" >> .env
          echo "SERVICE_URL=${{ secrets.PRODUCTION_SERVICE_URL || 'https://nerdwork-plus.example.com' }}" >> .env
          echo "JWT_SECRET=${{ secrets.PRODUCTION_JWT_SECRET }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION || 'eu-west-1' }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "S3_BUCKET=${{ secrets.PRODUCTION_S3_BUCKET || 'nerdwork-production-assets' }}" >> .env

      - name: Deploy Backend to Production Lambda
        run: |
          cd backend
          echo "Deploying backend to production Lambda..."

          # Create production environment file
          echo "DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}" > .env
          echo "JWT_SECRET=${{ secrets.PRODUCTION_JWT_SECRET }}" >> .env
          echo "S3_BUCKET_NAME=${{ secrets.PRODUCTION_S3_BUCKET }}" >> .env
          # ... add other production environment variables

          # Deploy to production
          npm install -g serverless@3
          serverless deploy --stage production --region eu-west-1 --verbose

          echo "✅ Backend deployed to production Lambda"

          # Log non-sensitive environment variables
          echo "Environment file created with the following variables:"
          cat .env | grep -v "SECRET\|KEY\|PASSWORD" || true
      - name: Setup ECS Infrastructure
        run: |
          echo "Setting up ECS infrastructure if needed..."

          # Check and create ECS cluster if it doesn't exist
          if ! aws ecs describe-clusters --clusters prod-cluster --region eu-west-1 >/dev/null 2>&1; then
            echo "Creating ECS cluster 'prod-cluster'..."
            aws ecs create-cluster --cluster-name prod-cluster --region eu-west-1
            echo "✅ ECS cluster created"
          else
            echo "✅ ECS cluster 'prod-cluster' already exists"
          fi

          # Check and create CloudWatch log group if it doesn't exist
          if ! aws logs describe-log-groups --log-group-name-prefix "/ecs/nerdwork-frontend" --region eu-west-1 | grep -q "/ecs/nerdwork-frontend"; then
            echo "Creating CloudWatch log group..."
            aws logs create-log-group --log-group-name "/ecs/nerdwork-frontend" --region eu-west-1
            echo "✅ CloudWatch log group created"
          else
            echo "✅ CloudWatch log group already exists"
          fi

      - name: Register Task Definition
        run: |
          # Generate task definition with latest image
          cat > task-def.json <<EOF
          {
            "family": "nerdwork-frontend",
            "networkMode": "awsvpc",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "taskRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskRole",
            "cpu": "256",
            "memory": "512",
            "requiresCompatibilities": ["FARGATE"],
            "containerDefinitions": [
              {
                "name": "nerdwork-frontend",
                "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/nerdwork-frontend:${{ needs.docker-build-and-push.outputs.image-version }}",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 3000,
                    "hostPort": 3000
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/nerdwork-frontend",
                    "awslogs-region": "eu-west-1",
                    "awslogs-stream-prefix": "ecs"
                  }
                },
                "environment": [
                  { "name": "NODE_ENV", "value": "production" }
                ]
              }
            ]
          }
          EOF
          aws ecs register-task-definition --cli-input-json file://task-def.json --region eu-west-1
          echo "✅ Task definition registered with revision: $(aws ecs describe-task-definition --task-definition nerdwork-frontend --region eu-west-1 --query 'taskDefinition.revision' --output text)"

      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."

          # Check if ECS cluster and service exist
          echo "Verifying ECS cluster and service..."
          aws ecs describe-clusters --clusters prod-cluster --region eu-west-1 || {
            echo "❌ ECS cluster 'prod-cluster' not found. Please create it first."
            exit 1
          }

          # Check and create ECS service if it doesn't exist
          if ! aws ecs describe-services --cluster prod-cluster --services nerdwork-frontend --region eu-west-1 >/dev/null 2>&1; then
            echo "Creating ECS service 'nerdwork-frontend'..."

            # Get the latest task definition ARN
            TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition nerdwork-frontend --region eu-west-1 --query 'taskDefinition.taskDefinitionArn' --output text)

            # Create the service (you may need to adjust VPC settings)
            aws ecs create-service \
              --cluster prod-cluster \
              --service-name nerdwork-frontend \
              --task-definition "$TASK_DEF_ARN" \
              --desired-count 1 \
              --launch-type FARGATE \
              --platform-version LATEST \
              --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.ECS_SUBNET_IDS }}],securityGroups=[${{ secrets.ECS_SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}" \
              --region eu-west-1

            echo "✅ ECS service created"
          else
            echo "✅ ECS service 'nerdwork-frontend' already exists"
          fi

          # Get current task definition revision
          TASK_DEF_REVISION=$(aws ecs describe-task-definition --task-definition nerdwork-frontend --region eu-west-1 --query 'taskDefinition.revision' --output text)
          echo "Using task definition revision: $TASK_DEF_REVISION"

          # Load environment variables
          set -a
          source .env
          set +a

          # Update ECS service with better error handling
          echo "Updating ECS service..."
          aws ecs update-service \
            --cluster prod-cluster \
            --service nerdwork-frontend \
            --task-definition nerdwork-frontend:$TASK_DEF_REVISION \
            --force-new-deployment \
            --region eu-west-1

          if [ $? -ne 0 ]; then
            echo "❌ Failed to update ECS service"
            exit 1
          fi

          echo "Waiting for service to stabilize (this may take several minutes)..."
          echo "Checking service status every 30 seconds for up to 15 minutes..."

          # Custom wait logic with better timeout and error reporting
          MAX_ATTEMPTS=30  # 15 minutes (30 * 30 seconds)
          ATTEMPT=0

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS - Checking service status..."

            # Get service status
            SERVICE_STATUS=$(aws ecs describe-services \
              --cluster prod-cluster \
              --services nerdwork-frontend \
              --region eu-west-1 \
              --query 'services[0].deployments[?status==`PRIMARY`].rolloutState' \
              --output text)

            RUNNING_COUNT=$(aws ecs describe-services \
              --cluster prod-cluster \
              --services nerdwork-frontend \
              --region eu-west-1 \
              --query 'services[0].runningCount' \
              --output text)

            DESIRED_COUNT=$(aws ecs describe-services \
              --cluster prod-cluster \
              --services nerdwork-frontend \
              --region eu-west-1 \
              --query 'services[0].desiredCount' \
              --output text)

            echo "Service Status: $SERVICE_STATUS, Running: $RUNNING_COUNT, Desired: $DESIRED_COUNT"

            if [ "$SERVICE_STATUS" = "COMPLETED" ] && [ "$RUNNING_COUNT" = "$DESIRED_COUNT" ]; then
              echo "✅ Service deployment completed successfully!"
              break
            fi

            if [ "$SERVICE_STATUS" = "FAILED" ]; then
              echo "❌ Service deployment failed!"
              # Get failure details
              aws ecs describe-services \
                --cluster prod-cluster \
                --services nerdwork-frontend \
                --region eu-west-1 \
                --query 'services[0].events[0:5].[createdAt,message]' \
                --output table
              exit 1
            fi

            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "❌ Timeout: Service did not stabilize within 15 minutes"
              echo "Final service status: $SERVICE_STATUS"
              echo "Recent service events:"
              aws ecs describe-services \
                --cluster prod-cluster \
                --services nerdwork-frontend \
                --region eu-west-1 \
                --query 'services[0].events[0:10].[createdAt,message]' \
                --output table
              exit 1
            fi

            sleep 30
          done

          echo "✅ Deployment to production environment completed"

      - name: Set deployment status to success
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              description: 'Production deployment successful',
              environment_url: 'https://nerdwork-plus.example.com'
            });

      - name: Set deployment status to failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              description: 'Production deployment failed'
            });

      - name: Notify about production deployment
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueBody = `# 🚀 Production Deployment Successful

            Version: ${{ github.sha }}
            Deployment URL: https://nerdwork-plus.example.com

            This version has been successfully deployed to production.
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚀 Production Deployment - ${{ github.sha }}',
              body: issueBody,
              labels: ['deployment', 'production']
            });