name: CI - Build and Test

on:
  push:
    branches: ['**']  # Run on push to all branches
  pull_request:
    branches: [dev, main]  # Run on PRs to dev or main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          cache: 'pnpm'
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install
      #- name: Lint
      #  run: pnpm lint  # Restored; ensure configured in package.json
      - name: Test
        run: pnpm test
      - name: Upload test coverage (optional - for analytics)
        if: always()  # Run even if tests fail
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  # Add in repo secrets
          files: ./coverage/lcov.info  # Adjust if path differs
      - name: Dependency vulnerability scanning (optional - for security)
        if: always()
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload scan results to GitHub
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
      - name: Build (only on main - dry run for readiness)
        if: github.ref == 'refs/heads/main'
        run: |
          built_services=0
          for service in docker/*; do  # Adjusted to docker/ based on your structure
            if [ -f "$service/Dockerfile" ]; then
              docker build --no-cache -t nerdwork-$service:test $service
              ((built_services++))
            fi
          done
          if [ "$built_services" -eq 0 ]; then
            echo "❌ No services built. Check Dockerfile paths."
            exit 1
          fi
          echo "✅ Build successful - $built_services services ready for deployment"
      - name: Notify failure on PR (GitHub comment)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ CI failed on ${{ github.ref }}! @${{ github.actor }}, please fix errors. Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            })
      - name: Notify failure on non-PR push (GitHub issue)
        if: failure() && github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'CI Failure on ${{ github.ref }} - Commit ${{ github.sha }}',
              body: '⚠️ CI failed! @${{ github.actor }}, please fix. Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              assignees: ['${{ github.actor }}']
            })
      - name: Notify commit author on failure (push)
        if: failure() && github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `@${{ github.actor }} CI failed on this commit. Please check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            })
      # Removed redundant PR owner notification; covered by PR comment