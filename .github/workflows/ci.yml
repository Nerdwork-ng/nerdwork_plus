name: CI/CD - Build, Test and Deploy

permissions:
  contents: write
  issues: write
  security-events: write  # Required for SARIF upload
  packages: write  # Required for Docker image publishing
  deployments: write  # Required for deployment status updates

on:
  push:
    branches: ['**']  # Run on push to all branches
  pull_request:
    branches: [main]  # Run on PRs to dev or main

jobs:
  changed-files:
    runs-on: ubuntu-latest
    outputs:
      frontend-tests: ${{ steps.check-files.outputs.frontend }}
      backend-tests: ${{ steps.check-files.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
      - name: Check changed files
        id: check-files
        run: |
          echo "frontend=$(git diff --name-only HEAD^ HEAD | grep -E 'apps/.*\.(ts|tsx)$' | wc -l | xargs)" >> $GITHUB_OUTPUT
          echo "backend=$(git diff --name-only HEAD^ HEAD | grep -E 'backend/.*\.(ts|js)$' | wc -l | xargs)" >> $GITHUB_OUTPUT

  build-and-test:
    runs-on: ubuntu-latest
    needs: changed-files
    strategy:
      matrix:
        test-type:
          - { name: frontend-tests, path: 'apps/web/**', command: 'test' }
          - { name: backend-tests, path: 'backend/**', command: 'test' }
    steps:
      - uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          cache: 'pnpm'
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install
      - name: Run ${{ matrix.test-type.name }}
        if: needs.changed-files.outputs[matrix.test-type.name] > 0
        run: |
          if [ -f "tsconfig.${{ matrix.test-type.name }}.json" ]; then
            pnpm ${{ matrix.test-type.command }} --config tsconfig.${{ matrix.test-type.name }}.json
          else
            pnpm ${{ matrix.test-type.command }}
          fi
      - name: Upload test coverage (optional - for analytics)
        if: always() && needs.changed-files.outputs[matrix.test-type.name] > 0
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  # Add in repo secrets
          files: ./coverage/lcov.info  # Adjust if path differs
      - name: Dependency vulnerability scanning (optional - for security)
        if: always() && needs.changed-files.outputs[matrix.test-type.name] > 0
        uses: aquasecurity/trivy-action@0.18.0  # Use stable version
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.test-type.name }}.sarif'
      - name: Debug - Verify SARIF file
        if: always() && needs.changed-files.outputs[matrix.test-type.name] > 0
        run: |
          ls -la trivy-results-${{ matrix.test-type.name }}.sarif || echo "SARIF file not found for ${{ matrix.test-type.name }}"
      - name: Upload scan results to GitHub
        if: always() && needs.changed-files.outputs[matrix.test-type.name] > 0
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results-${{ matrix.test-type.name }}.sarif
      - name: Build Docker image (only on main - dry run for readiness)
        if: github.ref == 'refs/heads/main' && (needs.changed-files.outputs.frontend-tests > 0 || needs.changed-files.outputs.backend-tests > 0)
        run: |
          built_services=0
          for service in docker/*; do
            if [ -f "$service/Dockerfile" ]; then
              docker build --no-cache -t nerdwork-$(basename $service):test $service
              ((built_services++))
              echo "‚úÖ Built $service_name"
            fi
          done
          if [ "$built_services" -eq 0 ]; then
            echo "‚ùå No services built. Check Dockerfile paths."
            exit 1
          fi
          echo "‚úÖ Build successful - $built_services services ready for deployment"

      - name: Set version variables
        if: github.ref == 'refs/heads/main' && success() && (needs.changed-files.outputs.frontend-tests > 0 || needs.changed-files.outputs.backend-tests > 0)
        id: version
        run: |
          # Get short SHA for the commit
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

          # Check if this commit has a tag
          GIT_TAG=$(git tag --points-at HEAD | head -n 1)
          if [ -n "$GIT_TAG" ]; then
            echo "version=$GIT_TAG" >> $GITHUB_OUTPUT
            echo "Using git tag: $GIT_TAG"
          else
            echo "version=$SHORT_SHA" >> $GITHUB_OUTPUT
            echo "No git tag found, using commit SHA: $SHORT_SHA"
          fi

          # Get current date in YYYYMMDD format
          BUILD_DATE=$(date +'%Y%m%d')
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT

      - name: Create ECR repositories (only on main)
        if: github.ref == 'refs/heads/main' && success() && (needs.changed-files.outputs.frontend-tests > 0 || needs.changed-files.outputs.backend-tests > 0)
        run: |
          for service in docker/*; do
            if [ -f "$service/Dockerfile" ]; then
              service_name=$(basename $service)
              echo "Creating ECR repository for $service_name"
              aws ecr describe-repositories --repository-names nerdwork-$service_name --region eu-west-1 || \
              aws ecr create-repository --repository-name nerdwork-$service_name --region eu-west-1
              echo "‚úÖ ECR repository created or verified for $service_name"
            fi
          done

      - name: Publish Docker images (only on main)
        if: github.ref == 'refs/heads/main' && success() && (needs.changed-files.outputs.frontend-tests > 0 || needs.changed-files.outputs.backend-tests > 0)
        run: |
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com

          for service in docker/*; do
            if [ -f "$service/Dockerfile" ]; then
              service_name=$(basename $service)
              echo "Publishing $service_name to GitHub Container Registry"

              # Build the image
              docker build --no-cache -t nerdwork-$service_name:test $service

              # Tag with version info
              docker tag nerdwork-$service_name:test ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/nerdwork-$service_name:${{ steps.version.outputs.version }}
              docker tag nerdwork-$service_name:test ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/nerdwork-$service_name:${{ steps.version.outputs.build_date }}
              docker tag nerdwork-$service_name:test ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/nerdwork-$service_name:latest

              # Push to ECR
              docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/nerdwork-$service_name:${{ steps.version.outputs.version }}
              docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/nerdwork-$service_name:${{ steps.version.outputs.build_date }}
              docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/nerdwork-$service_name:latest

              echo "‚úÖ Published $service_name with tags: latest, ${{ steps.version.outputs.version }}, ${{ steps.version.outputs.build_date}}"
            fi
          done
          echo "‚úÖ All Docker images published successfully"

      - name: Create artifact summary
        if: success() && github.ref == 'refs/heads/main' && (needs.changed-files.outputs.frontend-tests > 0 || needs.changed-files.outputs.backend-tests > 0)
        id: artifact-summary
        run: |
          echo "## üöÄ Docker Images Created" > artifact_summary.md
          echo "| Service | Tags | Repository |" >> artifact_summary.md
          echo "| ------- | ---- | ---------- |" >> artifact_summary.md

          for service in docker/*; do
            if [ -f "$service/Dockerfile" ]; then
              service_name=$(basename $service)
              echo "| $service_name | latest, ${{ steps.version.outputs.version }}, ${{ steps.version.outputs.build_date }} | ghcr.io/${{ github.repository_owner }}/nerdwork-$service_name |" >> artifact_summary.md
            fi
          done

          cat artifact_summary.md

      - name: Notify about artifacts
        if: success() && github.ref == 'refs/heads/main' && (needs.changed-files.outputs.frontend-tests > 0 || needs.changed-files.outputs.backend-tests > 0)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const artifactSummary = fs.readFileSync('artifact_summary.md', 'utf8');

            const issueBody = `# üì¶ New Artifacts Available

            ${artifactSummary}

            These artifacts are ready for deployment to staging environment.
            Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üì¶ New artifacts available for testing - ${{ steps.version.outputs.version }}',
              body: issueBody,
              labels: ['artifacts', 'ready-for-testing']
            });

      - name: Notify failure on PR (GitHub comment)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ö†Ô∏è CI failed on ${{ matrix.test-type.name }} for ${{ github.ref }}! @${{ github.actor }}, please fix errors. Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            })
      - name: Notify failure on non-PR push (GitHub issue)
        if: failure() && github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'CI Failure on ${{ github.ref }} - Commit ${{ github.sha }}',
              body: '‚ö†Ô∏è CI failed on ${{ matrix.test-type.name }}! @${{ github.actor }}, please fix. Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              assignees: ['${{ github.actor }}']
            })
      - name: Notify commit author on failure (push)
        if: failure() && github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `@${{ github.actor }} CI failed on this commit (${{ matrix.test-type.name }}). Please check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            })

  deploy-to-staging:
    name: Deploy to Staging Environment
    needs: [build-and-test]
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.nerdwork-plus.example.com  # Replace with your actual staging environment URL
    steps:
      - uses: actions/checkout@v4

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'staging',
              auto_merge: false,
              required_contexts: [],
              description: 'Deploying to staging environment'
            });
            return deployment.data.id;

      - name: Set deployment status to in_progress
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'in_progress',
              description: 'Deployment started'
            });

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1  # Replace with your AWS region

      - name: Create staging environment file
        run: |
          echo "Creating .env file for staging deployment..."
          echo "DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" > .env
          echo "API_KEY=${{ secrets.STAGING_API_KEY }}" >> .env
          echo "SERVICE_URL=${{ secrets.STAGING_SERVICE_URL || 'https://staging.nerdwork-plus.example.com' }}" >> .env
          echo "JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION || 'us-east-1' }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "S3_BUCKET=${{ secrets.STAGING_S3_BUCKET || 'nerdwork-staging-assets' }}" >> .env

          # Log non-sensitive environment variables
          echo "Environment file created with the following variables:"
          cat .env | grep -v "SECRET\|KEY\|PASSWORD" || true

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Pull the latest Docker images from GitHub Container Registry
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com

          # Load environment variables from .env.staging
          set -a
          source .env
          set +a

          # Update ECS services or other deployment steps
          # Example: aws ecs update-service --cluster staging-cluster --service nerdwork-api --force-new-deployment --region eu-west-1

          echo "‚úÖ Deployment to staging environment completed"

      - name: Set deployment status to success
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              description: 'Deployment successful',
              environment_url: 'https://staging.nerdwork-plus.example.com'
            });

      - name: Set deployment status to failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              description: 'Deployment failed'
            });

      - name: Notify about staging deployment
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üöÄ Staging Deployment Successful - ' + context.sha.substring(0, 7),
              labels: ['deployment', 'staging']
            });

  deploy-to-production:
    name: Deploy to Production
    needs: [deploy-to-staging]
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://nerdwork-plus.example.com  # Replace with your actual production URL
    steps:
      - uses: actions/checkout@v4

      - name: Wait for approval
        run: |
          echo "Deployment to production requires manual approval in GitHub Actions."
          echo "Please approve this deployment in the GitHub Actions UI."

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: [],
              description: 'Deploying to production environment'
            });
            return deployment.data.id;

      - name: Set deployment status to in_progress
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'in_progress',
              description: 'Production deployment started'
            });

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

           # Replace with your AWS region
      - name: Create production environment file
        run: |
          echo "Creating .env file for production deployment..."
          echo "DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}" > .env
          echo "API_KEY=${{ secrets.PRODUCTION_API_KEY }}" >> .env
          echo "SERVICE_URL=${{ secrets.PRODUCTION_SERVICE_URL || 'https://nerdwork-plus.example.com' }}" >> .env
          echo "JWT_SECRET=${{ secrets.PRODUCTION_JWT_SECRET }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION || 'us-east-1' }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "S3_BUCKET=${{ secrets.PRODUCTION_S3_BUCKET || 'nerdwork-production-assets' }}" >> .env

          # Log non-sensitive environment variables
          echo "Environment file created with the following variables:"
          cat .env | grep -v "SECRET\|KEY\|PASSWORD" || true
      - name: Register Task Definition
        run: |
          # Generate task definition with latest image
          cat > task-def.json <<EOF
          {
            "family": "nerdwork-api",
            "networkMode": "awsvpc",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "taskRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskRole",
            "cpu": "256",
            "memory": "512",
            "requiresCompatibilities": ["FARGATE"],
            "containerDefinitions": [
              {
                "name": "nerdwork-api",
                "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/nerdwork-api:${{ steps.version.outputs.version }}",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 3000,
                    "hostPort": 3000
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/nerdwork-api",
                    "awslogs-region": "eu-west-1",
                    "awslogs-stream-prefix": "ecs"
                  }
                },
                "environment": [
                  { "name": "NODE_ENV", "value": "production" }
                ]
              }
            ]
          }
          EOF
          aws ecs register-task-definition --cli-input-json file://task-def.json --region eu-west-1
          echo "‚úÖ Task definition registered with revision: $(aws ecs describe-task-definition --task-definition nerdwork-api --region eu-west-1 --query 'taskDefinition.revision' --output text)"

      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment.."
          # Pull the latest Docker images from GitHub Container Registry
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com

          # Load environment variables from .env.production
          set -a
          source .env
          set +a

          # Update ECS services or other deployment steps
          aws ecs update-service --cluster prod-cluster --service nerdwork-api --task-definition nerdwork-api:$(aws ecs describe-task-definition --task-definition nerdwork-api --region eu-west-1 --query 'taskDefinition.revision' --output text) --force-new-deployment --region eu-west-1 || exit 1
          aws ecs wait services-stable --cluster prod-cluster --services nerdwork-api --region eu-west-1

          echo "‚úÖ Deployment to production environment completed"

      - name: Set deployment status to success
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              description: 'Production deployment successful',
              environment_url: 'https://nerdwork-plus.example.com'
            });

      - name: Set deployment status to failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              description: 'Production deployment failed'
            });

      - name: Notify about production deployment
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueBody = `# üöÄ Production Deployment Successful

            Version: ${{ github.sha }}
            Deployment URL: https://nerdwork-plus.example.com

            This version has been successfully deployed to production.
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üöÄ Production Deployment - ${{ github.sha }}',
              body: issueBody,
              labels: ['deployment', 'production']
            });