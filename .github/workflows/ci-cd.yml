name: Nerdwork+ CI/CD

on:
  push:
    branches:
      - '**'  # Any branch
  pull_request:
    branches:
      - main

env:
  AWS_REGION: eu-east-1  # Your region
  ECR_REPOSITORY: nerdwork-plus  # ECR repo name

jobs:
  ci-lint-build-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth, user, comic, file, wallet, payment, loyalty, nft, notification, analytics]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'  # From README: Node.js 18 LTS

      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            services/${{ matrix.service }}/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('services/${{ matrix.service }}/pnpm-lock.yaml') }}

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        working-directory: services/${{ matrix.service }}
        run: pnpm i --frozen-lockfile  # Equivalent to ci for reproducibility

      - name: Lint code
        working-directory: services/${{ matrix.service }}
        run: pnpm run lint  # Assumes lint script (e.g., ESLint/Prettier)

      - name: Build service
        working-directory: services/${{ matrix.service }}
        run: pnpm run build  # Skip if no build step

      - name: Run tests
        working-directory: services/${{ matrix.service }}
        run: pnpm test  # Unit/integration tests

  cd-containerize-deploy:
    runs-on: ubuntu-latest
    needs: ci-lint-build-test
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [auth, user, comic, file, wallet, payment, loyalty, nft, notification, analytics]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        working-directory: services/${{ matrix.service }}
        run: pnpm i --frozen-lockfile

      - name: Build service
        working-directory: services/${{ matrix.service }}
        run: pnpm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: services/${{ matrix.service }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ matrix.service }}-$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ matrix.service }}-$IMAGE_TAG

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ matrix.service }}-${{ github.sha }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster nerdwork-cluster --service ${{ matrix.service }}-service --force-new-deployment
          aws ecs wait services-stable --cluster nerdwork-cluster --services ${{ matrix.service }}-service
        # For blue-green or CDK: Replace with 'cdk deploy' if infra/ is set up; requires CDK bootstrap.