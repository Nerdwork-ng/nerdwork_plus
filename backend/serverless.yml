service: nerdwork-backend

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'prod'}
  region: ${opt:region, 'eu-west-1'}
  memorySize: 512
  timeout: 30
  environment:
    NODE_ENV: ${self:provider.stage}
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource: 
            - "arn:aws:ssm:${self:provider.region}:*:parameter/nerdwork/${self:provider.stage}/*"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource: 
            - "arn:aws:s3:::nerdwork-assets-${self:provider.stage}/*"
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"

plugins:
  - serverless-offline

functions:
  # API Gateway Proxy
  api-gateway:
    handler: api-gateway/dist/lambda.handler
    package:
      patterns:
        - 'api-gateway/dist/**'
        - 'api-gateway/package.json'
        - '!api-gateway/src/**'
        - '!api-gateway/node_modules/**'
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
    environment:
      SERVICE_TYPE: api-gateway

  # Auth Service
  auth-service:
    handler: services/auth-service/dist/lambda.handler
    events:
      - http:
          path: /auth/{proxy+}
          method: ANY
          cors: true
    environment:
      SERVICE_TYPE: auth-service

  # User Service  
  user-service:
    handler: services/user-service/dist/lambda.handler
    events:
      - http:
          path: /users/{proxy+}
          method: ANY
          cors: true
    environment:
      SERVICE_TYPE: user-service

  # Comic Service
  comic-service:
    handler: services/comic-service/dist/lambda.handler
    events:
      - http:
          path: /comics/{proxy+}
          method: ANY
          cors: true
    environment:
      SERVICE_TYPE: comic-service

  # Wallet Service
  wallet-service:
    handler: services/wallet-service/dist/lambda.handler
    events:
      - http:
          path: /wallet/{proxy+}
          method: ANY
          cors: true
    environment:
      SERVICE_TYPE: wallet-service

  # Event Service
  event-service:
    handler: services/event-service/dist/lambda.handler
    events:
      - http:
          path: /events/{proxy+}
          method: ANY
          cors: true
    environment:
      SERVICE_TYPE: event-service

  # Ledger Service
  ledger-service:
    handler: services/ledger-service/dist/lambda.handler
    events:
      - http:
          path: /ledger/{proxy+}
          method: ANY
          cors: true
    environment:
      SERVICE_TYPE: ledger-service

  # File Service
  file-service:
    handler: services/file-service/dist/lambda.handler
    events:
      - http:
          path: /files/{proxy+}
          method: ANY
          cors: true
    environment:
      SERVICE_TYPE: file-service

package:
  patterns:
    - 'services/*/dist/**'
    - 'api-gateway/dist/**'
    - '!services/*/src/**'
    - '!services/*/node_modules/**'
    - '!api-gateway/src/**'
    - '!api-gateway/node_modules/**'
    - '!node_modules/**'
    - '!.serverless/**'
    - '!**/*.test.ts'
    - '!**/*.spec.ts'
    - '!**/test/**'
    - '!**/tests/**'
    - '!**/.git/**'

custom:
  serverless-offline:
    httpPort: 3000
    noPrependStageInUrl: true
