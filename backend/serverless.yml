service: nerdwork-backend

frameworkVersion: '3'

useDotenv: true

package:
  individually: false
  excludeDevDependencies: true
  exclude:
    - node_modules/drizzle-orm/sqlite-core/**
    - node_modules/**/*.d.ts
    - '**/*.test.ts'
    - '**/*.spec.ts'
    - 'tests/**'
    - '__tests__/**'
    - '*.md'
    - '.git/**'
    - '.github/**'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}
  memorySize: 512
  timeout: 30
  deploymentBucket:
    name: ${env:S3_BUCKET_NAME}
  environment:
    NODE_ENV: ${self:provider.stage}
    DATABASE_URL: ${env:DATABASE_URL}
    JWT_SECRET: ${env:JWT_SECRET}
    JWT_EXPIRES_IN: ${env:JWT_EXPIRES_IN, '7d'}
    S3_BUCKET_NAME: ${env:S3_BUCKET_NAME}
    AWS_REGION: ${env:AWS_REGION, 'eu-west-1'}
    S3_REGION: ${env:S3_REGION, 'eu-west-1'}
    AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
    CLOUDFRONT_DOMAIN: ${env:CLOUDFRONT_DOMAIN}
    CLOUDFRONT_DISTRIBUTION_ID: ${env:CLOUDFRONT_DISTRIBUTION_ID}
    MAX_FILES_PER_UPLOAD: ${env:MAX_FILES_PER_UPLOAD, '20'}
    MAX_FILE_SIZE: ${env:MAX_FILE_SIZE, '104857600'}
    GOOGLE_CLIENT_ID: ${env:GOOGLE_CLIENT_ID}
    GOOGLE_CLIENT_SECRET: ${env:GOOGLE_CLIENT_SECRET}
    HELIO_BASE_URL_DEV: ${env:HELIO_BASE_URL_DEV}
    HELIO_CLUSTER: ${env:HELIO_CLUSTER}
    HELIO_API_KEY: ${env:HELIO_API_KEY}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource: 
            - "arn:aws:s3:::${env:S3_BUCKET_NAME}/*"
        - Effect: Allow
          Action:
            - rds-data:ExecuteStatement
            - rds-data:BatchExecuteStatement
            - rds-data:BeginTransaction
            - rds-data:CommitTransaction
            - rds-data:RollbackTransaction
          Resource: "*"

plugins:
  - serverless-plugin-typescript
  - serverless-offline

functions:
  # Main API Gateway handler (for backwards compatibility)
  api:
    handler: lambda.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
    environment:
      STAGE: ${self:provider.stage}

  # Auth Service
  auth-service:
    handler: services/auth-service/lambda.handler
    events:
      - http:
          path: /auth/{proxy+}
          method: ANY
          cors: true
    environment:
      STAGE: ${self:provider.stage}
      SERVICE_NAME: auth-service

  # User Service  
  user-service:
    handler: services/user-service/lambda.handler
    events:
      - http:
          path: /users/{proxy+}
          method: ANY
          cors: true
      - http:
          path: /profile/{proxy+}
          method: ANY
          cors: true
    environment:
      STAGE: ${self:provider.stage}
      SERVICE_NAME: user-service

  # Comic Service
  comic-service:
    handler: services/comic-service/lambda.handler
    events:
      - http:
          path: /comics/{proxy+}
          method: ANY
          cors: true
      - http:
          path: /chapters/{proxy+}
          method: ANY
          cors: true
      - http:
          path: /library/{proxy+}
          method: ANY
          cors: true
    environment:
      STAGE: ${self:provider.stage}
      SERVICE_NAME: comic-service

  # File Service
  file-service:
    handler: services/file-service/lambda.handler
    events:
      - http:
          path: /file-upload/{proxy+}
          method: ANY
          cors: true
    environment:
      STAGE: ${self:provider.stage}
      SERVICE_NAME: file-service

  # Wallet Service
  wallet-service:
    handler: services/wallet-service/lambda.handler
    events:
      - http:
          path: /wallet/{proxy+}
          method: ANY
          cors: true
      - http:
          path: /transactions/{proxy+}
          method: ANY
          cors: true
    environment:
      STAGE: ${self:provider.stage}
      SERVICE_NAME: wallet-service

  # Ledger Service
  ledger-service:
    handler: services/ledger-service/lambda.handler
    events:
      - http:
          path: /nft/{proxy+}
          method: ANY
          cors: true
      - http:
          path: /payment/{proxy+}
          method: ANY
          cors: true
    environment:
      STAGE: ${self:provider.stage}
      SERVICE_NAME: ledger-service

  # Event Service
  event-service:
    handler: services/event-service/lambda.handler
    events:
      - http:
          path: /events/{proxy+}
          method: ANY
          cors: true
      - http:
          path: /tickets/{proxy+}
          method: ANY
          cors: true
    environment:
      STAGE: ${self:provider.stage}
      SERVICE_NAME: event-service

custom:
  serverless-offline:
    httpPort: 3000
    noPrependStageInUrl: true
  typescript:
    tsConfigFile: tsconfig.json
    include:
      - src/**/*
    exclude:
      - node_modules/**
      - .build/**
      - .serverless/**
      - tests/**
