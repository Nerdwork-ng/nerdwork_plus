import { pgTable, uuid, text, timestamp, boolean, integer } from 'drizzle-orm/pg-core';
import { userProfiles } from './profile';
import { relations } from 'drizzle-orm';
export const userWallets = pgTable('user_wallets', {
    id: uuid('id').primaryKey().defaultRandom(),
    userProfileId: uuid('user_profile_id')
        .notNull()
        .unique() // âœ… Enforce 1:1 by making this unique
        .references(() => userProfiles.id, { onDelete: 'cascade' }),
    nwtBalance: integer('nwt_balance').notNull(),
    nwtLockedBalance: integer('nwt_locked_balance').notNull(),
    primaryWalletAddress: text('primary_wallet_address'),
    kycStatus: text('kyc_status').notNull(), // 'none' | 'pending' | 'verified' | 'rejected'
    kycLevel: integer('kyc_level').notNull().default(0),
    spendingLimitDaily: integer('spending_limit_daily'),
    spendingLimitMonthly: integer('spending_limit_monthly'),
    createdAt: timestamp('created_at', { mode: 'date' }).notNull().defaultNow(),
    updatedAt: timestamp('updated_at', { mode: 'date' }).notNull().defaultNow(),
});
export const walletAddresses = pgTable('wallet_addresses', {
    id: uuid('id').primaryKey().defaultRandom(),
    userWalletId: uuid('user_wallet_id')
        .notNull()
        .references(() => userWallets.id, { onDelete: 'cascade' }),
    blockchain: text('blockchain').notNull(), // 'ethereum' | 'polygon' | 'binance' | 'solana'
    address: text('address').notNull(),
    isVerified: boolean('is_verified').notNull().default(false),
    isPrimary: boolean('is_primary').notNull().default(false),
    label: text('label'),
    addedAt: timestamp('added_at', { mode: 'date' }).notNull().defaultNow(),
});
export const userWalletsRelations = relations(userWallets, ({ one }) => ({
    userProfile: one(userProfiles, {
        fields: [userWallets.userProfileId],
        references: [userProfiles.id],
    }),
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2FsbGV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxPQUFPLEVBQ1AsSUFBSSxFQUNKLElBQUksRUFDSixTQUFTLEVBQ1QsT0FBTyxFQUNQLE9BQU8sRUFFUixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDekMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUd4QyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLGNBQWMsRUFBRTtJQUNqRCxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLGFBQWEsRUFBRTtJQUMzQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1NBQ25DLE9BQU8sRUFBRTtTQUNULE1BQU0sRUFBRSxDQUFDLHNDQUFzQztTQUMvQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQztJQUM3RCxVQUFVLEVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sRUFBRTtJQUM1QyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLEVBQUU7SUFDekQsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLHdCQUF3QixDQUFDO0lBQ3BELFNBQVMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsK0NBQStDO0lBQ3hGLFFBQVEsRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNuRCxrQkFBa0IsRUFBRSxPQUFPLENBQUMsc0JBQXNCLENBQUM7SUFDbkQsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0lBQ3ZELFNBQVMsRUFBRSxTQUFTLENBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFO0lBQzNFLFNBQVMsRUFBRSxTQUFTLENBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFO0NBQzVFLENBQUMsQ0FBQztBQUdILE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsa0JBQWtCLEVBQUU7SUFDekQsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxhQUFhLEVBQUU7SUFDM0MsWUFBWSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztTQUNqQyxPQUFPLEVBQUU7U0FDVCxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQztJQUM1RCxVQUFVLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLGdEQUFnRDtJQUMxRixPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRTtJQUNsQyxVQUFVLEVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFDM0QsU0FBUyxFQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQ3pELEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3BCLE9BQU8sRUFBRSxTQUFTLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFO0NBQ3hFLENBQUMsQ0FBQztBQWVILE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZFLFdBQVcsRUFBRSxHQUFHLENBQUMsWUFBWSxFQUFFO1FBQzdCLE1BQU0sRUFBRSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7UUFDbkMsVUFBVSxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQztLQUM5QixDQUFDO0NBQ0gsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIHBnVGFibGUsXHJcbiAgdXVpZCxcclxuICB0ZXh0LFxyXG4gIHRpbWVzdGFtcCxcclxuICBib29sZWFuLFxyXG4gIGludGVnZXIsXHJcbiAganNvblxyXG59IGZyb20gJ2RyaXp6bGUtb3JtL3BnLWNvcmUnO1xyXG5pbXBvcnQgeyB1c2VyUHJvZmlsZXMgfSBmcm9tICcuL3Byb2ZpbGUnO1xyXG5pbXBvcnQgeyByZWxhdGlvbnMgfSBmcm9tICdkcml6emxlLW9ybSc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IHVzZXJXYWxsZXRzID0gcGdUYWJsZSgndXNlcl93YWxsZXRzJywge1xyXG4gIGlkOiB1dWlkKCdpZCcpLnByaW1hcnlLZXkoKS5kZWZhdWx0UmFuZG9tKCksXHJcbiAgdXNlclByb2ZpbGVJZDogdXVpZCgndXNlcl9wcm9maWxlX2lkJylcclxuICAgIC5ub3ROdWxsKClcclxuICAgIC51bmlxdWUoKSAvLyDinIUgRW5mb3JjZSAxOjEgYnkgbWFraW5nIHRoaXMgdW5pcXVlXHJcbiAgICAucmVmZXJlbmNlcygoKSA9PiB1c2VyUHJvZmlsZXMuaWQsIHsgb25EZWxldGU6ICdjYXNjYWRlJyB9KSxcclxuICBud3RCYWxhbmNlOiBpbnRlZ2VyKCdud3RfYmFsYW5jZScpLm5vdE51bGwoKSxcclxuICBud3RMb2NrZWRCYWxhbmNlOiBpbnRlZ2VyKCdud3RfbG9ja2VkX2JhbGFuY2UnKS5ub3ROdWxsKCksXHJcbiAgcHJpbWFyeVdhbGxldEFkZHJlc3M6IHRleHQoJ3ByaW1hcnlfd2FsbGV0X2FkZHJlc3MnKSxcclxuICBreWNTdGF0dXM6IHRleHQoJ2t5Y19zdGF0dXMnKS5ub3ROdWxsKCksIC8vICdub25lJyB8ICdwZW5kaW5nJyB8ICd2ZXJpZmllZCcgfCAncmVqZWN0ZWQnXHJcbiAga3ljTGV2ZWw6IGludGVnZXIoJ2t5Y19sZXZlbCcpLm5vdE51bGwoKS5kZWZhdWx0KDApLFxyXG4gIHNwZW5kaW5nTGltaXREYWlseTogaW50ZWdlcignc3BlbmRpbmdfbGltaXRfZGFpbHknKSxcclxuICBzcGVuZGluZ0xpbWl0TW9udGhseTogaW50ZWdlcignc3BlbmRpbmdfbGltaXRfbW9udGhseScpLFxyXG4gIGNyZWF0ZWRBdDogdGltZXN0YW1wKCdjcmVhdGVkX2F0JywgeyBtb2RlOiAnZGF0ZScgfSkubm90TnVsbCgpLmRlZmF1bHROb3coKSxcclxuICB1cGRhdGVkQXQ6IHRpbWVzdGFtcCgndXBkYXRlZF9hdCcsIHsgbW9kZTogJ2RhdGUnIH0pLm5vdE51bGwoKS5kZWZhdWx0Tm93KCksXHJcbn0pO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCB3YWxsZXRBZGRyZXNzZXMgPSBwZ1RhYmxlKCd3YWxsZXRfYWRkcmVzc2VzJywge1xyXG4gIGlkOiB1dWlkKCdpZCcpLnByaW1hcnlLZXkoKS5kZWZhdWx0UmFuZG9tKCksXHJcbiAgdXNlcldhbGxldElkOiB1dWlkKCd1c2VyX3dhbGxldF9pZCcpXHJcbiAgICAubm90TnVsbCgpXHJcbiAgICAucmVmZXJlbmNlcygoKSA9PiB1c2VyV2FsbGV0cy5pZCwgeyBvbkRlbGV0ZTogJ2Nhc2NhZGUnIH0pLFxyXG4gIGJsb2NrY2hhaW46IHRleHQoJ2Jsb2NrY2hhaW4nKS5ub3ROdWxsKCksIC8vICdldGhlcmV1bScgfCAncG9seWdvbicgfCAnYmluYW5jZScgfCAnc29sYW5hJ1xyXG4gIGFkZHJlc3M6IHRleHQoJ2FkZHJlc3MnKS5ub3ROdWxsKCksXHJcbiAgaXNWZXJpZmllZDogYm9vbGVhbignaXNfdmVyaWZpZWQnKS5ub3ROdWxsKCkuZGVmYXVsdChmYWxzZSksXHJcbiAgaXNQcmltYXJ5OiBib29sZWFuKCdpc19wcmltYXJ5Jykubm90TnVsbCgpLmRlZmF1bHQoZmFsc2UpLFxyXG4gIGxhYmVsOiB0ZXh0KCdsYWJlbCcpLFxyXG4gIGFkZGVkQXQ6IHRpbWVzdGFtcCgnYWRkZWRfYXQnLCB7IG1vZGU6ICdkYXRlJyB9KS5ub3ROdWxsKCkuZGVmYXVsdE5vdygpLFxyXG59KTtcclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCB0eXBlIEluc2VydFVzZXJXYWxsZXQgPSB0eXBlb2YgdXNlcldhbGxldHMuJGluZmVySW5zZXJ0O1xyXG5leHBvcnQgdHlwZSBTZWxlY3RVc2VyV2FsbGV0ID0gdHlwZW9mIHVzZXJXYWxsZXRzLiRpbmZlclNlbGVjdDtcclxuXHJcbmV4cG9ydCB0eXBlIEluc2VydFdhbGxldEFkZHJlc3MgPSB0eXBlb2Ygd2FsbGV0QWRkcmVzc2VzLiRpbmZlckluc2VydDtcclxuZXhwb3J0IHR5cGUgU2VsZWN0V2FsbGV0QWRkcmVzcyA9IHR5cGVvZiB3YWxsZXRBZGRyZXNzZXMuJGluZmVyU2VsZWN0O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCB1c2VyV2FsbGV0c1JlbGF0aW9ucyA9IHJlbGF0aW9ucyh1c2VyV2FsbGV0cywgKHsgb25lIH0pID0+ICh7XHJcbiAgdXNlclByb2ZpbGU6IG9uZSh1c2VyUHJvZmlsZXMsIHtcclxuICAgIGZpZWxkczogW3VzZXJXYWxsZXRzLnVzZXJQcm9maWxlSWRdLFxyXG4gICAgcmVmZXJlbmNlczogW3VzZXJQcm9maWxlcy5pZF0sXHJcbiAgfSksXHJcbn0pKTtcclxuIl19