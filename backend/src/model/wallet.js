import { pgTable, uuid, text, timestamp, boolean, integer } from 'drizzle-orm/pg-core';
export const userWallets = pgTable('user_wallets', {
    id: uuid('id').primaryKey().defaultRandom(),
    userProfileId: uuid('user_profile_id').notNull(),
    nwtBalance: text('nwt_balance').notNull(),
    nwtLockedBalance: text('nwt_locked_balance').notNull(),
    primaryWalletAddress: text('primary_wallet_address'),
    kycStatus: text('kyc_status').notNull(), // 'none' | 'pending' | 'verified' | 'rejected'
    kycLevel: integer('kyc_level').notNull().default(0),
    spendingLimitDaily: text('spending_limit_daily'),
    spendingLimitMonthly: text('spending_limit_monthly'),
    createdAt: timestamp('created_at', { mode: 'date' }).notNull().defaultNow(),
    updatedAt: timestamp('updated_at', { mode: 'date' }).notNull().defaultNow(),
});
export const walletAddresses = pgTable('wallet_addresses', {
    id: uuid('id').primaryKey().defaultRandom(),
    userWalletId: uuid('user_wallet_id')
        .notNull()
        .references(() => userWallets.id, { onDelete: 'cascade' }),
    blockchain: text('blockchain').notNull(), // 'ethereum' | 'polygon' | 'binance' | 'solana'
    address: text('address').notNull(),
    isVerified: boolean('is_verified').notNull().default(false),
    isPrimary: boolean('is_primary').notNull().default(false),
    label: text('label'),
    addedAt: timestamp('added_at', { mode: 'date' }).notNull().defaultNow(),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2FsbGV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxPQUFPLEVBQ1AsSUFBSSxFQUNKLElBQUksRUFDSixTQUFTLEVBQ1QsT0FBTyxFQUNQLE9BQU8sRUFFUixNQUFNLHFCQUFxQixDQUFDO0FBRTdCLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsY0FBYyxFQUFFO0lBQ2pELEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsYUFBYSxFQUFFO0lBQzNDLGFBQWEsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxPQUFPLEVBQUU7SUFDaEQsVUFBVSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLEVBQUU7SUFDekMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUMsT0FBTyxFQUFFO0lBQ3RELG9CQUFvQixFQUFFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztJQUNwRCxTQUFTLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLCtDQUErQztJQUN4RixRQUFRLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbkQsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixDQUFDO0lBQ2hELG9CQUFvQixFQUFFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztJQUNwRCxTQUFTLEVBQUUsU0FBUyxDQUFDLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLFVBQVUsRUFBRTtJQUMzRSxTQUFTLEVBQUUsU0FBUyxDQUFDLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLFVBQVUsRUFBRTtDQUM1RSxDQUFDLENBQUM7QUFHSCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixFQUFFO0lBQ3pELEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsYUFBYSxFQUFFO0lBQzNDLFlBQVksRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUM7U0FDakMsT0FBTyxFQUFFO1NBQ1QsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLENBQUM7SUFDNUQsVUFBVSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxnREFBZ0Q7SUFDMUYsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLEVBQUU7SUFDbEMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQzNELFNBQVMsRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUN6RCxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUNwQixPQUFPLEVBQUUsU0FBUyxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLFVBQVUsRUFBRTtDQUN4RSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIHBnVGFibGUsXHJcbiAgdXVpZCxcclxuICB0ZXh0LFxyXG4gIHRpbWVzdGFtcCxcclxuICBib29sZWFuLFxyXG4gIGludGVnZXIsXHJcbiAganNvblxyXG59IGZyb20gJ2RyaXp6bGUtb3JtL3BnLWNvcmUnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHVzZXJXYWxsZXRzID0gcGdUYWJsZSgndXNlcl93YWxsZXRzJywge1xyXG4gIGlkOiB1dWlkKCdpZCcpLnByaW1hcnlLZXkoKS5kZWZhdWx0UmFuZG9tKCksXHJcbiAgdXNlclByb2ZpbGVJZDogdXVpZCgndXNlcl9wcm9maWxlX2lkJykubm90TnVsbCgpLFxyXG4gIG53dEJhbGFuY2U6IHRleHQoJ253dF9iYWxhbmNlJykubm90TnVsbCgpLFxyXG4gIG53dExvY2tlZEJhbGFuY2U6IHRleHQoJ253dF9sb2NrZWRfYmFsYW5jZScpLm5vdE51bGwoKSxcclxuICBwcmltYXJ5V2FsbGV0QWRkcmVzczogdGV4dCgncHJpbWFyeV93YWxsZXRfYWRkcmVzcycpLFxyXG4gIGt5Y1N0YXR1czogdGV4dCgna3ljX3N0YXR1cycpLm5vdE51bGwoKSwgLy8gJ25vbmUnIHwgJ3BlbmRpbmcnIHwgJ3ZlcmlmaWVkJyB8ICdyZWplY3RlZCdcclxuICBreWNMZXZlbDogaW50ZWdlcigna3ljX2xldmVsJykubm90TnVsbCgpLmRlZmF1bHQoMCksXHJcbiAgc3BlbmRpbmdMaW1pdERhaWx5OiB0ZXh0KCdzcGVuZGluZ19saW1pdF9kYWlseScpLFxyXG4gIHNwZW5kaW5nTGltaXRNb250aGx5OiB0ZXh0KCdzcGVuZGluZ19saW1pdF9tb250aGx5JyksXHJcbiAgY3JlYXRlZEF0OiB0aW1lc3RhbXAoJ2NyZWF0ZWRfYXQnLCB7IG1vZGU6ICdkYXRlJyB9KS5ub3ROdWxsKCkuZGVmYXVsdE5vdygpLFxyXG4gIHVwZGF0ZWRBdDogdGltZXN0YW1wKCd1cGRhdGVkX2F0JywgeyBtb2RlOiAnZGF0ZScgfSkubm90TnVsbCgpLmRlZmF1bHROb3coKSxcclxufSk7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IHdhbGxldEFkZHJlc3NlcyA9IHBnVGFibGUoJ3dhbGxldF9hZGRyZXNzZXMnLCB7XHJcbiAgaWQ6IHV1aWQoJ2lkJykucHJpbWFyeUtleSgpLmRlZmF1bHRSYW5kb20oKSxcclxuICB1c2VyV2FsbGV0SWQ6IHV1aWQoJ3VzZXJfd2FsbGV0X2lkJylcclxuICAgIC5ub3ROdWxsKClcclxuICAgIC5yZWZlcmVuY2VzKCgpID0+IHVzZXJXYWxsZXRzLmlkLCB7IG9uRGVsZXRlOiAnY2FzY2FkZScgfSksXHJcbiAgYmxvY2tjaGFpbjogdGV4dCgnYmxvY2tjaGFpbicpLm5vdE51bGwoKSwgLy8gJ2V0aGVyZXVtJyB8ICdwb2x5Z29uJyB8ICdiaW5hbmNlJyB8ICdzb2xhbmEnXHJcbiAgYWRkcmVzczogdGV4dCgnYWRkcmVzcycpLm5vdE51bGwoKSxcclxuICBpc1ZlcmlmaWVkOiBib29sZWFuKCdpc192ZXJpZmllZCcpLm5vdE51bGwoKS5kZWZhdWx0KGZhbHNlKSxcclxuICBpc1ByaW1hcnk6IGJvb2xlYW4oJ2lzX3ByaW1hcnknKS5ub3ROdWxsKCkuZGVmYXVsdChmYWxzZSksXHJcbiAgbGFiZWw6IHRleHQoJ2xhYmVsJyksXHJcbiAgYWRkZWRBdDogdGltZXN0YW1wKCdhZGRlZF9hdCcsIHsgbW9kZTogJ2RhdGUnIH0pLm5vdE51bGwoKS5kZWZhdWx0Tm93KCksXHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IHR5cGUgSW5zZXJ0VXNlcldhbGxldCA9IHR5cGVvZiB1c2VyV2FsbGV0cy4kaW5mZXJJbnNlcnQ7XHJcbmV4cG9ydCB0eXBlIFNlbGVjdFVzZXJXYWxsZXQgPSB0eXBlb2YgdXNlcldhbGxldHMuJGluZmVyU2VsZWN0O1xyXG5cclxuZXhwb3J0IHR5cGUgSW5zZXJ0V2FsbGV0QWRkcmVzcyA9IHR5cGVvZiB3YWxsZXRBZGRyZXNzZXMuJGluZmVySW5zZXJ0O1xyXG5leHBvcnQgdHlwZSBTZWxlY3RXYWxsZXRBZGRyZXNzID0gdHlwZW9mIHdhbGxldEFkZHJlc3Nlcy4kaW5mZXJTZWxlY3Q7Il19