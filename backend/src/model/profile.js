import { pgTable, uuid, text, timestamp, json, integer, varchar, pgEnum, } from "drizzle-orm/pg-core";
import { authUsers } from "./auth";
import { relations, sql } from "drizzle-orm";
import { userWallets } from "./wallet";
export const userProfiles = pgTable("user_profiles", {
    id: uuid("id").primaryKey().defaultRandom(),
    authUserId: uuid("auth_user_id")
        .notNull()
        .references(() => authUsers.id, { onDelete: "cascade" }),
    firstName: text("first_name"),
    lastName: text("last_name"),
    displayName: text("display_name").notNull(),
    bio: text("bio"),
    avatarUrl: text("avatar_url"),
    dateOfBirth: timestamp("date_of_birth", { mode: "date" }),
    country: text("country"),
    timezone: text("timezone"),
    language: text("language").notNull(),
    preferences: json("preferences").notNull(), // here
    // preferences format
    createdAt: timestamp("created_at", { mode: "date" }).notNull().defaultNow(),
    updatedAt: timestamp("updated_at", { mode: "date" }).notNull().defaultNow(),
});
// --- Wallet type enum (admin asked: "Solana or Phantom")
export const walletTypeEnum = pgEnum("wallet_type_enum", ["solana", "phantom"]);
// --- CREATOR PROFILE ---
export const creatorProfile = pgTable("creator_profile", {
    id: uuid("id").primaryKey().defaultRandom(),
    userId: uuid("user_id")
        .notNull()
        .unique()
        .references(() => authUsers.id, { onDelete: "cascade" }),
    fullName: text("full_name").notNull(),
    creatorName: text("creator_name").notNull(),
    phoneNumber: text("phone_number"),
    bio: text("bio"),
    genres: text("genres")
        .array()
        .notNull()
        .default(sql `'{}'::text[]`),
    walletType: walletTypeEnum("wallet_type"), // 'solana' | 'phantom' (nullable until chosen)
    walletAddress: text("wallet_address"), // nullable until provided
    walletBalance: integer("wallet_balance").notNull().default(0),
    pinHash: text("pin_hash"),
    createdAt: timestamp("created_at", { mode: "date" }).notNull().defaultNow(),
    updatedAt: timestamp("updated_at", { mode: "date" }).notNull().defaultNow(),
});
// --- READER PROFILE ---
export const readerProfile = pgTable("reader_profile", {
    id: uuid("id").primaryKey().defaultRandom(),
    userId: uuid("user_id")
        .notNull()
        .unique()
        .references(() => authUsers.id, { onDelete: "cascade" }),
    genres: text("genres")
        .array()
        .notNull()
        .default(sql `'{}'::text[]`),
    // 12-char app wallet ID (generated by backend logic)
    walletId: varchar("wallet_id", { length: 12 }).notNull().unique(),
    walletBalance: integer("wallet_balance").notNull().default(0),
    pinHash: text("pin_hash"),
    createdAt: timestamp("created_at", { mode: "date" }).notNull().defaultNow(),
    updatedAt: timestamp("updated_at", { mode: "date" }).notNull().defaultNow(),
});
export const userProfilesRelations = relations(userProfiles, ({ one }) => ({
    wallet: one(userWallets, {
        fields: [userProfiles.id],
        references: [userWallets.userProfileId],
    }),
    authUser: one(authUsers, {
        fields: [userProfiles.authUserId],
        references: [authUsers.id],
    }),
}));
//# sourceMappingURL=data:application/json;base64,