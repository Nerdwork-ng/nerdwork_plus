import { pgTable, uuid, text, timestamp, json } from 'drizzle-orm/pg-core';
import { userWallets } from './wallet';
export const payments = pgTable('payments', {
    id: uuid('id').primaryKey().defaultRandom(),
    userWalletId: uuid('user_wallet_id')
        .notNull()
        .references(() => userWallets.id, { onDelete: 'cascade' }),
    // should payment method type be set in the database
    //   paymentMethodId: uuid('payment_method_id').references(() => paymentMethods.id),
    amount: text('amount').notNull(),
    currency: text('currency').notNull(),
    nwtAmount: text('nwt_amount'),
    exchangeRate: text('exchange_rate'),
    webhookId: text('webhook_id'), // Helio webhook ID
    paymentIntentId: text('payment_intent_id'),
    blockchainTxHash: text('blockchain_tx_hash'),
    status: text('status').notNull(), // 'pending', 'processing', etc.
    failureReason: text('failure_reason'),
    metadata: json('metadata').notNull(),
    processedAt: timestamp('processed_at', { mode: 'date' }),
    createdAt: timestamp('created_at', { mode: 'date' }).notNull().defaultNow(),
    updatedAt: timestamp('updated_at', { mode: 'date' }).notNull().defaultNow(),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBheW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLE9BQU8sRUFDUCxJQUFJLEVBQ0osSUFBSSxFQUNKLFNBQVMsRUFHVCxJQUFJLEVBQ0wsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXZDLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFO0lBQzFDLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsYUFBYSxFQUFFO0lBQzNDLFlBQVksRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUM7U0FDakMsT0FBTyxFQUFFO1NBQ1QsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLENBQUM7SUFFMUQsb0RBQW9EO0lBQ3BELG9GQUFvRjtJQUN0RixNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRTtJQUNoQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sRUFBRTtJQUNwQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixZQUFZLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUNuQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLG1CQUFtQjtJQUNsRCxlQUFlLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDO0lBQzFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztJQUM1QyxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLGdDQUFnQztJQUNsRSxhQUFhLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQ3JDLFFBQVEsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxFQUFFO0lBQ3BDLFdBQVcsRUFBRSxTQUFTLENBQUMsY0FBYyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0lBQ3hELFNBQVMsRUFBRSxTQUFTLENBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFO0lBQzNFLFNBQVMsRUFBRSxTQUFTLENBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFO0NBQzVFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgcGdUYWJsZSxcclxuICB1dWlkLFxyXG4gIHRleHQsXHJcbiAgdGltZXN0YW1wLFxyXG4gIGJvb2xlYW4sXHJcbiAgaW50ZWdlcixcclxuICBqc29uXHJcbn0gZnJvbSAnZHJpenpsZS1vcm0vcGctY29yZSc7XHJcbmltcG9ydCB7IHVzZXJXYWxsZXRzIH0gZnJvbSAnLi93YWxsZXQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHBheW1lbnRzID0gcGdUYWJsZSgncGF5bWVudHMnLCB7XHJcbiAgaWQ6IHV1aWQoJ2lkJykucHJpbWFyeUtleSgpLmRlZmF1bHRSYW5kb20oKSxcclxuICB1c2VyV2FsbGV0SWQ6IHV1aWQoJ3VzZXJfd2FsbGV0X2lkJylcclxuICAgIC5ub3ROdWxsKClcclxuICAgIC5yZWZlcmVuY2VzKCgpID0+IHVzZXJXYWxsZXRzLmlkLCB7IG9uRGVsZXRlOiAnY2FzY2FkZScgfSksXHJcblxyXG4gICAgLy8gc2hvdWxkIHBheW1lbnQgbWV0aG9kIHR5cGUgYmUgc2V0IGluIHRoZSBkYXRhYmFzZVxyXG4gICAgLy8gICBwYXltZW50TWV0aG9kSWQ6IHV1aWQoJ3BheW1lbnRfbWV0aG9kX2lkJykucmVmZXJlbmNlcygoKSA9PiBwYXltZW50TWV0aG9kcy5pZCksXHJcbiAgYW1vdW50OiB0ZXh0KCdhbW91bnQnKS5ub3ROdWxsKCksXHJcbiAgY3VycmVuY3k6IHRleHQoJ2N1cnJlbmN5Jykubm90TnVsbCgpLFxyXG4gIG53dEFtb3VudDogdGV4dCgnbnd0X2Ftb3VudCcpLFxyXG4gIGV4Y2hhbmdlUmF0ZTogdGV4dCgnZXhjaGFuZ2VfcmF0ZScpLFxyXG4gIHdlYmhvb2tJZDogdGV4dCgnd2ViaG9va19pZCcpLCAvLyBIZWxpbyB3ZWJob29rIElEXHJcbiAgcGF5bWVudEludGVudElkOiB0ZXh0KCdwYXltZW50X2ludGVudF9pZCcpLFxyXG4gIGJsb2NrY2hhaW5UeEhhc2g6IHRleHQoJ2Jsb2NrY2hhaW5fdHhfaGFzaCcpLFxyXG4gIHN0YXR1czogdGV4dCgnc3RhdHVzJykubm90TnVsbCgpLCAvLyAncGVuZGluZycsICdwcm9jZXNzaW5nJywgZXRjLlxyXG4gIGZhaWx1cmVSZWFzb246IHRleHQoJ2ZhaWx1cmVfcmVhc29uJyksXHJcbiAgbWV0YWRhdGE6IGpzb24oJ21ldGFkYXRhJykubm90TnVsbCgpLFxyXG4gIHByb2Nlc3NlZEF0OiB0aW1lc3RhbXAoJ3Byb2Nlc3NlZF9hdCcsIHsgbW9kZTogJ2RhdGUnIH0pLFxyXG4gIGNyZWF0ZWRBdDogdGltZXN0YW1wKCdjcmVhdGVkX2F0JywgeyBtb2RlOiAnZGF0ZScgfSkubm90TnVsbCgpLmRlZmF1bHROb3coKSxcclxuICB1cGRhdGVkQXQ6IHRpbWVzdGFtcCgndXBkYXRlZF9hdCcsIHsgbW9kZTogJ2RhdGUnIH0pLm5vdE51bGwoKS5kZWZhdWx0Tm93KCksXHJcbn0pO1xyXG5cclxuXHJcbmV4cG9ydCB0eXBlIEluc2VydFBheW1lbnQgPSB0eXBlb2YgcGF5bWVudHMuJGluZmVySW5zZXJ0O1xyXG5leHBvcnQgdHlwZSBTZWxlY3RQYXltZW50ID0gdHlwZW9mIHBheW1lbnRzLiRpbmZlclNlbGVjdDsiXX0=