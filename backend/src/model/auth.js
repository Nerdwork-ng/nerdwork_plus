import { boolean, pgTable, text, timestamp, uuid, integer, } from "drizzle-orm/pg-core";
// ================================
// USERS TABLE (AuthUser)
// ================================
export const authUsers = pgTable("auth_users", {
    id: uuid("id").primaryKey().defaultRandom(), // UUID
    email: text("email").notNull().unique(),
    username: text("username").notNull().unique(),
    passwordHash: text("password_hash").notNull(),
    emailVerified: boolean("email_verified").notNull().default(false),
    twoFactorEnabled: boolean("two_factor_enabled").notNull().default(false),
    lastLoginAt: timestamp("last_login_at", { mode: "date" }),
    loginAttempts: integer("login_attempts").notNull().default(0),
    lockedUntil: timestamp("locked_until", { mode: "date" }),
    isActive: boolean("is_active").notNull().default(true),
    createdAt: timestamp("created_at", { mode: "date" }).notNull().defaultNow(),
    updatedAt: timestamp("updated_at", { mode: "date" }).notNull().defaultNow(),
});
// ================================
// SESSIONS TABLE (AuthSession)
// ================================
export const authSessions = pgTable("auth_sessions", {
    id: uuid("id").primaryKey().defaultRandom(),
    userId: uuid("user_id")
        .notNull()
        .references(() => authUsers.id, { onDelete: "cascade" }),
    sessionToken: text("session_token").notNull().unique(),
    refreshToken: text("refresh_token").notNull().unique(),
    ipAddress: text("ip_address").notNull(),
    userAgent: text("user_agent").notNull(),
    expiresAt: timestamp("expires_at", { mode: "date" }).notNull(),
    createdAt: timestamp("created_at", { mode: "date" }).notNull().defaultNow(),
});
// ================================
// PASSWORD RESETS TABLE (PasswordReset)
// ================================
export const passwordResets = pgTable("password_resets", {
    id: uuid("id").primaryKey().defaultRandom(),
    userId: uuid("user_id")
        .notNull()
        .references(() => authUsers.id, { onDelete: "cascade" }),
    token: text("token").notNull().unique(),
    expiresAt: timestamp("expires_at", { mode: "date" }).notNull(),
    used: boolean("used").notNull().default(false),
    createdAt: timestamp("created_at", { mode: "date" }).notNull().defaultNow(),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLE9BQU8sRUFDUCxPQUFPLEVBQ1AsSUFBSSxFQUNKLFNBQVMsRUFDVCxJQUFJLEVBQ0osT0FBTyxHQUNSLE1BQU0scUJBQXFCLENBQUM7QUFFN0IsbUNBQW1DO0FBQ25DLHlCQUF5QjtBQUN6QixtQ0FBbUM7QUFFbkMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQUU7SUFDN0MsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxhQUFhLEVBQUUsRUFBRSxPQUFPO0lBQ3BELEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFO0lBQ3ZDLFFBQVEsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFO0lBQzdDLFlBQVksRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsT0FBTyxFQUFFO0lBQzdDLGFBQWEsRUFBRSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQ2pFLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFDeEUsV0FBVyxFQUFFLFNBQVMsQ0FBQyxlQUFlLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7SUFDekQsYUFBYSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDN0QsV0FBVyxFQUFFLFNBQVMsQ0FBQyxjQUFjLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7SUFDeEQsUUFBUSxFQUFFLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQ3RELFNBQVMsRUFBRSxTQUFTLENBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFO0lBQzNFLFNBQVMsRUFBRSxTQUFTLENBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFO0NBQzVFLENBQUMsQ0FBQztBQUVILG1DQUFtQztBQUNuQywrQkFBK0I7QUFDL0IsbUNBQW1DO0FBRW5DLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsZUFBZSxFQUFFO0lBQ25ELEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsYUFBYSxFQUFFO0lBQzNDLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO1NBQ3BCLE9BQU8sRUFBRTtTQUNULFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxDQUFDO0lBQzFELFlBQVksRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFO0lBQ3RELFlBQVksRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFO0lBQ3RELFNBQVMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxFQUFFO0lBQ3ZDLFNBQVMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxFQUFFO0lBQ3ZDLFNBQVMsRUFBRSxTQUFTLENBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFO0lBQzlELFNBQVMsRUFBRSxTQUFTLENBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFO0NBQzVFLENBQUMsQ0FBQztBQUVILG1DQUFtQztBQUNuQyx3Q0FBd0M7QUFDeEMsbUNBQW1DO0FBRW5DLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLEVBQUU7SUFDdkQsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxhQUFhLEVBQUU7SUFDM0MsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDcEIsT0FBTyxFQUFFO1NBQ1QsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLENBQUM7SUFDMUQsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLEVBQUU7SUFDdkMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUU7SUFDOUQsSUFBSSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQzlDLFNBQVMsRUFBRSxTQUFTLENBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFO0NBQzVFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgYm9vbGVhbixcclxuICBwZ1RhYmxlLFxyXG4gIHRleHQsXHJcbiAgdGltZXN0YW1wLFxyXG4gIHV1aWQsXHJcbiAgaW50ZWdlcixcclxufSBmcm9tIFwiZHJpenpsZS1vcm0vcGctY29yZVwiO1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gVVNFUlMgVEFCTEUgKEF1dGhVc2VyKVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuZXhwb3J0IGNvbnN0IGF1dGhVc2VycyA9IHBnVGFibGUoXCJhdXRoX3VzZXJzXCIsIHtcclxuICBpZDogdXVpZChcImlkXCIpLnByaW1hcnlLZXkoKS5kZWZhdWx0UmFuZG9tKCksIC8vIFVVSURcclxuICBlbWFpbDogdGV4dChcImVtYWlsXCIpLm5vdE51bGwoKS51bmlxdWUoKSxcclxuICB1c2VybmFtZTogdGV4dChcInVzZXJuYW1lXCIpLm5vdE51bGwoKS51bmlxdWUoKSxcclxuICBwYXNzd29yZEhhc2g6IHRleHQoXCJwYXNzd29yZF9oYXNoXCIpLm5vdE51bGwoKSxcclxuICBlbWFpbFZlcmlmaWVkOiBib29sZWFuKFwiZW1haWxfdmVyaWZpZWRcIikubm90TnVsbCgpLmRlZmF1bHQoZmFsc2UpLFxyXG4gIHR3b0ZhY3RvckVuYWJsZWQ6IGJvb2xlYW4oXCJ0d29fZmFjdG9yX2VuYWJsZWRcIikubm90TnVsbCgpLmRlZmF1bHQoZmFsc2UpLFxyXG4gIGxhc3RMb2dpbkF0OiB0aW1lc3RhbXAoXCJsYXN0X2xvZ2luX2F0XCIsIHsgbW9kZTogXCJkYXRlXCIgfSksXHJcbiAgbG9naW5BdHRlbXB0czogaW50ZWdlcihcImxvZ2luX2F0dGVtcHRzXCIpLm5vdE51bGwoKS5kZWZhdWx0KDApLFxyXG4gIGxvY2tlZFVudGlsOiB0aW1lc3RhbXAoXCJsb2NrZWRfdW50aWxcIiwgeyBtb2RlOiBcImRhdGVcIiB9KSxcclxuICBpc0FjdGl2ZTogYm9vbGVhbihcImlzX2FjdGl2ZVwiKS5ub3ROdWxsKCkuZGVmYXVsdCh0cnVlKSxcclxuICBjcmVhdGVkQXQ6IHRpbWVzdGFtcChcImNyZWF0ZWRfYXRcIiwgeyBtb2RlOiBcImRhdGVcIiB9KS5ub3ROdWxsKCkuZGVmYXVsdE5vdygpLFxyXG4gIHVwZGF0ZWRBdDogdGltZXN0YW1wKFwidXBkYXRlZF9hdFwiLCB7IG1vZGU6IFwiZGF0ZVwiIH0pLm5vdE51bGwoKS5kZWZhdWx0Tm93KCksXHJcbn0pO1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gU0VTU0lPTlMgVEFCTEUgKEF1dGhTZXNzaW9uKVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuZXhwb3J0IGNvbnN0IGF1dGhTZXNzaW9ucyA9IHBnVGFibGUoXCJhdXRoX3Nlc3Npb25zXCIsIHtcclxuICBpZDogdXVpZChcImlkXCIpLnByaW1hcnlLZXkoKS5kZWZhdWx0UmFuZG9tKCksXHJcbiAgdXNlcklkOiB1dWlkKFwidXNlcl9pZFwiKVxyXG4gICAgLm5vdE51bGwoKVxyXG4gICAgLnJlZmVyZW5jZXMoKCkgPT4gYXV0aFVzZXJzLmlkLCB7IG9uRGVsZXRlOiBcImNhc2NhZGVcIiB9KSxcclxuICBzZXNzaW9uVG9rZW46IHRleHQoXCJzZXNzaW9uX3Rva2VuXCIpLm5vdE51bGwoKS51bmlxdWUoKSxcclxuICByZWZyZXNoVG9rZW46IHRleHQoXCJyZWZyZXNoX3Rva2VuXCIpLm5vdE51bGwoKS51bmlxdWUoKSxcclxuICBpcEFkZHJlc3M6IHRleHQoXCJpcF9hZGRyZXNzXCIpLm5vdE51bGwoKSxcclxuICB1c2VyQWdlbnQ6IHRleHQoXCJ1c2VyX2FnZW50XCIpLm5vdE51bGwoKSxcclxuICBleHBpcmVzQXQ6IHRpbWVzdGFtcChcImV4cGlyZXNfYXRcIiwgeyBtb2RlOiBcImRhdGVcIiB9KS5ub3ROdWxsKCksXHJcbiAgY3JlYXRlZEF0OiB0aW1lc3RhbXAoXCJjcmVhdGVkX2F0XCIsIHsgbW9kZTogXCJkYXRlXCIgfSkubm90TnVsbCgpLmRlZmF1bHROb3coKSxcclxufSk7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBQQVNTV09SRCBSRVNFVFMgVEFCTEUgKFBhc3N3b3JkUmVzZXQpXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5leHBvcnQgY29uc3QgcGFzc3dvcmRSZXNldHMgPSBwZ1RhYmxlKFwicGFzc3dvcmRfcmVzZXRzXCIsIHtcclxuICBpZDogdXVpZChcImlkXCIpLnByaW1hcnlLZXkoKS5kZWZhdWx0UmFuZG9tKCksXHJcbiAgdXNlcklkOiB1dWlkKFwidXNlcl9pZFwiKVxyXG4gICAgLm5vdE51bGwoKVxyXG4gICAgLnJlZmVyZW5jZXMoKCkgPT4gYXV0aFVzZXJzLmlkLCB7IG9uRGVsZXRlOiBcImNhc2NhZGVcIiB9KSxcclxuICB0b2tlbjogdGV4dChcInRva2VuXCIpLm5vdE51bGwoKS51bmlxdWUoKSxcclxuICBleHBpcmVzQXQ6IHRpbWVzdGFtcChcImV4cGlyZXNfYXRcIiwgeyBtb2RlOiBcImRhdGVcIiB9KS5ub3ROdWxsKCksXHJcbiAgdXNlZDogYm9vbGVhbihcInVzZWRcIikubm90TnVsbCgpLmRlZmF1bHQoZmFsc2UpLFxyXG4gIGNyZWF0ZWRBdDogdGltZXN0YW1wKFwiY3JlYXRlZF9hdFwiLCB7IG1vZGU6IFwiZGF0ZVwiIH0pLm5vdE51bGwoKS5kZWZhdWx0Tm93KCksXHJcbn0pO1xyXG5cclxuZXhwb3J0IHR5cGUgSW5zZXJ0QXV0aFVzZXIgPSB0eXBlb2YgYXV0aFVzZXJzLiRpbmZlckluc2VydDtcclxuZXhwb3J0IHR5cGUgU2VsZWN0QXV0aFVzZXIgPSB0eXBlb2YgYXV0aFVzZXJzLiRpbmZlclNlbGVjdDtcclxuXHJcbmV4cG9ydCB0eXBlIEluc2VydEF1dGhTZXNzaW9uID0gdHlwZW9mIGF1dGhTZXNzaW9ucy4kaW5mZXJJbnNlcnQ7XHJcbmV4cG9ydCB0eXBlIFNlbGVjdEF1dGhTZXNzaW9uID0gdHlwZW9mIGF1dGhTZXNzaW9ucy4kaW5mZXJTZWxlY3Q7XHJcblxyXG5leHBvcnQgdHlwZSBJbnNlcnRQYXNzd29yZFJlc2V0ID0gdHlwZW9mIHBhc3N3b3JkUmVzZXRzLiRpbmZlckluc2VydDtcclxuZXhwb3J0IHR5cGUgU2VsZWN0UGFzc3dvcmRSZXNldCA9IHR5cGVvZiBwYXNzd29yZFJlc2V0cy4kaW5mZXJTZWxlY3Q7XHJcbiJdfQ==