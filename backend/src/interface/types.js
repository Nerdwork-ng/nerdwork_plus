// Comic Book Reader App - Database Models (TypeScript Interfaces)
// Separated Authentication, User Accounts, and Financial Systems
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"AAAA,kEAAkE;AAClE,iEAAiE","sourcesContent":["// Comic Book Reader App - Database Models (TypeScript Interfaces)\r\n// Separated Authentication, User Accounts, and Financial Systems\r\n\r\n// ================================\r\n// AUTHENTICATION & IDENTITY\r\n// ================================\r\n\r\n\r\ntype AuthUser = {\r\n  id: string; // UUID\r\n  email: string;\r\n  username: string;\r\n  password_hash: string;\r\n  email_verified: boolean;\r\n  two_factor_enabled: boolean;\r\n  last_login_at?: Date;\r\n  login_attempts: number;\r\n  locked_until?: Date;\r\n  is_active: boolean;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n}\r\n\r\ninterface AuthSession {\r\n  id: string;\r\n  user_id: string; // Foreign key to AuthUser\r\n  session_token: string;\r\n  refresh_token: string;\r\n  ip_address: string;\r\n  user_agent: string;\r\n  expires_at: Date;\r\n  created_at: Date;\r\n}\r\n\r\ninterface PasswordReset {\r\n  id: string;\r\n  user_id: string;\r\n  token: string;\r\n  expires_at: Date;\r\n  used: boolean;\r\n  created_at: Date;\r\n}\r\n\r\n// ================================\r\n// USER PROFILES & ACCOUNTS\r\n// ================================\r\n\r\ninterface UserProfile {\r\n  id: string;\r\n  auth_user_id: string; // Foreign key to AuthUser\r\n  first_name?: string;\r\n  last_name?: string;\r\n  display_name: string;\r\n  bio?: string;\r\n  avatar_url?: string;\r\n  date_of_birth?: Date;\r\n  country?: string;\r\n  timezone?: string;\r\n  language: string;\r\n  preferences: UserPreferences;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n}\r\n\r\ninterface UserPreferences {\r\n  theme: 'light' | 'dark' | 'auto';\r\n  reading_direction: 'ltr' | 'rtl';\r\n  page_transition: 'slide' | 'fade' | 'none';\r\n  auto_bookmark: boolean;\r\n  notifications: NotificationSettings;\r\n  privacy: PrivacySettings;\r\n}\r\n\r\ninterface NotificationSettings {\r\n  email_notifications: boolean;\r\n  push_notifications: boolean;\r\n  new_comics: boolean;\r\n  creator_updates: boolean;\r\n  payment_alerts: boolean;\r\n  marketing: boolean;\r\n}\r\n\r\ninterface PrivacySettings {\r\n  profile_visibility: 'public' | 'friends' | 'private';\r\n  reading_history_visible: boolean;\r\n  allow_friend_requests: boolean;\r\n}\r\n\r\n// ================================\r\n// FINANCIAL ACCOUNTS & WALLETS\r\n// ================================\r\n\r\ninterface UserWallet {\r\n  id: string;\r\n  user_profile_id: string; // Foreign key to UserProfile\r\n  nwt_balance: string; // Decimal as string for precision\r\n  nwt_locked_balance: string; // For pending transactions\r\n  primary_wallet_address?: string; // Web3 wallet\r\n  wallet_addresses: WalletAddress[];\r\n  kyc_status: 'none' | 'pending' | 'verified' | 'rejected';\r\n  kyc_level: number; // 0, 1, 2, 3 for different verification levels\r\n  spending_limit_daily?: string;\r\n  spending_limit_monthly?: string;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n}\r\n\r\ninterface WalletAddress {\r\n  id: string;\r\n  user_wallet_id: string;\r\n  blockchain: 'ethereum' | 'polygon' | 'binance' | 'solana';\r\n  address: string;\r\n  is_verified: boolean;\r\n  is_primary: boolean;\r\n  label?: string;\r\n  added_at: Date;\r\n}\r\n\r\ninterface NWTTransaction {\r\n  id: string;\r\n  user_wallet_id: string;\r\n  transaction_type: 'credit' | 'debit';\r\n  category: 'purchase' | 'sale' | 'deposit' | 'withdrawal' | 'reward' | 'refund' | 'transfer' | 'fee';\r\n  amount: string; // Decimal as string\r\n  balance_before: string;\r\n  balance_after: string;\r\n  reference_id?: string; // Links to comic purchase, creator payout, etc.\r\n  reference_type?: string;\r\n  description: string;\r\n  metadata?: Record<string, any>;\r\n  blockchain_tx_hash?: string;\r\n  status: 'pending' | 'completed' | 'failed' | 'cancelled' | 'reversed';\r\n  processed_at?: Date;\r\n  created_at: Date;\r\n}\r\n\r\ninterface PaymentMethod {\r\n  id: string;\r\n  user_wallet_id: string;\r\n  type: 'card' | 'bank_account' | 'crypto_wallet' | 'paypal' | 'apple_pay' | 'google_pay';\r\n  provider: string; // 'stripe', 'paypal', 'metamask', etc.\r\n  provider_id: string; // External provider's ID\r\n  is_verified: boolean;\r\n  is_default: boolean;\r\n  metadata: Record<string, any>; // Provider-specific data\r\n  last_used_at?: Date;\r\n  expires_at?: Date;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n}\r\n\r\ninterface Payment {\r\n  id: string;\r\n  user_wallet_id: string;\r\n  payment_method_id?: string;\r\n  amount: string;\r\n  currency: string; // USD, EUR, ETH, BTC, etc.\r\n  nwt_amount?: string; // If purchasing NWT\r\n  exchange_rate?: string;\r\n  payment_intent_id?: string; // Stripe/provider ID\r\n  blockchain_tx_hash?: string;\r\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled' | 'refunded';\r\n  failure_reason?: string;\r\n  metadata: Record<string, any>;\r\n  processed_at?: Date;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n}\r\n\r\n// ================================\r\n// CREATOR ACCOUNTS & EARNINGS\r\n// ================================\r\n\r\ninterface CreatorProfile {\r\n  id: string;\r\n  user_profile_id: string; // Foreign key to UserProfile\r\n  creator_name: string;\r\n  bio?: string;\r\n  website_url?: string;\r\n  social_links: SocialLinks;\r\n  verification_status: 'none' | 'pending' | 'verified' | 'rejected';\r\n  verification_documents?: string[]; // URLs to verification docs\r\n  tax_info?: TaxInformation;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n}\r\n\r\ninterface SocialLinks {\r\n  twitter?: string;\r\n  instagram?: string;\r\n  tiktok?: string;\r\n  youtube?: string;\r\n  discord?: string;\r\n  website?: string;\r\n}\r\n\r\ninterface TaxInformation {\r\n  tax_id?: string;\r\n  business_name?: string;\r\n  business_type?: string;\r\n  address: Address;\r\n  w9_submitted: boolean;\r\n}\r\n\r\ninterface Address {\r\n  street: string;\r\n  city: string;\r\n  state: string;\r\n  postal_code: string;\r\n  country: string;\r\n}\r\n\r\ninterface CreatorWallet {\r\n  id: string;\r\n  creator_profile_id: string;\r\n  nwt_balance: string;\r\n  nwt_pending_balance: string; // Earnings not yet paid out\r\n  total_lifetime_earnings: string;\r\n  commission_rate: string; // Default 0.7 (70%)\r\n  minimum_payout_threshold: string;\r\n  payout_schedule: 'weekly' | 'monthly' | 'on_demand';\r\n  payout_method: PayoutMethod;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n}\r\n\r\ninterface PayoutMethod {\r\n  type: 'bank_transfer' | 'paypal' | 'crypto_wallet';\r\n  details: Record<string, any>; // Bank details, PayPal email, wallet address\r\n  is_verified: boolean;\r\n}\r\n\r\ninterface CreatorEarning {\r\n  id: string;\r\n  creator_wallet_id: string;\r\n  source_id: string; // Comic ID, NFT ID, etc.\r\n  source_type: 'comic_purchase' | 'nft_sale' | 'nft_royalty' | 'subscription' | 'tip' | 'bonus';\r\n  gross_amount: string;\r\n  platform_fee: string;\r\n  creator_fee: string; // What creator gets after platform fee\r\n  net_amount: string; // Final amount after all deductions\r\n  commission_rate: string; // Rate used for this transaction\r\n  payment_id?: string; // Reference to original payment\r\n  buyer_user_id: string;\r\n  payout_status: 'pending' | 'available' | 'paid' | 'held' | 'disputed';\r\n  payout_batch_id?: string;\r\n  earned_at: Date;\r\n  paid_out_at?: Date;\r\n  created_at: Date;\r\n}\r\n\r\ninterface CreatorPayout {\r\n  id: string;\r\n  creator_wallet_id: string;\r\n  batch_id: string; // For grouping multiple earnings\r\n  total_amount: string;\r\n  payout_method: PayoutMethod;\r\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';\r\n  transaction_id?: string; // Bank/PayPal/Crypto transaction ID\r\n  failure_reason?: string;\r\n  earnings_included: string[]; // Array of CreatorEarning IDs\r\n  processed_at?: Date;\r\n  created_at: Date;\r\n}\r\n\r\n// ================================\r\n// COMIC CONTENT MANAGEMENT\r\n// ================================\r\n\r\ninterface ComicSeries {\r\n  id: string;\r\n  creator_profile_id: string;\r\n  title: string;\r\n  description?: string;\r\n  genres: string[];\r\n  tags: string[];\r\n  cover_image_url?: string;\r\n  banner_image_url?: string;\r\n  status: 'draft' | 'ongoing' | 'completed' | 'hiatus' | 'cancelled';\r\n  age_rating: 'G' | 'PG' | 'PG-13' | 'R' | '18+';\r\n  content_warnings: string[];\r\n  is_published: boolean;\r\n  publication_schedule?: string; // \"Weekly\", \"Monthly\", etc.\r\n  next_issue_date?: Date;\r\n  total_issues?: number;\r\n  metadata: SeriesMetadata;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n}\r\n\r\ninterface SeriesMetadata {\r\n  language: string;\r\n  reading_direction: 'ltr' | 'rtl' | 'ttb';\r\n  color_type: 'color' | 'grayscale' | 'black_white';\r\n  art_style: string[];\r\n  target_audience: string[];\r\n}\r\n\r\ninterface Comic {\r\n  id: string;\r\n  series_id: string;\r\n  issue_number: number;\r\n  title: string;\r\n  description?: string;\r\n  cover_image_url?: string;\r\n  page_count: number;\r\n  file_size_mb?: number;\r\n  pricing: ComicPricing;\r\n  content_hash?: string; // For integrity verification\r\n  is_published: boolean;\r\n  publication_date?: Date;\r\n  early_access_date?: Date; // For premium subscribers\r\n  metadata: ComicMetadata;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n}\r\n\r\ninterface ComicPricing {\r\n  is_free: boolean;\r\n  price_nwt?: string;\r\n  price_usd?: string; // Reference price\r\n  early_access_price_nwt?: string;\r\n  rental_price_nwt?: string;\r\n  rental_duration_hours?: number;\r\n}\r\n\r\ninterface ComicMetadata {\r\n  estimated_reading_time: number; // minutes\r\n  difficulty_level?: string;\r\n  contains_text: boolean;\r\n  language: string;\r\n  file_format: 'cbz' | 'cbr' | 'pdf' | 'web';\r\n}\r\n\r\ninterface ComicPage {\r\n  id: string;\r\n  comic_id: string;\r\n  page_number: number;\r\n  image_url: string;\r\n  thumbnail_url?: string;\r\n  image_hash: string;\r\n  width: number;\r\n  height: number;\r\n  file_size_bytes: number;\r\n  alt_text?: string; // For accessibility\r\n  created_at: Date;\r\n}\r\n\r\n// ================================\r\n// NFT & BLOCKCHAIN INTEGRATION\r\n// ================================\r\n\r\ninterface ComicNFT {\r\n  id: string;\r\n  comic_id: string;\r\n  creator_profile_id: string;\r\n  token_standard: 'ERC-721' | 'ERC-1155' | 'SPL';\r\n  contract_address: string;\r\n  token_id: string;\r\n  blockchain: 'ethereum' | 'polygon' | 'solana' | 'binance';\r\n  metadata_uri: string; // IPFS or Arweave URL\r\n  royalty_percentage: string; // Creator royalty on secondary sales\r\n  max_supply?: number; // For ERC-1155\r\n  current_supply: number;\r\n  mint_config: NFTMintConfig;\r\n  is_minted: boolean;\r\n  mint_transaction_hash?: string;\r\n  minted_at?: Date;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n}\r\n\r\ninterface NFTMintConfig {\r\n  mint_price_eth?: string;\r\n  mint_price_nwt?: string;\r\n  whitelist_enabled: boolean;\r\n  public_mint_enabled: boolean;\r\n  max_per_wallet?: number;\r\n  mint_start_date?: Date;\r\n  mint_end_date?: Date;\r\n}\r\n\r\ninterface NFTOwnership {\r\n  id: string;\r\n  comic_nft_id: string;\r\n  owner_wallet_address: string;\r\n  owner_user_id?: string; // If owner is a platform user\r\n  quantity: number; // For ERC-1155\r\n  acquired_at: Date;\r\n  acquisition_type: 'mint' | 'purchase' | 'transfer' | 'airdrop';\r\n  acquisition_transaction_hash: string;\r\n  last_verified_at: Date;\r\n}\r\n\r\ninterface NFTTransaction {\r\n  id: string;\r\n  comic_nft_id: string;\r\n  transaction_type: 'mint' | 'transfer' | 'sale' | 'burn';\r\n  from_address?: string;\r\n  to_address: string;\r\n  quantity: number;\r\n  price_eth?: string;\r\n  price_usd?: string;\r\n  transaction_hash: string;\r\n  block_number: number;\r\n  gas_used?: string;\r\n  gas_price?: string;\r\n  marketplace?: string; // OpenSea, Rarible, etc.\r\n  created_at: Date;\r\n}\r\n\r\n// ================================\r\n// USER INTERACTIONS & PURCHASES\r\n// ================================\r\n\r\ninterface UserComicAccess {\r\n  id: string;\r\n  user_profile_id: string;\r\n  comic_id: string;\r\n  access_type: 'purchase' | 'rental' | 'nft_ownership' | 'subscription' | 'free' | 'gift';\r\n  purchase_transaction_id?: string;\r\n  nft_ownership_id?: string;\r\n  granted_at: Date;\r\n  expires_at?: Date; // For rentals or subscriptions\r\n  access_level: 'full' | 'preview'; // Full comic or preview pages only\r\n  download_allowed: boolean;\r\n  offline_access: boolean;\r\n  created_at: Date;\r\n}\r\n\r\ninterface UserReadingProgress {\r\n  id: string;\r\n  user_profile_id: string;\r\n  comic_id: string;\r\n  current_page: number;\r\n  total_pages: number;\r\n  completion_percentage: number;\r\n  reading_time_minutes: number;\r\n  last_read_at: Date;\r\n  is_completed: boolean;\r\n  is_bookmarked: boolean;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n}\r\n\r\ninterface ReadingSession {\r\n  id: string;\r\n  user_profile_id: string;\r\n  comic_id: string;\r\n  session_start: Date;\r\n  session_end?: Date;\r\n  pages_read: number;\r\n  time_spent_seconds: number;\r\n  device_type: 'mobile' | 'tablet' | 'desktop';\r\n  reading_mode: 'single_page' | 'double_page' | 'continuous_scroll';\r\n}\r\n\r\n// ================================\r\n// REVIEWS & SOCIAL FEATURES\r\n// ================================\r\n\r\ninterface ComicReview {\r\n  id: string;\r\n  user_profile_id: string;\r\n  comic_id: string;\r\n  rating: number; // 1-5\r\n  title?: string;\r\n  review_text?: string;\r\n  is_verified_purchase: boolean;\r\n  helpful_count: number;\r\n  report_count: number;\r\n  status: 'active' | 'hidden' | 'reported' | 'deleted';\r\n  created_at: Date;\r\n  updated_at: Date;\r\n}\r\n\r\ninterface ReviewHelpful {\r\n  id: string;\r\n  review_id: string;\r\n  user_profile_id: string;\r\n  is_helpful: boolean;\r\n  created_at: Date;\r\n}\r\n\r\ninterface UserFollowing {\r\n  id: string;\r\n  follower_user_id: string;\r\n  following_user_id: string;\r\n  following_type: 'user' | 'creator' | 'series';\r\n  notification_enabled: boolean;\r\n  created_at: Date;\r\n}\r\n\r\ninterface UserLibrary {\r\n  id: string;\r\n  user_profile_id: string;\r\n  name: string; // \"Reading\", \"Completed\", \"Wishlist\", \"Custom Collection\"\r\n  description?: string;\r\n  is_public: boolean;\r\n  is_default: boolean;\r\n  sort_order: number;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n}\r\n\r\ninterface LibraryItem {\r\n  id: string;\r\n  user_library_id: string;\r\n  comic_id: string;\r\n  added_at: Date;\r\n  sort_order?: number;\r\n}\r\n\r\n// ================================\r\n// NOTIFICATIONS & MESSAGING\r\n// ================================\r\n\r\ninterface Notification {\r\n  id: string;\r\n  user_profile_id: string;\r\n  type: 'comic_release' | 'payment_received' | 'nft_minted' | 'review_posted' | 'creator_update' | 'system_alert';\r\n  title: string;\r\n  message: string;\r\n  action_url?: string;\r\n  data?: Record<string, any>;\r\n  is_read: boolean;\r\n  is_archived: boolean;\r\n  priority: 'low' | 'normal' | 'high' | 'urgent';\r\n  delivery_method: ('push' | 'email' | 'in_app')[];\r\n  scheduled_for?: Date;\r\n  sent_at?: Date;\r\n  created_at: Date;\r\n}\r\n\r\n// ================================\r\n// PLATFORM CONFIGURATION\r\n// ================================\r\n\r\ninterface PlatformConfig {\r\n  id: string;\r\n  key: string;\r\n  value: string;\r\n  value_type: 'string' | 'number' | 'boolean' | 'json';\r\n  description?: string;\r\n  is_public: boolean; // Can be exposed to frontend\r\n  environment: 'all' | 'development' | 'staging' | 'production';\r\n  updated_by: string; // Admin user ID\r\n  updated_at: Date;\r\n}\r\n\r\ninterface ExchangeRate {\r\n  id: string;\r\n  from_currency: string;\r\n  to_currency: string;\r\n  rate: string;\r\n  source: string; // API provider\r\n  confidence_score?: number;\r\n  created_at: Date;\r\n}\r\n\r\ninterface AuditLog {\r\n  id: string;\r\n  user_id?: string;\r\n  action: string;\r\n  resource_type: string;\r\n  resource_id: string;\r\n  old_values?: Record<string, any>;\r\n  new_values?: Record<string, any>;\r\n  ip_address: string;\r\n  user_agent: string;\r\n  created_at: Date;\r\n}\r\n\r\n// ================================\r\n// ANALYTICS & REPORTING\r\n// ================================\r\n\r\ninterface ComicAnalytics {\r\n  id: string;\r\n  comic_id: string;\r\n  date: Date;\r\n  views: number;\r\n  unique_viewers: number;\r\n  purchases: number;\r\n  revenue_nwt: string;\r\n  revenue_usd: string;\r\n  completion_rate: number;\r\n  average_rating: number;\r\n  download_count: number;\r\n  created_at: Date;\r\n}\r\n\r\ninterface CreatorAnalytics {\r\n  id: string;\r\n  creator_profile_id: string;\r\n  period_start: Date;\r\n  period_end: Date;\r\n  total_views: number;\r\n  total_purchases: number;\r\n  total_revenue_nwt: string;\r\n  total_revenue_usd: string;\r\n  new_followers: number;\r\n  top_performing_comic_id?: string;\r\n  engagement_rate: number;\r\n  created_at: Date;\r\n}\r\n\r\n// ================================\r\n// TYPE EXPORTS\r\n// ================================\r\n\r\nexport type {\r\n  // Auth & Identity\r\n  AuthUser,\r\n  AuthSession,\r\n  PasswordReset,\r\n  \r\n  // User Profiles\r\n  UserProfile,\r\n  UserPreferences,\r\n  NotificationSettings,\r\n  PrivacySettings,\r\n  \r\n  // Financial\r\n  UserWallet,\r\n  WalletAddress,\r\n  NWTTransaction,\r\n  PaymentMethod,\r\n  Payment,\r\n  \r\n  // Creator System\r\n  CreatorProfile,\r\n  SocialLinks,\r\n  TaxInformation,\r\n  Address,\r\n  CreatorWallet,\r\n  PayoutMethod,\r\n  CreatorEarning,\r\n  CreatorPayout,\r\n  \r\n  // Content\r\n  ComicSeries,\r\n  SeriesMetadata,\r\n  Comic,\r\n  ComicPricing,\r\n  ComicMetadata,\r\n  ComicPage,\r\n  \r\n  // NFT & Blockchain\r\n  ComicNFT,\r\n  NFTMintConfig,\r\n  NFTOwnership,\r\n  NFTTransaction,\r\n  \r\n  // User Interactions\r\n  UserComicAccess,\r\n  UserReadingProgress,\r\n  ReadingSession,\r\n  \r\n  // Social Features\r\n  ComicReview,\r\n  ReviewHelpful,\r\n  UserFollowing,\r\n  UserLibrary,\r\n  LibraryItem,\r\n  \r\n  // System\r\n  Notification,\r\n  PlatformConfig,\r\n  ExchangeRate,\r\n  AuditLog,\r\n  \r\n  // Analytics\r\n  ComicAnalytics,\r\n  CreatorAnalytics\r\n};"]}