import { eq, sql } from "drizzle-orm";
import { db } from "../config/db";
import { userWallets } from "../model/wallet";
export async function creditWallet(userId, amount) {
    const [wallet] = await db.select().from(userWallets).where(eq(userWallets.userProfileId, userId)).limit(1);
    if (!wallet) {
        throw new Error("Wallet not found");
    }
    await db
        .update(userWallets)
        .set({ nwtBalance: sql `${userWallets.nwtBalance} + ${amount}` })
        .where(eq(userWallets.userProfileId, userId));
    return { success: true, newBalance: wallet.nwtBalance + amount };
}
export async function debitWallet(userId, amount) {
    const [wallet] = await db.select().from(userWallets).where(eq(userWallets.userProfileId, userId)).limit(1);
    if (!wallet) {
        throw new Error("Wallet not found");
    }
    if (wallet.nwtBalance < amount) {
        throw new Error("Insufficient funds");
    }
    const newBalance = wallet.nwtBalance - amount;
    await db
        .update(userWallets)
        .set({ nwtBalance: newBalance })
        .where(eq(userWallets.userProfileId, userId));
    return { success: true, balance: newBalance };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3YWxsZXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN0QyxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUU5QyxNQUFNLENBQUMsS0FBSyxVQUFVLFlBQVksQ0FBQyxNQUFjLEVBQUUsTUFBYztJQUMvRCxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUczRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWixNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELE1BQU0sRUFBRTtTQUNMLE1BQU0sQ0FBQyxXQUFXLENBQUM7U0FDbkIsR0FBRyxDQUFDLEVBQUUsVUFBVSxFQUFFLEdBQUcsQ0FBQSxHQUFHLFdBQVcsQ0FBQyxVQUFVLE1BQU0sTUFBTSxFQUFFLEVBQUUsQ0FBQztTQUMvRCxLQUFLLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUVoRCxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVUsR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUNuRSxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxXQUFXLENBQUMsTUFBYyxFQUFFLE1BQWM7SUFDOUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFHM0csSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxVQUFVLEdBQUcsTUFBTSxFQUFFLENBQUM7UUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztJQUU5QyxNQUFNLEVBQUU7U0FDTCxNQUFNLENBQUMsV0FBVyxDQUFDO1NBQ25CLEdBQUcsQ0FBQyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsQ0FBQztTQUMvQixLQUFLLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUVoRCxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUM7QUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVxLCBzcWwgfSBmcm9tIFwiZHJpenpsZS1vcm1cIjtcclxuaW1wb3J0IHsgZGIgfSBmcm9tIFwiLi4vY29uZmlnL2RiXCI7XHJcbmltcG9ydCB7IHVzZXJXYWxsZXRzIH0gZnJvbSBcIi4uL21vZGVsL3dhbGxldFwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWRpdFdhbGxldCh1c2VySWQ6IHN0cmluZywgYW1vdW50OiBudW1iZXIpIHtcclxuICBjb25zdCBbd2FsbGV0XSA9IGF3YWl0IGRiLnNlbGVjdCgpLmZyb20odXNlcldhbGxldHMpLndoZXJlKGVxKHVzZXJXYWxsZXRzLnVzZXJQcm9maWxlSWQsIHVzZXJJZCkpLmxpbWl0KDEpO1xyXG4gIFxyXG5cclxuICBpZiAoIXdhbGxldCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiV2FsbGV0IG5vdCBmb3VuZFwiKTtcclxuICB9XHJcblxyXG4gIGF3YWl0IGRiXHJcbiAgICAudXBkYXRlKHVzZXJXYWxsZXRzKVxyXG4gICAgLnNldCh7IG53dEJhbGFuY2U6IHNxbGAke3VzZXJXYWxsZXRzLm53dEJhbGFuY2V9ICsgJHthbW91bnR9YCB9KVxyXG4gICAgLndoZXJlKGVxKHVzZXJXYWxsZXRzLnVzZXJQcm9maWxlSWQsIHVzZXJJZCkpO1xyXG5cclxuICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBuZXdCYWxhbmNlOiB3YWxsZXQubnd0QmFsYW5jZSArIGFtb3VudCB9O1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGViaXRXYWxsZXQodXNlcklkOiBzdHJpbmcsIGFtb3VudDogbnVtYmVyKSB7XHJcbiAgY29uc3QgW3dhbGxldF0gPSBhd2FpdCBkYi5zZWxlY3QoKS5mcm9tKHVzZXJXYWxsZXRzKS53aGVyZShlcSh1c2VyV2FsbGV0cy51c2VyUHJvZmlsZUlkLCB1c2VySWQpKS5saW1pdCgxKTtcclxuICAgXHJcblxyXG4gIGlmICghd2FsbGV0KSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJXYWxsZXQgbm90IGZvdW5kXCIpO1xyXG4gIH1cclxuXHJcbiAgaWYgKHdhbGxldC5ud3RCYWxhbmNlIDwgYW1vdW50KSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnN1ZmZpY2llbnQgZnVuZHNcIik7XHJcbiAgfVxyXG5cclxuICBjb25zdCBuZXdCYWxhbmNlID0gd2FsbGV0Lm53dEJhbGFuY2UgLSBhbW91bnQ7XHJcblxyXG4gIGF3YWl0IGRiXHJcbiAgICAudXBkYXRlKHVzZXJXYWxsZXRzKVxyXG4gICAgLnNldCh7IG53dEJhbGFuY2U6IG5ld0JhbGFuY2UgfSlcclxuICAgIC53aGVyZShlcSh1c2VyV2FsbGV0cy51c2VyUHJvZmlsZUlkLCB1c2VySWQpKTtcclxuXHJcbiAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgYmFsYW5jZTogbmV3QmFsYW5jZSB9O1xyXG59XHJcbiJdfQ==