import { S3Client, PutObjectCommand } from "@aws-sdk/client-s3";
import { v4 as uuidv4 } from "uuid";
class AWSS3Service {
    s3;
    bucketName;
    cloudFrontDomain;
    constructor() {
        this.s3 = new S3Client({
            region: process.env.AWS_REGION || "eu-west-1",
            credentials: {
                accessKeyId: process.env.AWS_ACCESS_KEY_ID || "",
                secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY || "",
            },
        });
        console.log("region", process.env.AWS_REGION);
        this.bucketName = process.env.S3_BUCKET_NAME || "";
        this.cloudFrontDomain = process.env.CLOUDFRONT_DOMAIN;
        console.log("bucketName", this.bucketName);
    }
    async uploadFile(file, folder = "uploads") {
        const fileKey = `${folder}/${uuidv4()}-${file.originalname}`;
        await this.s3.send(new PutObjectCommand({
            Bucket: this.bucketName,
            Key: fileKey,
            Body: file.buffer,
            ContentType: file.mimetype,
        }));
        return this.cloudFrontDomain
            ? `https://${this.cloudFrontDomain}/${fileKey}`
            : `https://${this.bucketName}.s3.amazonaws.com/${fileKey}`;
    }
}
export default new AWSS3Service();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN3LXMzLXNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhc3ctczMtc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDaEUsT0FBTyxFQUFFLEVBQUUsSUFBSSxNQUFNLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFcEMsTUFBTSxZQUFZO0lBQ1IsRUFBRSxDQUFXO0lBQ2IsVUFBVSxDQUFTO0lBQ25CLGdCQUFnQixDQUFVO0lBRWxDO1FBQ0UsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLFFBQVEsQ0FBQztZQUNyQixNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksV0FBVztZQUM3QyxXQUFXLEVBQUU7Z0JBQ1gsV0FBVyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLElBQUksRUFBRTtnQkFDaEQsZUFBZSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLElBQUksRUFBRTthQUN6RDtTQUNGLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFOUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsSUFBSSxFQUFFLENBQUM7UUFDbkQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUM7UUFDdEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLElBQXlCLEVBQUUsTUFBTSxHQUFHLFNBQVM7UUFDNUQsTUFBTSxPQUFPLEdBQUcsR0FBRyxNQUFNLElBQUksTUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRTdELE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQ2hCLElBQUksZ0JBQWdCLENBQUM7WUFDbkIsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQ3ZCLEdBQUcsRUFBRSxPQUFPO1lBQ1osSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ2pCLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUTtTQUMzQixDQUFDLENBQ0gsQ0FBQztRQUVGLE9BQU8sSUFBSSxDQUFDLGdCQUFnQjtZQUMxQixDQUFDLENBQUMsV0FBVyxJQUFJLENBQUMsZ0JBQWdCLElBQUksT0FBTyxFQUFFO1lBQy9DLENBQUMsQ0FBQyxXQUFXLElBQUksQ0FBQyxVQUFVLHFCQUFxQixPQUFPLEVBQUUsQ0FBQztJQUMvRCxDQUFDO0NBQ0Y7QUFFRCxlQUFlLElBQUksWUFBWSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTM0NsaWVudCwgUHV0T2JqZWN0Q29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtczNcIjtcclxuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSBcInV1aWRcIjtcclxuXHJcbmNsYXNzIEFXU1MzU2VydmljZSB7XHJcbiAgcHJpdmF0ZSBzMzogUzNDbGllbnQ7XHJcbiAgcHJpdmF0ZSBidWNrZXROYW1lOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBjbG91ZEZyb250RG9tYWluPzogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuczMgPSBuZXcgUzNDbGllbnQoe1xyXG4gICAgICByZWdpb246IHByb2Nlc3MuZW52LkFXU19SRUdJT04gfHwgXCJldS13ZXN0LTFcIixcclxuICAgICAgY3JlZGVudGlhbHM6IHtcclxuICAgICAgICBhY2Nlc3NLZXlJZDogcHJvY2Vzcy5lbnYuQVdTX0FDQ0VTU19LRVlfSUQgfHwgXCJcIixcclxuICAgICAgICBzZWNyZXRBY2Nlc3NLZXk6IHByb2Nlc3MuZW52LkFXU19TRUNSRVRfQUNDRVNTX0tFWSB8fCBcIlwiLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICBjb25zb2xlLmxvZyhcInJlZ2lvblwiLCBwcm9jZXNzLmVudi5BV1NfUkVHSU9OKTtcclxuXHJcbiAgICB0aGlzLmJ1Y2tldE5hbWUgPSBwcm9jZXNzLmVudi5TM19CVUNLRVRfTkFNRSB8fCBcIlwiO1xyXG4gICAgdGhpcy5jbG91ZEZyb250RG9tYWluID0gcHJvY2Vzcy5lbnYuQ0xPVURGUk9OVF9ET01BSU47XHJcbiAgICBjb25zb2xlLmxvZyhcImJ1Y2tldE5hbWVcIiwgdGhpcy5idWNrZXROYW1lKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHVwbG9hZEZpbGUoZmlsZTogRXhwcmVzcy5NdWx0ZXIuRmlsZSwgZm9sZGVyID0gXCJ1cGxvYWRzXCIpIHtcclxuICAgIGNvbnN0IGZpbGVLZXkgPSBgJHtmb2xkZXJ9LyR7dXVpZHY0KCl9LSR7ZmlsZS5vcmlnaW5hbG5hbWV9YDtcclxuXHJcbiAgICBhd2FpdCB0aGlzLnMzLnNlbmQoXHJcbiAgICAgIG5ldyBQdXRPYmplY3RDb21tYW5kKHtcclxuICAgICAgICBCdWNrZXQ6IHRoaXMuYnVja2V0TmFtZSxcclxuICAgICAgICBLZXk6IGZpbGVLZXksXHJcbiAgICAgICAgQm9keTogZmlsZS5idWZmZXIsXHJcbiAgICAgICAgQ29udGVudFR5cGU6IGZpbGUubWltZXR5cGUsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiB0aGlzLmNsb3VkRnJvbnREb21haW5cclxuICAgICAgPyBgaHR0cHM6Ly8ke3RoaXMuY2xvdWRGcm9udERvbWFpbn0vJHtmaWxlS2V5fWBcclxuICAgICAgOiBgaHR0cHM6Ly8ke3RoaXMuYnVja2V0TmFtZX0uczMuYW1hem9uYXdzLmNvbS8ke2ZpbGVLZXl9YDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBBV1NTM1NlcnZpY2UoKTtcclxuIl19