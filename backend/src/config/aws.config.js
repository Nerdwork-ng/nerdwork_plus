import dotenv from "dotenv";
dotenv.config({ path: ".env.local" });
// AWS S3 Configuration
export const AWS_CONFIG = {
    region: process.env.AWS_REGION || "us-east-1",
    credentials: {
        accessKeyId: process.env.AWS_ACCESS_KEY_ID,
        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
    },
};
export const S3_CONFIG = {
    bucketName: process.env.S3_BUCKET_NAME || "nerdwork-comics",
    region: process.env.AWS_REGION || "us-east-1",
};
// CloudFront Configuration
export const CLOUDFRONT_CONFIG = {
    domain: process.env.CLOUDFRONT_DOMAIN || "dgumbu3t6hn53.cloudfront.net",
    distributionId: process.env.CLOUDFRONT_DISTRIBUTION_ID,
    url: process.env.CLOUDFRONT_DOMAIN
        ? `https://${process.env.CLOUDFRONT_DOMAIN}`
        : "https://dgumbu3t6hn53.cloudfront.net",
};
// File Upload Configuration
export const FILE_CONFIG = {
    maxFileSize: parseInt(process.env.MAX_FILE_SIZE || "104857600"), // 100MB default
    maxFilesPerUpload: parseInt(process.env.MAX_FILES_PER_UPLOAD || "20"), // 20 files default
    allowedFileTypes: [
        "image/jpeg",
        "image/png",
        "image/gif",
        "image/webp",
        "image/svg+xml",
        "application/pdf",
        "application/zip",
        "application/x-zip-compressed",
        "application/x-rar-compressed",
        "application/vnd.comicbook+zip",
        "application/vnd.comicbook-rar",
    ],
};
// Validate required environment variables
const requiredEnvVars = [
    "AWS_ACCESS_KEY_ID",
    "AWS_SECRET_ACCESS_KEY",
];
export const validateAWSConfig = () => {
    const missing = requiredEnvVars.filter(key => !process.env[key]);
    if (missing.length > 0) {
        throw new Error(`Missing required AWS environment variables: ${missing.join(", ")}\n` +
            "Please ensure these are set in your .env.local file:\n" +
            "- AWS_ACCESS_KEY_ID\n" +
            "- AWS_SECRET_ACCESS_KEY\n" +
            "- AWS_REGION (optional, defaults to us-east-1)\n" +
            "- S3_BUCKET_NAME (optional, defaults to nerdwork-comics)\n" +
            "- CLOUDFRONT_DOMAIN (optional, defaults to dgumbu3t6hn53.cloudfront.net)\n" +
            "- CLOUDFRONT_DISTRIBUTION_ID (optional, for cache invalidation)");
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzLmNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF3cy5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBRTVCLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztBQUV0Qyx1QkFBdUI7QUFDdkIsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHO0lBQ3hCLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxXQUFXO0lBQzdDLFdBQVcsRUFBRTtRQUNYLFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFrQjtRQUMzQyxlQUFlLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBc0I7S0FDcEQ7Q0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHO0lBQ3ZCLFVBQVUsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsSUFBSSxpQkFBaUI7SUFDM0QsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLFdBQVc7Q0FDOUMsQ0FBQztBQUVGLDJCQUEyQjtBQUMzQixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRztJQUMvQixNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSw4QkFBOEI7SUFDdkUsY0FBYyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCO0lBQ3RELEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQjtRQUNoQyxDQUFDLENBQUMsV0FBVyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFO1FBQzVDLENBQUMsQ0FBQyxzQ0FBc0M7Q0FDM0MsQ0FBQztBQUVGLDRCQUE0QjtBQUM1QixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUc7SUFDekIsV0FBVyxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsSUFBSSxXQUFXLENBQUMsRUFBRSxnQkFBZ0I7SUFDakYsaUJBQWlCLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLElBQUksSUFBSSxDQUFDLEVBQUUsbUJBQW1CO0lBQzFGLGdCQUFnQixFQUFFO1FBQ2hCLFlBQVk7UUFDWixXQUFXO1FBQ1gsV0FBVztRQUNYLFlBQVk7UUFDWixlQUFlO1FBQ2YsaUJBQWlCO1FBQ2pCLGlCQUFpQjtRQUNqQiw4QkFBOEI7UUFDOUIsOEJBQThCO1FBQzlCLCtCQUErQjtRQUMvQiwrQkFBK0I7S0FDaEM7Q0FDRixDQUFDO0FBRUYsMENBQTBDO0FBQzFDLE1BQU0sZUFBZSxHQUFHO0lBQ3RCLG1CQUFtQjtJQUNuQix1QkFBdUI7Q0FDeEIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEdBQUcsRUFBRTtJQUNwQyxNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFakUsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQ2IsK0NBQStDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7WUFDckUsd0RBQXdEO1lBQ3hELHVCQUF1QjtZQUN2QiwyQkFBMkI7WUFDM0Isa0RBQWtEO1lBQ2xELDREQUE0RDtZQUM1RCw0RUFBNEU7WUFDNUUsaUVBQWlFLENBQ2xFLENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRvdGVudiBmcm9tIFwiZG90ZW52XCI7XHJcblxyXG5kb3RlbnYuY29uZmlnKHsgcGF0aDogXCIuZW52LmxvY2FsXCIgfSk7XHJcblxyXG4vLyBBV1MgUzMgQ29uZmlndXJhdGlvblxyXG5leHBvcnQgY29uc3QgQVdTX0NPTkZJRyA9IHtcclxuICByZWdpb246IHByb2Nlc3MuZW52LkFXU19SRUdJT04gfHwgXCJ1cy1lYXN0LTFcIixcclxuICBjcmVkZW50aWFsczoge1xyXG4gICAgYWNjZXNzS2V5SWQ6IHByb2Nlc3MuZW52LkFXU19BQ0NFU1NfS0VZX0lEISxcclxuICAgIHNlY3JldEFjY2Vzc0tleTogcHJvY2Vzcy5lbnYuQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZISxcclxuICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IFMzX0NPTkZJRyA9IHtcclxuICBidWNrZXROYW1lOiBwcm9jZXNzLmVudi5TM19CVUNLRVRfTkFNRSB8fCBcIm5lcmR3b3JrLWNvbWljc1wiLFxyXG4gIHJlZ2lvbjogcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTiB8fCBcInVzLWVhc3QtMVwiLFxyXG59O1xyXG5cclxuLy8gQ2xvdWRGcm9udCBDb25maWd1cmF0aW9uXHJcbmV4cG9ydCBjb25zdCBDTE9VREZST05UX0NPTkZJRyA9IHtcclxuICBkb21haW46IHByb2Nlc3MuZW52LkNMT1VERlJPTlRfRE9NQUlOIHx8IFwiZGd1bWJ1M3Q2aG41My5jbG91ZGZyb250Lm5ldFwiLFxyXG4gIGRpc3RyaWJ1dGlvbklkOiBwcm9jZXNzLmVudi5DTE9VREZST05UX0RJU1RSSUJVVElPTl9JRCxcclxuICB1cmw6IHByb2Nlc3MuZW52LkNMT1VERlJPTlRfRE9NQUlOIFxyXG4gICAgPyBgaHR0cHM6Ly8ke3Byb2Nlc3MuZW52LkNMT1VERlJPTlRfRE9NQUlOfWAgXHJcbiAgICA6IFwiaHR0cHM6Ly9kZ3VtYnUzdDZobjUzLmNsb3VkZnJvbnQubmV0XCIsXHJcbn07XHJcblxyXG4vLyBGaWxlIFVwbG9hZCBDb25maWd1cmF0aW9uXHJcbmV4cG9ydCBjb25zdCBGSUxFX0NPTkZJRyA9IHtcclxuICBtYXhGaWxlU2l6ZTogcGFyc2VJbnQocHJvY2Vzcy5lbnYuTUFYX0ZJTEVfU0laRSB8fCBcIjEwNDg1NzYwMFwiKSwgLy8gMTAwTUIgZGVmYXVsdFxyXG4gIG1heEZpbGVzUGVyVXBsb2FkOiBwYXJzZUludChwcm9jZXNzLmVudi5NQVhfRklMRVNfUEVSX1VQTE9BRCB8fCBcIjIwXCIpLCAvLyAyMCBmaWxlcyBkZWZhdWx0XHJcbiAgYWxsb3dlZEZpbGVUeXBlczogW1xyXG4gICAgXCJpbWFnZS9qcGVnXCIsIFxyXG4gICAgXCJpbWFnZS9wbmdcIiwgXHJcbiAgICBcImltYWdlL2dpZlwiLCBcclxuICAgIFwiaW1hZ2Uvd2VicFwiLFxyXG4gICAgXCJpbWFnZS9zdmcreG1sXCIsXHJcbiAgICBcImFwcGxpY2F0aW9uL3BkZlwiLFxyXG4gICAgXCJhcHBsaWNhdGlvbi96aXBcIixcclxuICAgIFwiYXBwbGljYXRpb24veC16aXAtY29tcHJlc3NlZFwiLFxyXG4gICAgXCJhcHBsaWNhdGlvbi94LXJhci1jb21wcmVzc2VkXCIsXHJcbiAgICBcImFwcGxpY2F0aW9uL3ZuZC5jb21pY2Jvb2sremlwXCIsXHJcbiAgICBcImFwcGxpY2F0aW9uL3ZuZC5jb21pY2Jvb2stcmFyXCIsXHJcbiAgXSxcclxufTtcclxuXHJcbi8vIFZhbGlkYXRlIHJlcXVpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlc1xyXG5jb25zdCByZXF1aXJlZEVudlZhcnMgPSBbXHJcbiAgXCJBV1NfQUNDRVNTX0tFWV9JRFwiLFxyXG4gIFwiQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZXCIsXHJcbl07XHJcblxyXG5leHBvcnQgY29uc3QgdmFsaWRhdGVBV1NDb25maWcgPSAoKSA9PiB7XHJcbiAgY29uc3QgbWlzc2luZyA9IHJlcXVpcmVkRW52VmFycy5maWx0ZXIoa2V5ID0+ICFwcm9jZXNzLmVudltrZXldKTtcclxuICBcclxuICBpZiAobWlzc2luZy5sZW5ndGggPiAwKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgIGBNaXNzaW5nIHJlcXVpcmVkIEFXUyBlbnZpcm9ubWVudCB2YXJpYWJsZXM6ICR7bWlzc2luZy5qb2luKFwiLCBcIil9XFxuYCArXHJcbiAgICAgIFwiUGxlYXNlIGVuc3VyZSB0aGVzZSBhcmUgc2V0IGluIHlvdXIgLmVudi5sb2NhbCBmaWxlOlxcblwiICtcclxuICAgICAgXCItIEFXU19BQ0NFU1NfS0VZX0lEXFxuXCIgK1xyXG4gICAgICBcIi0gQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZXFxuXCIgK1xyXG4gICAgICBcIi0gQVdTX1JFR0lPTiAob3B0aW9uYWwsIGRlZmF1bHRzIHRvIHVzLWVhc3QtMSlcXG5cIiArXHJcbiAgICAgIFwiLSBTM19CVUNLRVRfTkFNRSAob3B0aW9uYWwsIGRlZmF1bHRzIHRvIG5lcmR3b3JrLWNvbWljcylcXG5cIiArXHJcbiAgICAgIFwiLSBDTE9VREZST05UX0RPTUFJTiAob3B0aW9uYWwsIGRlZmF1bHRzIHRvIGRndW1idTN0NmhuNTMuY2xvdWRmcm9udC5uZXQpXFxuXCIgK1xyXG4gICAgICBcIi0gQ0xPVURGUk9OVF9ESVNUUklCVVRJT05fSUQgKG9wdGlvbmFsLCBmb3IgY2FjaGUgaW52YWxpZGF0aW9uKVwiXHJcbiAgICApO1xyXG4gIH1cclxufTsiXX0=