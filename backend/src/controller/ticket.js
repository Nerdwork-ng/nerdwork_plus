import { db } from "../config/db";
import { tickets, events } from "../model/schema"; // adjust path if needed
import { eq } from "drizzle-orm";
export const purchaseTicket = async (req, res) => {
    const { eventId, paymentMethod, amount } = req.body;
    const userId = req.userId;
    if (!eventId || !paymentMethod || !amount) {
        return res.status(400).json({ message: "Missing required fields" });
    }
    // Check if event exists
    const event = await db
        .select()
        .from(events)
        .where(eq(events.id, eventId))
        .limit(1);
    if (event.length === 0) {
        return res.status(404).json({ message: "Event not found" });
    }
    // Validate payment
    if (paymentMethod === "nwt") {
        // Here you would call your Wallet service; placeholder logic:
        console.log(`[Wallet] Deducting ${amount} NWT for user ${userId}`);
    }
    else if (paymentMethod === "fiat") {
        // Here you would verify fiat payment; placeholder logic:
        console.log(`[Payment] Verifying fiat payment for user ${userId}`);
    }
    else {
        return res.status(400).json({ message: "Invalid payment method" });
    }
    // Insert ticket
    const [ticket] = await db
        .insert(tickets)
        .values({
        eventId,
        userId,
        paymentMethod,
        amount,
    })
        .returning({ id: tickets.id });
    return res.status(201).json({ ticketId: ticket.id });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGlja2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDbEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQyxDQUFDLHdCQUF3QjtBQUUzRSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWpDLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxLQUFLLEVBQUUsR0FBZ0IsRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUN0RSxNQUFNLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO0lBQ3BELE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFFMUIsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLGFBQWEsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzFDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCx3QkFBd0I7SUFDeEIsTUFBTSxLQUFLLEdBQUcsTUFBTSxFQUFFO1NBQ25CLE1BQU0sRUFBRTtTQUNSLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDWixLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDN0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1osSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFRCxtQkFBbUI7SUFDbkIsSUFBSSxhQUFhLEtBQUssS0FBSyxFQUFFLENBQUM7UUFDNUIsOERBQThEO1FBQzlELE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLE1BQU0saUJBQWlCLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDckUsQ0FBQztTQUFNLElBQUksYUFBYSxLQUFLLE1BQU0sRUFBRSxDQUFDO1FBQ3BDLHlEQUF5RDtRQUN6RCxPQUFPLENBQUMsR0FBRyxDQUFDLDZDQUE2QyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7U0FBTSxDQUFDO1FBQ04sT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxFQUFFO1NBQ3RCLE1BQU0sQ0FBQyxPQUFPLENBQUM7U0FDZixNQUFNLENBQUM7UUFDTixPQUFPO1FBQ1AsTUFBTTtRQUNOLGFBQWE7UUFDYixNQUFNO0tBQ1AsQ0FBQztTQUNELFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVqQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSBcImV4cHJlc3NcIjtcclxuaW1wb3J0IHsgZGIgfSBmcm9tIFwiLi4vY29uZmlnL2RiXCI7XHJcbmltcG9ydCB7IHRpY2tldHMsIGV2ZW50cyB9IGZyb20gXCIuLi9tb2RlbC9zY2hlbWFcIjsgLy8gYWRqdXN0IHBhdGggaWYgbmVlZGVkXHJcbmltcG9ydCB7IEF1dGhSZXF1ZXN0IH0gZnJvbSBcIi4uL21pZGRsZXdhcmUvY29tbW9uL2F1dGhcIjtcclxuaW1wb3J0IHsgZXEgfSBmcm9tIFwiZHJpenpsZS1vcm1cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBwdXJjaGFzZVRpY2tldCA9IGFzeW5jIChyZXE6IEF1dGhSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XHJcbiAgY29uc3QgeyBldmVudElkLCBwYXltZW50TWV0aG9kLCBhbW91bnQgfSA9IHJlcS5ib2R5O1xyXG4gIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VySWQ7XHJcblxyXG4gIGlmICghZXZlbnRJZCB8fCAhcGF5bWVudE1ldGhvZCB8fCAhYW1vdW50KSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiBcIk1pc3NpbmcgcmVxdWlyZWQgZmllbGRzXCIgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBDaGVjayBpZiBldmVudCBleGlzdHNcclxuICBjb25zdCBldmVudCA9IGF3YWl0IGRiXHJcbiAgICAuc2VsZWN0KClcclxuICAgIC5mcm9tKGV2ZW50cylcclxuICAgIC53aGVyZShlcShldmVudHMuaWQsIGV2ZW50SWQpKVxyXG4gICAgLmxpbWl0KDEpO1xyXG4gIGlmIChldmVudC5sZW5ndGggPT09IDApIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6IFwiRXZlbnQgbm90IGZvdW5kXCIgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBWYWxpZGF0ZSBwYXltZW50XHJcbiAgaWYgKHBheW1lbnRNZXRob2QgPT09IFwibnd0XCIpIHtcclxuICAgIC8vIEhlcmUgeW91IHdvdWxkIGNhbGwgeW91ciBXYWxsZXQgc2VydmljZTsgcGxhY2Vob2xkZXIgbG9naWM6XHJcbiAgICBjb25zb2xlLmxvZyhgW1dhbGxldF0gRGVkdWN0aW5nICR7YW1vdW50fSBOV1QgZm9yIHVzZXIgJHt1c2VySWR9YCk7XHJcbiAgfSBlbHNlIGlmIChwYXltZW50TWV0aG9kID09PSBcImZpYXRcIikge1xyXG4gICAgLy8gSGVyZSB5b3Ugd291bGQgdmVyaWZ5IGZpYXQgcGF5bWVudDsgcGxhY2Vob2xkZXIgbG9naWM6XHJcbiAgICBjb25zb2xlLmxvZyhgW1BheW1lbnRdIFZlcmlmeWluZyBmaWF0IHBheW1lbnQgZm9yIHVzZXIgJHt1c2VySWR9YCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6IFwiSW52YWxpZCBwYXltZW50IG1ldGhvZFwiIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gSW5zZXJ0IHRpY2tldFxyXG4gIGNvbnN0IFt0aWNrZXRdID0gYXdhaXQgZGJcclxuICAgIC5pbnNlcnQodGlja2V0cylcclxuICAgIC52YWx1ZXMoe1xyXG4gICAgICBldmVudElkLFxyXG4gICAgICB1c2VySWQsXHJcbiAgICAgIHBheW1lbnRNZXRob2QsXHJcbiAgICAgIGFtb3VudCxcclxuICAgIH0pXHJcbiAgICAucmV0dXJuaW5nKHsgaWQ6IHRpY2tldHMuaWQgfSk7XHJcblxyXG4gIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbih7IHRpY2tldElkOiB0aWNrZXQuaWQgfSk7XHJcbn07XHJcbiJdfQ==