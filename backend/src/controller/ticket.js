import { db } from "../config/db";
import { tickets, events } from "../model/schema"; // adjust path if needed
import { eq } from "drizzle-orm";
export const purchaseTicket = async (req, res) => {
    const { eventId, paymentMethod, amount } = req.body;
    const userId = req.userId;
    if (!eventId || !paymentMethod || !amount) {
        return res.status(400).json({ message: "Missing required fields" });
    }
    // Check if event exists
    const event = await db
        .select()
        .from(events)
        .where(eq(events.id, eventId))
        .limit(1);
    if (event.length === 0) {
        return res.status(404).json({ message: "Event not found" });
    }
    // Validate payment
    if (paymentMethod === "nwt") {
        // Here you would call your Wallet service; placeholder logic:
        console.log(`[Wallet] Deducting ${amount} NWT for user ${userId}`);
    }
    else if (paymentMethod === "fiat") {
        // Here you would verify fiat payment; placeholder logic:
        console.log(`[Payment] Verifying fiat payment for user ${userId}`);
    }
    else {
        return res.status(400).json({ message: "Invalid payment method" });
    }
    // Insert ticket
    const [ticket] = await db
        .insert(tickets)
        .values({
        eventId,
        userId,
        paymentMethod,
        amount,
    })
        .returning({ id: tickets.id });
    return res.status(201).json({ ticketId: ticket.id });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGlja2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDbEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQyxDQUFDLHdCQUF3QjtBQUUzRSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWpDLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxLQUFLLEVBQUUsR0FBUSxFQUFFLEdBQVEsRUFBRSxFQUFFO0lBQ3pELE1BQU0sRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7SUFDcEQsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztJQUUxQixJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsYUFBYSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDMUMsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELHdCQUF3QjtJQUN4QixNQUFNLEtBQUssR0FBRyxNQUFNLEVBQUU7U0FDbkIsTUFBTSxFQUFFO1NBQ1IsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNaLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM3QixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDWixJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDdkIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVELG1CQUFtQjtJQUNuQixJQUFJLGFBQWEsS0FBSyxLQUFLLEVBQUUsQ0FBQztRQUM1Qiw4REFBOEQ7UUFDOUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsTUFBTSxpQkFBaUIsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNyRSxDQUFDO1NBQU0sSUFBSSxhQUFhLEtBQUssTUFBTSxFQUFFLENBQUM7UUFDcEMseURBQXlEO1FBQ3pELE9BQU8sQ0FBQyxHQUFHLENBQUMsNkNBQTZDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDckUsQ0FBQztTQUFNLENBQUM7UUFDTixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLEVBQUU7U0FDdEIsTUFBTSxDQUFDLE9BQU8sQ0FBQztTQUNmLE1BQU0sQ0FBQztRQUNOLE9BQU87UUFDUCxNQUFNO1FBQ04sYUFBYTtRQUNiLE1BQU07S0FDUCxDQUFDO1NBQ0QsU0FBUyxDQUFDLEVBQUUsRUFBRSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRWpDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDdkQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tIFwiZXhwcmVzc1wiO1xyXG5pbXBvcnQgeyBkYiB9IGZyb20gXCIuLi9jb25maWcvZGJcIjtcclxuaW1wb3J0IHsgdGlja2V0cywgZXZlbnRzIH0gZnJvbSBcIi4uL21vZGVsL3NjaGVtYVwiOyAvLyBhZGp1c3QgcGF0aCBpZiBuZWVkZWRcclxuaW1wb3J0IHsgQXV0aFJlcXVlc3QgfSBmcm9tIFwiLi4vbWlkZGxld2FyZS9jb21tb24vYXV0aFwiO1xyXG5pbXBvcnQgeyBlcSB9IGZyb20gXCJkcml6emxlLW9ybVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHB1cmNoYXNlVGlja2V0ID0gYXN5bmMgKHJlcTogYW55LCByZXM6IGFueSkgPT4ge1xyXG4gIGNvbnN0IHsgZXZlbnRJZCwgcGF5bWVudE1ldGhvZCwgYW1vdW50IH0gPSByZXEuYm9keTtcclxuICBjb25zdCB1c2VySWQgPSByZXEudXNlcklkO1xyXG5cclxuICBpZiAoIWV2ZW50SWQgfHwgIXBheW1lbnRNZXRob2QgfHwgIWFtb3VudCkge1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogXCJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkc1wiIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgaWYgZXZlbnQgZXhpc3RzXHJcbiAgY29uc3QgZXZlbnQgPSBhd2FpdCBkYlxyXG4gICAgLnNlbGVjdCgpXHJcbiAgICAuZnJvbShldmVudHMpXHJcbiAgICAud2hlcmUoZXEoZXZlbnRzLmlkLCBldmVudElkKSlcclxuICAgIC5saW1pdCgxKTtcclxuICBpZiAoZXZlbnQubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBtZXNzYWdlOiBcIkV2ZW50IG5vdCBmb3VuZFwiIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gVmFsaWRhdGUgcGF5bWVudFxyXG4gIGlmIChwYXltZW50TWV0aG9kID09PSBcIm53dFwiKSB7XHJcbiAgICAvLyBIZXJlIHlvdSB3b3VsZCBjYWxsIHlvdXIgV2FsbGV0IHNlcnZpY2U7IHBsYWNlaG9sZGVyIGxvZ2ljOlxyXG4gICAgY29uc29sZS5sb2coYFtXYWxsZXRdIERlZHVjdGluZyAke2Ftb3VudH0gTldUIGZvciB1c2VyICR7dXNlcklkfWApO1xyXG4gIH0gZWxzZSBpZiAocGF5bWVudE1ldGhvZCA9PT0gXCJmaWF0XCIpIHtcclxuICAgIC8vIEhlcmUgeW91IHdvdWxkIHZlcmlmeSBmaWF0IHBheW1lbnQ7IHBsYWNlaG9sZGVyIGxvZ2ljOlxyXG4gICAgY29uc29sZS5sb2coYFtQYXltZW50XSBWZXJpZnlpbmcgZmlhdCBwYXltZW50IGZvciB1c2VyICR7dXNlcklkfWApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiBcIkludmFsaWQgcGF5bWVudCBtZXRob2RcIiB9KTtcclxuICB9XHJcblxyXG4gIC8vIEluc2VydCB0aWNrZXRcclxuICBjb25zdCBbdGlja2V0XSA9IGF3YWl0IGRiXHJcbiAgICAuaW5zZXJ0KHRpY2tldHMpXHJcbiAgICAudmFsdWVzKHtcclxuICAgICAgZXZlbnRJZCxcclxuICAgICAgdXNlcklkLFxyXG4gICAgICBwYXltZW50TWV0aG9kLFxyXG4gICAgICBhbW91bnQsXHJcbiAgICB9KVxyXG4gICAgLnJldHVybmluZyh7IGlkOiB0aWNrZXRzLmlkIH0pO1xyXG5cclxuICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24oeyB0aWNrZXRJZDogdGlja2V0LmlkIH0pO1xyXG59O1xyXG4iXX0=