import { globalErrorHandler, globalNotFoundHandler } from "./middleware/common";
import { app } from "./server";
import authRoutes from "./routes/auth.routes";
import paymentRoutes from "./routes/payment.routes";
import { authenticate } from "./middleware/common/auth";
import nftRoutes from "./routes/nft.routes";
import walletRoutes from "./routes/wallet.routes";
import profileRoutes from "./routes/profile.routes";
app.use("/auth", authRoutes);
app.use("/payment", authenticate, paymentRoutes);
app.use("/nft", authenticate, nftRoutes);
app.use("/wallet", authenticate, walletRoutes);
app.use("/profile", profileRoutes);
const PORT = 5000;
/**
 * @swagger
 * /users:
 *   get:
 *     summary: Get all users
 *     description: Retrieve a list of users
 *     responses:
 *       200:
 *         description: Successfully retrieved list
 */
app.get("/", (req, res) => {
    res.status(200).json({ data: `Hello, world! - ${PORT}` });
});
app.get("/health", (req, res) => {
    res.status(200).json({ status: "healthy", timestamp: new Date().toISOString() });
});
app.use(globalNotFoundHandler);
app.use(globalErrorHandler);
app.listen(PORT, () => {
    console.log(`Server running at http://localhost:${PORT}`);
    console.log(`Swagger docs available at http://localhost:${PORT}/api-docs`);
});
export { app };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVoRixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQy9CLE9BQU8sVUFBVSxNQUFNLHNCQUFzQixDQUFDO0FBQzlDLE9BQU8sYUFBYSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLFNBQVMsTUFBTSxxQkFBcUIsQ0FBQztBQUM1QyxPQUFPLFlBQVksTUFBTSx3QkFBd0IsQ0FBQztBQUNsRCxPQUFPLGFBQWEsTUFBTSx5QkFBeUIsQ0FBQztBQUVwRCxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUM3QixHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDakQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3pDLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQztBQUMvQyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUVuQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7QUFDbEI7Ozs7Ozs7OztHQVNHO0FBQ0gsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDM0MsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM1RCxDQUFDLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQ2pELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbkYsQ0FBQyxDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDL0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRTVCLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRTtJQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzFELE9BQU8sQ0FBQyxHQUFHLENBQUMsOENBQThDLElBQUksV0FBVyxDQUFDLENBQUM7QUFDN0UsQ0FBQyxDQUFDLENBQUM7QUFFSCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnbG9iYWxFcnJvckhhbmRsZXIsIGdsb2JhbE5vdEZvdW5kSGFuZGxlciB9IGZyb20gXCIuL21pZGRsZXdhcmUvY29tbW9uXCI7XHJcbmltcG9ydCB0eXBlIHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tIFwiZXhwcmVzc1wiO1xyXG5pbXBvcnQgeyBhcHAgfSBmcm9tIFwiLi9zZXJ2ZXJcIjtcclxuaW1wb3J0IGF1dGhSb3V0ZXMgZnJvbSBcIi4vcm91dGVzL2F1dGgucm91dGVzXCI7XHJcbmltcG9ydCBwYXltZW50Um91dGVzIGZyb20gXCIuL3JvdXRlcy9wYXltZW50LnJvdXRlc1wiO1xyXG5pbXBvcnQgeyBhdXRoZW50aWNhdGUgfSBmcm9tIFwiLi9taWRkbGV3YXJlL2NvbW1vbi9hdXRoXCI7XHJcbmltcG9ydCBuZnRSb3V0ZXMgZnJvbSBcIi4vcm91dGVzL25mdC5yb3V0ZXNcIjtcclxuaW1wb3J0IHdhbGxldFJvdXRlcyBmcm9tIFwiLi9yb3V0ZXMvd2FsbGV0LnJvdXRlc1wiO1xyXG5pbXBvcnQgcHJvZmlsZVJvdXRlcyBmcm9tIFwiLi9yb3V0ZXMvcHJvZmlsZS5yb3V0ZXNcIjtcclxuXHJcbmFwcC51c2UoXCIvYXV0aFwiLCBhdXRoUm91dGVzKTtcclxuYXBwLnVzZShcIi9wYXltZW50XCIsIGF1dGhlbnRpY2F0ZSwgcGF5bWVudFJvdXRlcyk7XHJcbmFwcC51c2UoXCIvbmZ0XCIsIGF1dGhlbnRpY2F0ZSwgbmZ0Um91dGVzKTtcclxuYXBwLnVzZShcIi93YWxsZXRcIiwgYXV0aGVudGljYXRlLCB3YWxsZXRSb3V0ZXMpO1xyXG5hcHAudXNlKFwiL3Byb2ZpbGVcIiwgcHJvZmlsZVJvdXRlcyk7XHJcblxyXG5jb25zdCBQT1JUID0gNTAwMDtcclxuLyoqXHJcbiAqIEBzd2FnZ2VyXHJcbiAqIC91c2VyczpcclxuICogICBnZXQ6XHJcbiAqICAgICBzdW1tYXJ5OiBHZXQgYWxsIHVzZXJzXHJcbiAqICAgICBkZXNjcmlwdGlvbjogUmV0cmlldmUgYSBsaXN0IG9mIHVzZXJzXHJcbiAqICAgICByZXNwb25zZXM6XHJcbiAqICAgICAgIDIwMDpcclxuICogICAgICAgICBkZXNjcmlwdGlvbjogU3VjY2Vzc2Z1bGx5IHJldHJpZXZlZCBsaXN0XHJcbiAqL1xyXG5hcHAuZ2V0KFwiL1wiLCAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XHJcbiAgcmVzLnN0YXR1cygyMDApLmpzb24oeyBkYXRhOiBgSGVsbG8sIHdvcmxkISAtICR7UE9SVH1gIH0pO1xyXG59KTtcclxuXHJcbmFwcC5nZXQoXCIvaGVhbHRoXCIsIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcclxuICByZXMuc3RhdHVzKDIwMCkuanNvbih7IHN0YXR1czogXCJoZWFsdGh5XCIsIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpIH0pO1xyXG59KTtcclxuXHJcbmFwcC51c2UoZ2xvYmFsTm90Rm91bmRIYW5kbGVyKTtcclxuYXBwLnVzZShnbG9iYWxFcnJvckhhbmRsZXIpO1xyXG5cclxuYXBwLmxpc3RlbihQT1JULCAoKSA9PiB7XHJcbiAgY29uc29sZS5sb2coYFNlcnZlciBydW5uaW5nIGF0IGh0dHA6Ly9sb2NhbGhvc3Q6JHtQT1JUfWApO1xyXG4gIGNvbnNvbGUubG9nKGBTd2FnZ2VyIGRvY3MgYXZhaWxhYmxlIGF0IGh0dHA6Ly9sb2NhbGhvc3Q6JHtQT1JUfS9hcGktZG9jc2ApO1xyXG59KTtcclxuXHJcbmV4cG9ydCB7IGFwcCB9O1xyXG4iXX0=