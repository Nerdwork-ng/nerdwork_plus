// __tests__/profile.test.ts
import request from "supertest";
import jwt from "jsonwebtoken";
import crypto from "crypto";
import { app } from "../src";
import { db as realDb } from "../src/config/db";
const db = realDb;
jest.mock("crypto");
jest.mock("../src/config/db", () => {
    const mockDb = {
        insert: jest.fn().mockReturnThis(),
        values: jest.fn().mockReturnThis(),
        returning: jest.fn().mockResolvedValue([]),
        select: jest.fn().mockReturnThis(),
        from: jest.fn().mockReturnThis(),
        where: jest.fn().mockResolvedValue([]),
    };
    return { db: mockDb };
});
jest.mock("jsonwebtoken", () => ({
    verify: jest.fn(),
}));
describe("Profile endpoints", () => {
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe("POST /profile/creator", () => {
        it("should create a creator profile", async () => {
            const fakeProfile = {
                id: 1,
                userId: "user123",
                fullName: "John Doe",
                creatorName: "JD Comics",
                phoneNumber: "1234567890",
                bio: "I make comics",
                genres: ["fantasy", "action"],
            };
            db.returning.mockResolvedValueOnce([fakeProfile]);
            const res = await request(app)
                .post("/profile/creator")
                .send({
                userId: "user123",
                fullName: "John Doe",
                creatorName: "JD Comics",
                phoneNumber: "1234567890",
                bio: "I make comics",
                genres: ["fantasy", "action"],
            });
            expect(res.status).toBe(200);
            expect(res.body.profile).toEqual(fakeProfile);
        });
        it("should return 400 if db insert fails", async () => {
            db.returning.mockRejectedValueOnce(new Error("DB error"));
            const res = await request(app)
                .post("/profile/creator")
                .send({
                userId: "user123",
                fullName: "John Doe",
                creatorName: "JD Comics",
                phoneNumber: "1234567890",
                bio: "I make comics",
                genres: ["fantasy", "action"],
            });
            expect(res.status).toBe(400);
            expect(res.body.message).toBe("Failed to create creator profile");
        });
    });
    describe("POST /profile/reader", () => {
        it("should create a reader profile with walletId + hashed pin", async () => {
            const fakeProfile = {
                id: 2,
                userId: "user456",
                genres: ["romance"],
                walletId: "wallet123",
                pinHash: "hashed-pin",
            };
            // Mock crypto
            jest.spyOn(crypto, "randomBytes").mockImplementation(() => {
                return Buffer.from("wallet123wallet123"); // 16 bytes
            });
            jest.spyOn(crypto, "createHash").mockReturnValue({
                update: jest.fn().mockReturnThis(),
                digest: jest.fn().mockReturnValue("hashed-pin"),
            });
            db.returning.mockResolvedValueOnce([fakeProfile]);
            const res = await request(app)
                .post("/profile/reader")
                .send({
                userId: "user456",
                genres: ["romance"],
                pin: "1234",
            });
            expect(res.status).toBe(200);
            expect(res.body.profile).toEqual(fakeProfile);
        });
        it("should return 400 if db insert fails", async () => {
            db.returning.mockRejectedValueOnce(new Error("DB error"));
            const res = await request(app)
                .post("/profile/reader")
                .send({
                userId: "user456",
                genres: ["romance"],
                pin: "1234",
            });
            expect(res.status).toBe(400);
            expect(res.body.message).toBe("Failed to create reader profile");
        });
    });
    describe("GET /profile", () => {
        it("should return creator profile when exists", async () => {
            const fakeCreator = { id: 1, userId: "u1", creatorName: "JD" };
            jwt.verify.mockReturnValue({ userId: "u1" });
            db.where.mockResolvedValueOnce([fakeCreator]); // first query returns creator
            const res = await request(app)
                .get("/profile")
                .set("Authorization", "Bearer validtoken");
            expect(res.status).toBe(200);
            expect(res.body).toEqual({ role: "creator", profile: fakeCreator });
        });
        it("should return reader profile when creator not found", async () => {
            const fakeReader = { id: 2, userId: "u2", genres: ["sci-fi"] };
            jwt.verify.mockReturnValue({ userId: "u2" });
            db.where
                .mockResolvedValueOnce([]) // no creator
                .mockResolvedValueOnce([fakeReader]); // reader found
            const res = await request(app)
                .get("/profile")
                .set("Authorization", "Bearer validtoken");
            expect(res.status).toBe(200);
            expect(res.body).toEqual({ role: "reader", profile: fakeReader });
        });
        it("should return 404 if no profile found", async () => {
            jwt.verify.mockReturnValue({ userId: "u3" });
            db.where
                .mockResolvedValueOnce([])
                .mockResolvedValueOnce([]);
            const res = await request(app)
                .get("/profile")
                .set("Authorization", "Bearer validtoken");
            expect(res.status).toBe(404);
            expect(res.body.message).toBe("Profile not found");
        });
        it("should return 401 if no token provided", async () => {
            const res = await request(app).get("/profile");
            expect(res.status).toBe(401);
        });
        it("should return 401 if token is invalid", async () => {
            jwt.verify.mockImplementation(() => {
                throw new Error("invalid");
            });
            const res = await request(app)
                .get("/profile")
                .set("Authorization", "Bearer badtoken");
            expect(res.status).toBe(401);
            expect(res.body.message).toBe("Invalid or expired token");
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZmlsZS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHJvZmlsZS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDRCQUE0QjtBQUM1QixPQUFPLE9BQU8sTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxHQUFHLE1BQU0sY0FBYyxDQUFDO0FBQy9CLE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQzdCLE9BQU8sRUFBRSxFQUFFLElBQUksTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFaEQsTUFBTSxFQUFFLEdBQUcsTUFTVixDQUFDO0FBRUYsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUVwQixJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtJQUNqQyxNQUFNLE1BQU0sR0FBRztRQUNiLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1FBQ2xDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1FBQ2xDLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDO1FBQzFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1FBQ2xDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1FBQ2hDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDO0tBQ3ZDLENBQUM7SUFDRixPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQ3hCLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FB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b3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vcHJvZmlsZS50ZXN0LnRzXHJcbmltcG9ydCByZXF1ZXN0IGZyb20gXCJzdXBlcnRlc3RcIjtcclxuaW1wb3J0IGp3dCBmcm9tIFwianNvbndlYnRva2VuXCI7XHJcbmltcG9ydCBjcnlwdG8gZnJvbSBcImNyeXB0b1wiO1xyXG5pbXBvcnQgeyBhcHAgfSBmcm9tIFwiLi4vc3JjXCI7XHJcbmltcG9ydCB7IGRiIGFzIHJlYWxEYiB9IGZyb20gXCIuLi9zcmMvY29uZmlnL2RiXCI7XHJcblxyXG5jb25zdCBkYiA9IHJlYWxEYiBhcyB1bmtub3duIGFzIHtcclxuICBpbnNlcnQ6IGplc3QuTW9jaztcclxuICB2YWx1ZXM6IGplc3QuTW9jaztcclxuICByZXR1cm5pbmc6IGplc3QuTW9jaztcclxuICBzZWxlY3Q6IGplc3QuTW9jaztcclxuICBmcm9tOiBqZXN0Lk1vY2s7XHJcbiAgd2hlcmU6IGplc3QuTW9jaztcclxuICBsaW1pdDogamVzdC5Nb2NrO1xyXG4gIGV4ZWN1dGU6IGplc3QuTW9jaztcclxufTtcclxuXHJcbmplc3QubW9jayhcImNyeXB0b1wiKTtcclxuXHJcbmplc3QubW9jayhcIi4uL3NyYy9jb25maWcvZGJcIiwgKCkgPT4ge1xyXG4gIGNvbnN0IG1vY2tEYiA9IHtcclxuICAgIGluc2VydDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXHJcbiAgICB2YWx1ZXM6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxyXG4gICAgcmV0dXJuaW5nOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoW10pLFxyXG4gICAgc2VsZWN0OiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcclxuICAgIGZyb206IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxyXG4gICAgd2hlcmU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSksXHJcbiAgfTtcclxuICByZXR1cm4geyBkYjogbW9ja0RiIH07XHJcbn0pO1xyXG5cclxuamVzdC5tb2NrKFwianNvbndlYnRva2VuXCIsICgpID0+ICh7XHJcbiAgdmVyaWZ5OiBqZXN0LmZuKCksXHJcbn0pKTtcclxuXHJcbmRlc2NyaWJlKFwiUHJvZmlsZSBlbmRwb2ludHNcIiwgKCkgPT4ge1xyXG4gIGFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoXCJQT1NUIC9wcm9maWxlL2NyZWF0b3JcIiwgKCkgPT4ge1xyXG4gICAgaXQoXCJzaG91bGQgY3JlYXRlIGEgY3JlYXRvciBwcm9maWxlXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgZmFrZVByb2ZpbGUgPSB7XHJcbiAgICAgICAgaWQ6IDEsXHJcbiAgICAgICAgdXNlcklkOiBcInVzZXIxMjNcIixcclxuICAgICAgICBmdWxsTmFtZTogXCJKb2huIERvZVwiLFxyXG4gICAgICAgIGNyZWF0b3JOYW1lOiBcIkpEIENvbWljc1wiLFxyXG4gICAgICAgIHBob25lTnVtYmVyOiBcIjEyMzQ1Njc4OTBcIixcclxuICAgICAgICBiaW86IFwiSSBtYWtlIGNvbWljc1wiLFxyXG4gICAgICAgIGdlbnJlczogW1wiZmFudGFzeVwiLCBcImFjdGlvblwiXSxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIChkYi5yZXR1cm5pbmcgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoW2Zha2VQcm9maWxlXSk7XHJcblxyXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcClcclxuICAgICAgICAucG9zdChcIi9wcm9maWxlL2NyZWF0b3JcIilcclxuICAgICAgICAuc2VuZCh7XHJcbiAgICAgICAgICB1c2VySWQ6IFwidXNlcjEyM1wiLFxyXG4gICAgICAgICAgZnVsbE5hbWU6IFwiSm9obiBEb2VcIixcclxuICAgICAgICAgIGNyZWF0b3JOYW1lOiBcIkpEIENvbWljc1wiLFxyXG4gICAgICAgICAgcGhvbmVOdW1iZXI6IFwiMTIzNDU2Nzg5MFwiLFxyXG4gICAgICAgICAgYmlvOiBcIkkgbWFrZSBjb21pY3NcIixcclxuICAgICAgICAgIGdlbnJlczogW1wiZmFudGFzeVwiLCBcImFjdGlvblwiXSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDIwMCk7XHJcbiAgICAgIGV4cGVjdChyZXMuYm9keS5wcm9maWxlKS50b0VxdWFsKGZha2VQcm9maWxlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwic2hvdWxkIHJldHVybiA0MDAgaWYgZGIgaW5zZXJ0IGZhaWxzXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgKGRiLnJldHVybmluZyBhcyBqZXN0Lk1vY2spLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoXCJEQiBlcnJvclwiKSk7XHJcblxyXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcClcclxuICAgICAgICAucG9zdChcIi9wcm9maWxlL2NyZWF0b3JcIilcclxuICAgICAgICAuc2VuZCh7XHJcbiAgICAgICAgICB1c2VySWQ6IFwidXNlcjEyM1wiLFxyXG4gICAgICAgICAgZnVsbE5hbWU6IFwiSm9obiBEb2VcIixcclxuICAgICAgICAgIGNyZWF0b3JOYW1lOiBcIkpEIENvbWljc1wiLFxyXG4gICAgICAgICAgcGhvbmVOdW1iZXI6IFwiMTIzNDU2Nzg5MFwiLFxyXG4gICAgICAgICAgYmlvOiBcIkkgbWFrZSBjb21pY3NcIixcclxuICAgICAgICAgIGdlbnJlczogW1wiZmFudGFzeVwiLCBcImFjdGlvblwiXSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDQwMCk7XHJcbiAgICAgIGV4cGVjdChyZXMuYm9keS5tZXNzYWdlKS50b0JlKFwiRmFpbGVkIHRvIGNyZWF0ZSBjcmVhdG9yIHByb2ZpbGVcIik7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoXCJQT1NUIC9wcm9maWxlL3JlYWRlclwiLCAoKSA9PiB7XHJcbiAgICBpdChcInNob3VsZCBjcmVhdGUgYSByZWFkZXIgcHJvZmlsZSB3aXRoIHdhbGxldElkICsgaGFzaGVkIHBpblwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGZha2VQcm9maWxlID0ge1xyXG4gICAgICAgIGlkOiAyLFxyXG4gICAgICAgIHVzZXJJZDogXCJ1c2VyNDU2XCIsXHJcbiAgICAgICAgZ2VucmVzOiBbXCJyb21hbmNlXCJdLFxyXG4gICAgICAgIHdhbGxldElkOiBcIndhbGxldDEyM1wiLFxyXG4gICAgICAgIHBpbkhhc2g6IFwiaGFzaGVkLXBpblwiLFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gTW9jayBjcnlwdG9cclxuICAgICAgamVzdC5zcHlPbihjcnlwdG8sIFwicmFuZG9tQnl0ZXNcIikubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcclxuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oXCJ3YWxsZXQxMjN3YWxsZXQxMjNcIik7IC8vIDE2IGJ5dGVzXHJcbiAgICAgIH0pO1xyXG4gICAgICBqZXN0LnNweU9uKGNyeXB0bywgXCJjcmVhdGVIYXNoXCIpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgICAgdXBkYXRlOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcclxuICAgICAgICBkaWdlc3Q6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoXCJoYXNoZWQtcGluXCIpLFxyXG4gICAgICB9IGFzIGFueSk7XHJcblxyXG4gICAgICAoZGIucmV0dXJuaW5nIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWVPbmNlKFtmYWtlUHJvZmlsZV0pO1xyXG5cclxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdChhcHApXHJcbiAgICAgICAgLnBvc3QoXCIvcHJvZmlsZS9yZWFkZXJcIilcclxuICAgICAgICAuc2VuZCh7XHJcbiAgICAgICAgICB1c2VySWQ6IFwidXNlcjQ1NlwiLFxyXG4gICAgICAgICAgZ2VucmVzOiBbXCJyb21hbmNlXCJdLFxyXG4gICAgICAgICAgcGluOiBcIjEyMzRcIixcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDIwMCk7XHJcbiAgICAgIGV4cGVjdChyZXMuYm9keS5wcm9maWxlKS50b0VxdWFsKGZha2VQcm9maWxlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwic2hvdWxkIHJldHVybiA0MDAgaWYgZGIgaW5zZXJ0IGZhaWxzXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgKGRiLnJldHVybmluZyBhcyBqZXN0Lk1vY2spLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoXCJEQiBlcnJvclwiKSk7XHJcblxyXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcClcclxuICAgICAgICAucG9zdChcIi9wcm9maWxlL3JlYWRlclwiKVxyXG4gICAgICAgIC5zZW5kKHtcclxuICAgICAgICAgIHVzZXJJZDogXCJ1c2VyNDU2XCIsXHJcbiAgICAgICAgICBnZW5yZXM6IFtcInJvbWFuY2VcIl0sXHJcbiAgICAgICAgICBwaW46IFwiMTIzNFwiLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmUoNDAwKTtcclxuICAgICAgZXhwZWN0KHJlcy5ib2R5Lm1lc3NhZ2UpLnRvQmUoXCJGYWlsZWQgdG8gY3JlYXRlIHJlYWRlciBwcm9maWxlXCIpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKFwiR0VUIC9wcm9maWxlXCIsICgpID0+IHtcclxuICAgIGl0KFwic2hvdWxkIHJldHVybiBjcmVhdG9yIHByb2ZpbGUgd2hlbiBleGlzdHNcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBmYWtlQ3JlYXRvciA9IHsgaWQ6IDEsIHVzZXJJZDogXCJ1MVwiLCBjcmVhdG9yTmFtZTogXCJKRFwiIH07XHJcbiAgICAgIChqd3QudmVyaWZ5IGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHsgdXNlcklkOiBcInUxXCIgfSk7XHJcbiAgICAgIChkYi53aGVyZSBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlT25jZShbZmFrZUNyZWF0b3JdKTsgLy8gZmlyc3QgcXVlcnkgcmV0dXJucyBjcmVhdG9yXHJcblxyXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcClcclxuICAgICAgICAuZ2V0KFwiL3Byb2ZpbGVcIilcclxuICAgICAgICAuc2V0KFwiQXV0aG9yaXphdGlvblwiLCBcIkJlYXJlciB2YWxpZHRva2VuXCIpO1xyXG5cclxuICAgICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmUoMjAwKTtcclxuICAgICAgZXhwZWN0KHJlcy5ib2R5KS50b0VxdWFsKHsgcm9sZTogXCJjcmVhdG9yXCIsIHByb2ZpbGU6IGZha2VDcmVhdG9yIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJzaG91bGQgcmV0dXJuIHJlYWRlciBwcm9maWxlIHdoZW4gY3JlYXRvciBub3QgZm91bmRcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBmYWtlUmVhZGVyID0geyBpZDogMiwgdXNlcklkOiBcInUyXCIsIGdlbnJlczogW1wic2NpLWZpXCJdIH07XHJcbiAgICAgIChqd3QudmVyaWZ5IGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHsgdXNlcklkOiBcInUyXCIgfSk7XHJcbiAgICAgIChkYi53aGVyZSBhcyBqZXN0Lk1vY2spXHJcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZShbXSkgLy8gbm8gY3JlYXRvclxyXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoW2Zha2VSZWFkZXJdKTsgLy8gcmVhZGVyIGZvdW5kXHJcblxyXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcClcclxuICAgICAgICAuZ2V0KFwiL3Byb2ZpbGVcIilcclxuICAgICAgICAuc2V0KFwiQXV0aG9yaXphdGlvblwiLCBcIkJlYXJlciB2YWxpZHRva2VuXCIpO1xyXG5cclxuICAgICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmUoMjAwKTtcclxuICAgICAgZXhwZWN0KHJlcy5ib2R5KS50b0VxdWFsKHsgcm9sZTogXCJyZWFkZXJcIiwgcHJvZmlsZTogZmFrZVJlYWRlciB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwic2hvdWxkIHJldHVybiA0MDQgaWYgbm8gcHJvZmlsZSBmb3VuZFwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIChqd3QudmVyaWZ5IGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHsgdXNlcklkOiBcInUzXCIgfSk7XHJcbiAgICAgIChkYi53aGVyZSBhcyBqZXN0Lk1vY2spXHJcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZShbXSlcclxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKFtdKTtcclxuXHJcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QoYXBwKVxyXG4gICAgICAgIC5nZXQoXCIvcHJvZmlsZVwiKVxyXG4gICAgICAgIC5zZXQoXCJBdXRob3JpemF0aW9uXCIsIFwiQmVhcmVyIHZhbGlkdG9rZW5cIik7XHJcblxyXG4gICAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZSg0MDQpO1xyXG4gICAgICBleHBlY3QocmVzLmJvZHkubWVzc2FnZSkudG9CZShcIlByb2ZpbGUgbm90IGZvdW5kXCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJzaG91bGQgcmV0dXJuIDQwMSBpZiBubyB0b2tlbiBwcm92aWRlZFwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QoYXBwKS5nZXQoXCIvcHJvZmlsZVwiKTtcclxuICAgICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmUoNDAxKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwic2hvdWxkIHJldHVybiA0MDEgaWYgdG9rZW4gaXMgaW52YWxpZFwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIChqd3QudmVyaWZ5IGFzIGplc3QuTW9jaykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkXCIpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QoYXBwKVxyXG4gICAgICAgIC5nZXQoXCIvcHJvZmlsZVwiKVxyXG4gICAgICAgIC5zZXQoXCJBdXRob3JpemF0aW9uXCIsIFwiQmVhcmVyIGJhZHRva2VuXCIpO1xyXG5cclxuICAgICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmUoNDAxKTtcclxuICAgICAgZXhwZWN0KHJlcy5ib2R5Lm1lc3NhZ2UpLnRvQmUoXCJJbnZhbGlkIG9yIGV4cGlyZWQgdG9rZW5cIik7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdfQ==