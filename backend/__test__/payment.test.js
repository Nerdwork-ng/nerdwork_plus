import request from "supertest";
import { app } from "../src/index";
import { describe, expect, it, beforeAll } from '@jest/globals';
// Mock user authentication middleware for tests
describe("Payment Endpoints", () => {
    let token;
    beforeAll(async () => {
        // Sign up and login to get a token
        await request(app).post("/auth/signup").send({
            email: "paytest@example.com",
            password: "password123",
            username: "paytester",
        });
        const res = await request(app).post("/auth/login").send({
            email: "paytest@example.com",
            password: "password123",
        });
        token = res.body.token;
    });
    it("should create a payment link", async () => {
        const res = await request(app)
            .post("/payment/helio/link")
            .set("Authorization", `Bearer ${token}`)
            .send({
            amount: 100,
            currency: "6617fa34af7c94b808564aac",
            name: "Test Payment"
        });
        expect([200, 201]).toContain(res.statusCode);
        expect(res.body).toHaveProperty("success", true);
        expect(res.body).toHaveProperty("paymentLink");
        expect(res.body).toHaveProperty("paymentId");
    });
    it("should create a webhook for payment", async () => {
        // First, create a payment link to get a paymentId
        const linkRes = await request(app)
            .post("/payment/helio/link")
            .set("Authorization", `Bearer ${token}`)
            .send({
            amount: 100,
            currency: "6617fa34af7c94b808564aac",
            name: "Test Payment"
        });
        const paymentId = linkRes.body.paymentId;
        const res = await request(app)
            .post("/payment/helio/webhook/create")
            .set("Authorization", `Bearer ${token}`)
            .send({ paymentId });
        expect([200, 201]).toContain(res.statusCode);
        expect(res.body).toHaveProperty("success", true);
        expect(res.body).toHaveProperty("data");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGF5bWVudC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sT0FBTyxNQUFNLFdBQVcsQ0FBQztBQUNoQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFaEUsZ0RBQWdEO0FBQ2hELFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7SUFDakMsSUFBSSxLQUFhLENBQUM7SUFFbEIsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLG1DQUFtQztRQUNuQyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQzNDLEtBQUssRUFBRSxxQkFBcUI7WUFDNUIsUUFBUSxFQUFFLGFBQWE7WUFDdkIsUUFBUSxFQUFFLFdBQVc7U0FDdEIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxHQUFHLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN0RCxLQUFLLEVBQUUscUJBQXFCO1lBQzVCLFFBQVEsRUFBRSxhQUFhO1NBQ3hCLENBQUMsQ0FBQztRQUNILEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN6QixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM1QyxNQUFNLEdBQUcsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7YUFDM0IsSUFBSSxDQUFDLHFCQUFxQixDQUFDO2FBQzNCLEdBQUcsQ0FBQyxlQUFlLEVBQUUsVUFBVSxLQUFLLEVBQUUsQ0FBQzthQUN2QyxJQUFJLENBQUM7WUFDSixNQUFNLEVBQUUsR0FBRztZQUNYLFFBQVEsRUFBRSwwQkFBMEI7WUFDcEMsSUFBSSxFQUFFLGNBQWM7U0FDckIsQ0FBQyxDQUFDO1FBQ0wsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3QyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDakQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDL0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMscUNBQXFDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbkQsa0RBQWtEO1FBQ2xELE1BQU0sT0FBTyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQzthQUMvQixJQUFJLENBQUMscUJBQXFCLENBQUM7YUFDM0IsR0FBRyxDQUFDLGVBQWUsRUFBRSxVQUFVLEtBQUssRUFBRSxDQUFDO2FBQ3ZDLElBQUksQ0FBQztZQUNKLE1BQU0sRUFBRSxHQUFHO1lBQ1gsUUFBUSxFQUFFLDBCQUEwQjtZQUNwQyxJQUFJLEVBQUUsY0FBYztTQUNyQixDQUFDLENBQUM7UUFDTCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN6QyxNQUFNLEdBQUcsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7YUFDM0IsSUFBSSxDQUFDLCtCQUErQixDQUFDO2FBQ3JDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsVUFBVSxLQUFLLEVBQUUsQ0FBQzthQUN2QyxJQUFJLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDN0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVxdWVzdCBmcm9tIFwic3VwZXJ0ZXN0XCI7XHJcbmltcG9ydCB7IGFwcCB9IGZyb20gXCIuLi9zcmMvaW5kZXhcIjtcclxuaW1wb3J0IHsgZGVzY3JpYmUsIGV4cGVjdCwgaXQsIGJlZm9yZUFsbCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnO1xyXG5cclxuLy8gTW9jayB1c2VyIGF1dGhlbnRpY2F0aW9uIG1pZGRsZXdhcmUgZm9yIHRlc3RzXHJcbmRlc2NyaWJlKFwiUGF5bWVudCBFbmRwb2ludHNcIiwgKCkgPT4ge1xyXG4gIGxldCB0b2tlbjogc3RyaW5nO1xyXG5cclxuICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gU2lnbiB1cCBhbmQgbG9naW4gdG8gZ2V0IGEgdG9rZW5cclxuICAgIGF3YWl0IHJlcXVlc3QoYXBwKS5wb3N0KFwiL2F1dGgvc2lnbnVwXCIpLnNlbmQoe1xyXG4gICAgICBlbWFpbDogXCJwYXl0ZXN0QGV4YW1wbGUuY29tXCIsXHJcbiAgICAgIHBhc3N3b3JkOiBcInBhc3N3b3JkMTIzXCIsXHJcbiAgICAgIHVzZXJuYW1lOiBcInBheXRlc3RlclwiLFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcCkucG9zdChcIi9hdXRoL2xvZ2luXCIpLnNlbmQoe1xyXG4gICAgICBlbWFpbDogXCJwYXl0ZXN0QGV4YW1wbGUuY29tXCIsXHJcbiAgICAgIHBhc3N3b3JkOiBcInBhc3N3b3JkMTIzXCIsXHJcbiAgICB9KTtcclxuICAgIHRva2VuID0gcmVzLmJvZHkudG9rZW47XHJcbiAgfSk7XHJcblxyXG4gIGl0KFwic2hvdWxkIGNyZWF0ZSBhIHBheW1lbnQgbGlua1wiLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcClcclxuICAgICAgLnBvc3QoXCIvcGF5bWVudC9oZWxpby9saW5rXCIpXHJcbiAgICAgIC5zZXQoXCJBdXRob3JpemF0aW9uXCIsIGBCZWFyZXIgJHt0b2tlbn1gKVxyXG4gICAgICAuc2VuZCh7XHJcbiAgICAgICAgYW1vdW50OiAxMDAsXHJcbiAgICAgICAgY3VycmVuY3k6IFwiNjYxN2ZhMzRhZjdjOTRiODA4NTY0YWFjXCIsXHJcbiAgICAgICAgbmFtZTogXCJUZXN0IFBheW1lbnRcIlxyXG4gICAgICB9KTtcclxuICAgIGV4cGVjdChbMjAwLCAyMDFdKS50b0NvbnRhaW4ocmVzLnN0YXR1c0NvZGUpO1xyXG4gICAgZXhwZWN0KHJlcy5ib2R5KS50b0hhdmVQcm9wZXJ0eShcInN1Y2Nlc3NcIiwgdHJ1ZSk7XHJcbiAgICBleHBlY3QocmVzLmJvZHkpLnRvSGF2ZVByb3BlcnR5KFwicGF5bWVudExpbmtcIik7XHJcbiAgICBleHBlY3QocmVzLmJvZHkpLnRvSGF2ZVByb3BlcnR5KFwicGF5bWVudElkXCIpO1xyXG4gIH0pO1xyXG5cclxuICBpdChcInNob3VsZCBjcmVhdGUgYSB3ZWJob29rIGZvciBwYXltZW50XCIsIGFzeW5jICgpID0+IHtcclxuICAgIC8vIEZpcnN0LCBjcmVhdGUgYSBwYXltZW50IGxpbmsgdG8gZ2V0IGEgcGF5bWVudElkXHJcbiAgICBjb25zdCBsaW5rUmVzID0gYXdhaXQgcmVxdWVzdChhcHApXHJcbiAgICAgIC5wb3N0KFwiL3BheW1lbnQvaGVsaW8vbGlua1wiKVxyXG4gICAgICAuc2V0KFwiQXV0aG9yaXphdGlvblwiLCBgQmVhcmVyICR7dG9rZW59YClcclxuICAgICAgLnNlbmQoe1xyXG4gICAgICAgIGFtb3VudDogMTAwLFxyXG4gICAgICAgIGN1cnJlbmN5OiBcIjY2MTdmYTM0YWY3Yzk0YjgwODU2NGFhY1wiLFxyXG4gICAgICAgIG5hbWU6IFwiVGVzdCBQYXltZW50XCJcclxuICAgICAgfSk7XHJcbiAgICBjb25zdCBwYXltZW50SWQgPSBsaW5rUmVzLmJvZHkucGF5bWVudElkO1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdChhcHApXHJcbiAgICAgIC5wb3N0KFwiL3BheW1lbnQvaGVsaW8vd2ViaG9vay9jcmVhdGVcIilcclxuICAgICAgLnNldChcIkF1dGhvcml6YXRpb25cIiwgYEJlYXJlciAke3Rva2VufWApXHJcbiAgICAgIC5zZW5kKHsgcGF5bWVudElkIH0pO1xyXG4gICAgZXhwZWN0KFsyMDAsIDIwMV0pLnRvQ29udGFpbihyZXMuc3RhdHVzQ29kZSk7XHJcbiAgICBleHBlY3QocmVzLmJvZHkpLnRvSGF2ZVByb3BlcnR5KFwic3VjY2Vzc1wiLCB0cnVlKTtcclxuICAgIGV4cGVjdChyZXMuYm9keSkudG9IYXZlUHJvcGVydHkoXCJkYXRhXCIpO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcblxyXG4iXX0=