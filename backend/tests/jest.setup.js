import { beforeAll, afterAll } from '@jest/globals';
// Global test setup
beforeAll(() => {
    console.log('ðŸš€ Starting Nerdwork+ MVP Test Suite');
    console.log('ðŸ”§ Test Environment Configuration:');
    console.log(`  - API Gateway: ${process.env.API_GATEWAY_URL || 'http://localhost:3000'}`);
    console.log(`  - Auth Service: ${process.env.AUTH_SERVICE_URL || 'http://localhost:3001'}`);
    console.log(`  - User Service: ${process.env.USER_SERVICE_URL || 'http://localhost:3002'}`);
    console.log(`  - Comic Service: ${process.env.COMIC_SERVICE_URL || 'http://localhost:3003'}`);
    console.log(`  - Wallet Service: ${process.env.WALLET_SERVICE_URL || 'http://localhost:3004'}`);
    console.log(`  - File Service: ${process.env.FILE_SERVICE_URL || 'http://localhost:3007'}`);
    console.log('');
});
afterAll(() => {
    console.log('\nðŸŽ‰ All tests completed!');
    console.log('ðŸ“Š Test Summary:');
    console.log('  âœ… User authentication flows');
    console.log('  âœ… Creator registration & management');
    console.log('  âœ… Crypto wallet & Helio payments');
    console.log('  âœ… File uploads (S3 + IPFS)');
    console.log('  âœ… Comic creation & publishing');
    console.log('  âœ… Consumer discovery & interaction');
    console.log('  âœ… Cross-service integrations');
    console.log('  âœ… Error handling & security');
    console.log('\nðŸ”§ Next steps:');
    console.log('  - Run services: docker-compose up');
    console.log('  - Execute tests: npm test');
    console.log('  - Check logs for any failures');
});
// Global error handler for unhandled promises
process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});
// Extend Jest timeout for integration tests
jest.setTimeout(30000);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamVzdC5zZXR1cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImplc3Quc2V0dXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFcEQsb0JBQW9CO0FBQ3BCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7SUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7SUFDcEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0lBQ2xELE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxJQUFJLHVCQUF1QixFQUFFLENBQUMsQ0FBQztJQUMxRixPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixJQUFJLHVCQUF1QixFQUFFLENBQUMsQ0FBQztJQUM1RixPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixJQUFJLHVCQUF1QixFQUFFLENBQUMsQ0FBQztJQUM1RixPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixJQUFJLHVCQUF1QixFQUFFLENBQUMsQ0FBQztJQUM5RixPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixJQUFJLHVCQUF1QixFQUFFLENBQUMsQ0FBQztJQUNoRyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixJQUFJLHVCQUF1QixFQUFFLENBQUMsQ0FBQztJQUM1RixPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xCLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLEdBQUcsRUFBRTtJQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUN6QyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0lBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUNBQXVDLENBQUMsQ0FBQztJQUNyRCxPQUFPLENBQUMsR0FBRyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7SUFDbEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0lBQzVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUNBQWlDLENBQUMsQ0FBQztJQUMvQyxPQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7SUFDcEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQzlDLE9BQU8sQ0FBQyxHQUFHLENBQUMsK0JBQStCLENBQUMsQ0FBQztJQUM3QyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0lBQ25ELE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLENBQUMsQ0FBQztJQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDLENBQUM7QUFFSCw4Q0FBOEM7QUFDOUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBRTtJQUNuRCxPQUFPLENBQUMsS0FBSyxDQUFDLHlCQUF5QixFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdkUsQ0FBQyxDQUFDLENBQUM7QUFFSCw0Q0FBNEM7QUFDNUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJlZm9yZUFsbCwgYWZ0ZXJBbGwgfSBmcm9tICdAamVzdC9nbG9iYWxzJztcclxuXHJcbi8vIEdsb2JhbCB0ZXN0IHNldHVwXHJcbmJlZm9yZUFsbCgoKSA9PiB7XHJcbiAgY29uc29sZS5sb2coJ/CfmoAgU3RhcnRpbmcgTmVyZHdvcmsrIE1WUCBUZXN0IFN1aXRlJyk7XHJcbiAgY29uc29sZS5sb2coJ/CflKcgVGVzdCBFbnZpcm9ubWVudCBDb25maWd1cmF0aW9uOicpO1xyXG4gIGNvbnNvbGUubG9nKGAgIC0gQVBJIEdhdGV3YXk6ICR7cHJvY2Vzcy5lbnYuQVBJX0dBVEVXQVlfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDAnfWApO1xyXG4gIGNvbnNvbGUubG9nKGAgIC0gQXV0aCBTZXJ2aWNlOiAke3Byb2Nlc3MuZW52LkFVVEhfU0VSVklDRV9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMSd9YCk7XHJcbiAgY29uc29sZS5sb2coYCAgLSBVc2VyIFNlcnZpY2U6ICR7cHJvY2Vzcy5lbnYuVVNFUl9TRVJWSUNFX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDozMDAyJ31gKTtcclxuICBjb25zb2xlLmxvZyhgICAtIENvbWljIFNlcnZpY2U6ICR7cHJvY2Vzcy5lbnYuQ09NSUNfU0VSVklDRV9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMyd9YCk7XHJcbiAgY29uc29sZS5sb2coYCAgLSBXYWxsZXQgU2VydmljZTogJHtwcm9jZXNzLmVudi5XQUxMRVRfU0VSVklDRV9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwNCd9YCk7XHJcbiAgY29uc29sZS5sb2coYCAgLSBGaWxlIFNlcnZpY2U6ICR7cHJvY2Vzcy5lbnYuRklMRV9TRVJWSUNFX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDozMDA3J31gKTtcclxuICBjb25zb2xlLmxvZygnJyk7XHJcbn0pO1xyXG5cclxuYWZ0ZXJBbGwoKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCdcXG7wn46JIEFsbCB0ZXN0cyBjb21wbGV0ZWQhJyk7XHJcbiAgY29uc29sZS5sb2coJ/Cfk4ogVGVzdCBTdW1tYXJ5OicpO1xyXG4gIGNvbnNvbGUubG9nKCcgIOKchSBVc2VyIGF1dGhlbnRpY2F0aW9uIGZsb3dzJyk7XHJcbiAgY29uc29sZS5sb2coJyAg4pyFIENyZWF0b3IgcmVnaXN0cmF0aW9uICYgbWFuYWdlbWVudCcpO1xyXG4gIGNvbnNvbGUubG9nKCcgIOKchSBDcnlwdG8gd2FsbGV0ICYgSGVsaW8gcGF5bWVudHMnKTtcclxuICBjb25zb2xlLmxvZygnICDinIUgRmlsZSB1cGxvYWRzIChTMyArIElQRlMpJyk7XHJcbiAgY29uc29sZS5sb2coJyAg4pyFIENvbWljIGNyZWF0aW9uICYgcHVibGlzaGluZycpO1xyXG4gIGNvbnNvbGUubG9nKCcgIOKchSBDb25zdW1lciBkaXNjb3ZlcnkgJiBpbnRlcmFjdGlvbicpO1xyXG4gIGNvbnNvbGUubG9nKCcgIOKchSBDcm9zcy1zZXJ2aWNlIGludGVncmF0aW9ucycpO1xyXG4gIGNvbnNvbGUubG9nKCcgIOKchSBFcnJvciBoYW5kbGluZyAmIHNlY3VyaXR5Jyk7XHJcbiAgY29uc29sZS5sb2coJ1xcbvCflKcgTmV4dCBzdGVwczonKTtcclxuICBjb25zb2xlLmxvZygnICAtIFJ1biBzZXJ2aWNlczogZG9ja2VyLWNvbXBvc2UgdXAnKTtcclxuICBjb25zb2xlLmxvZygnICAtIEV4ZWN1dGUgdGVzdHM6IG5wbSB0ZXN0Jyk7XHJcbiAgY29uc29sZS5sb2coJyAgLSBDaGVjayBsb2dzIGZvciBhbnkgZmFpbHVyZXMnKTtcclxufSk7XHJcblxyXG4vLyBHbG9iYWwgZXJyb3IgaGFuZGxlciBmb3IgdW5oYW5kbGVkIHByb21pc2VzXHJcbnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIChyZWFzb24sIHByb21pc2UpID0+IHtcclxuICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgUmVqZWN0aW9uIGF0OicsIHByb21pc2UsICdyZWFzb246JywgcmVhc29uKTtcclxufSk7XHJcblxyXG4vLyBFeHRlbmQgSmVzdCB0aW1lb3V0IGZvciBpbnRlZ3JhdGlvbiB0ZXN0c1xyXG5qZXN0LnNldFRpbWVvdXQoMzAwMDApOyJdfQ==