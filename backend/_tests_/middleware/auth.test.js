import request from "supertest";
import express from "express";
import jwt from "jsonwebtoken";
import { authenticate } from "../../src/middleware/common/auth";
process.env.JWT_SECRET = "testsecret"; // Use a consistent secret for tests
const app = express();
app.use(express.json());
app.get("/protected", authenticate, (req, res) => {
    res
        .status(200)
        .json({ message: "Access granted", userId: req.userId });
});
describe("Auth Middleware", () => {
    it("should return 401 if no token", async () => {
        const res = await request(app).get("/protected");
        expect(res.statusCode).toBe(401);
    });
    it("should return 401 for invalid token", async () => {
        const res = await request(app)
            .get("/protected")
            .set("Authorization", "Bearer invalidtoken");
        expect(res.statusCode).toBe(401); // Updated to match actual behavior
    });
    it("should pass and return 200 for valid token", async () => {
        const validToken = jwt.sign({ userId: "test-id" }, process.env.JWT_SECRET, {
            expiresIn: "1h",
        });
        const res = await request(app)
            .get("/protected")
            .set("Authorization", `Bearer ${validToken}`);
        // This test might still fail if middleware doesn't pick up JWT_SECRET properly
        expect(res.statusCode).toBe(200);
        expect(res.body).toHaveProperty("userId", "test-id");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXV0aC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sT0FBTyxNQUFNLFdBQVcsQ0FBQztBQUNoQyxPQUFPLE9BQThCLE1BQU0sU0FBUyxDQUFDO0FBQ3JELE9BQU8sR0FBRyxNQUFNLGNBQWMsQ0FBQztBQUMvQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFaEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDLENBQUMsb0NBQW9DO0FBRTNFLE1BQU0sR0FBRyxHQUFHLE9BQU8sRUFBRSxDQUFDO0FBQ3RCLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFFeEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsWUFBWSxFQUFFLENBQUMsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQ2xFLEdBQUc7U0FDQSxNQUFNLENBQUMsR0FBRyxDQUFDO1NBQ1gsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRyxHQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUN0RSxDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7SUFDL0IsRUFBRSxDQUFDLCtCQUErQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzdDLE1BQU0sR0FBRyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNqRCxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNuRCxNQUFNLEdBQUcsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7YUFDM0IsR0FBRyxDQUFDLFlBQVksQ0FBQzthQUNqQixHQUFHLENBQUMsZUFBZSxFQUFFLHFCQUFxQixDQUFDLENBQUM7UUFDL0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxtQ0FBbUM7SUFDdkUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNENBQTRDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDMUQsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FDekIsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEVBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVyxFQUN2QjtZQUNFLFNBQVMsRUFBRSxJQUFJO1NBQ2hCLENBQ0YsQ0FBQztRQUVGLE1BQU0sR0FBRyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQzthQUMzQixHQUFHLENBQUMsWUFBWSxDQUFDO2FBQ2pCLEdBQUcsQ0FBQyxlQUFlLEVBQUUsVUFBVSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBRWhELCtFQUErRTtRQUMvRSxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdkQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByZXF1ZXN0IGZyb20gXCJzdXBlcnRlc3RcIjtcclxuaW1wb3J0IGV4cHJlc3MsIHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tIFwiZXhwcmVzc1wiO1xyXG5pbXBvcnQgand0IGZyb20gXCJqc29ud2VidG9rZW5cIjtcclxuaW1wb3J0IHsgYXV0aGVudGljYXRlIH0gZnJvbSBcIi4uLy4uL3NyYy9taWRkbGV3YXJlL2NvbW1vbi9hdXRoXCI7XHJcblxyXG5wcm9jZXNzLmVudi5KV1RfU0VDUkVUID0gXCJ0ZXN0c2VjcmV0XCI7IC8vIFVzZSBhIGNvbnNpc3RlbnQgc2VjcmV0IGZvciB0ZXN0c1xyXG5cclxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xyXG5hcHAudXNlKGV4cHJlc3MuanNvbigpKTtcclxuXHJcbmFwcC5nZXQoXCIvcHJvdGVjdGVkXCIsIGF1dGhlbnRpY2F0ZSwgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xyXG4gIHJlc1xyXG4gICAgLnN0YXR1cygyMDApXHJcbiAgICAuanNvbih7IG1lc3NhZ2U6IFwiQWNjZXNzIGdyYW50ZWRcIiwgdXNlcklkOiAocmVxIGFzIGFueSkudXNlcklkIH0pO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKFwiQXV0aCBNaWRkbGV3YXJlXCIsICgpID0+IHtcclxuICBpdChcInNob3VsZCByZXR1cm4gNDAxIGlmIG5vIHRva2VuXCIsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QoYXBwKS5nZXQoXCIvcHJvdGVjdGVkXCIpO1xyXG4gICAgZXhwZWN0KHJlcy5zdGF0dXNDb2RlKS50b0JlKDQwMSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KFwic2hvdWxkIHJldHVybiA0MDEgZm9yIGludmFsaWQgdG9rZW5cIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdChhcHApXHJcbiAgICAgIC5nZXQoXCIvcHJvdGVjdGVkXCIpXHJcbiAgICAgIC5zZXQoXCJBdXRob3JpemF0aW9uXCIsIFwiQmVhcmVyIGludmFsaWR0b2tlblwiKTtcclxuICAgIGV4cGVjdChyZXMuc3RhdHVzQ29kZSkudG9CZSg0MDEpOyAvLyBVcGRhdGVkIHRvIG1hdGNoIGFjdHVhbCBiZWhhdmlvclxyXG4gIH0pO1xyXG5cclxuICBpdChcInNob3VsZCBwYXNzIGFuZCByZXR1cm4gMjAwIGZvciB2YWxpZCB0b2tlblwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB2YWxpZFRva2VuID0gand0LnNpZ24oXHJcbiAgICAgIHsgdXNlcklkOiBcInRlc3QtaWRcIiB9LFxyXG4gICAgICBwcm9jZXNzLmVudi5KV1RfU0VDUkVUISxcclxuICAgICAge1xyXG4gICAgICAgIGV4cGlyZXNJbjogXCIxaFwiLFxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QoYXBwKVxyXG4gICAgICAuZ2V0KFwiL3Byb3RlY3RlZFwiKVxyXG4gICAgICAuc2V0KFwiQXV0aG9yaXphdGlvblwiLCBgQmVhcmVyICR7dmFsaWRUb2tlbn1gKTtcclxuXHJcbiAgICAvLyBUaGlzIHRlc3QgbWlnaHQgc3RpbGwgZmFpbCBpZiBtaWRkbGV3YXJlIGRvZXNuJ3QgcGljayB1cCBKV1RfU0VDUkVUIHByb3Blcmx5XHJcbiAgICBleHBlY3QocmVzLnN0YXR1c0NvZGUpLnRvQmUoMjAwKTtcclxuICAgIGV4cGVjdChyZXMuYm9keSkudG9IYXZlUHJvcGVydHkoXCJ1c2VySWRcIiwgXCJ0ZXN0LWlkXCIpO1xyXG4gIH0pO1xyXG59KTtcclxuIl19