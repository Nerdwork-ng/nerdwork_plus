import { eq, desc, asc, ilike, and, sql } from "drizzle-orm";
import { db } from "../config/db.js";
import { comics, comicPages, readingProgress, comicPurchases, comicReviews } from "../model/comic.js";
// Get all comics with pagination and filtering
export const getComics = async (req, res) => {
    try {
        const { page = 1, limit = 20, genre, author, search, sortBy = 'createdAt' } = req.query;
        const offset = (parseInt(page) - 1) * parseInt(limit);
        let whereConditions = [eq(comics.isActive, true)];
        if (genre) {
            whereConditions.push(ilike(comics.genre, `%${genre}%`));
        }
        if (author) {
            whereConditions.push(ilike(comics.author, `%${author}%`));
        }
        if (search) {
            whereConditions.push(sql `(${comics.title} ILIKE ${`%${search}%`} OR ${comics.description} ILIKE ${`%${search}%`})`);
        }
        const orderBy = sortBy === 'title' ? asc(comics.title) : desc(comics.createdAt);
        const comicsList = await db
            .select({
            id: comics.id,
            title: comics.title,
            description: comics.description,
            author: comics.author,
            artist: comics.artist,
            publisher: comics.publisher,
            genre: comics.genre,
            coverUrl: comics.coverUrl,
            totalPages: comics.totalPages,
            price: comics.price,
            isFreemium: comics.isFreemium,
            freePageCount: comics.freePageCount,
            publishedAt: comics.publishedAt,
            createdAt: comics.createdAt,
        })
            .from(comics)
            .where(and(...whereConditions))
            .orderBy(orderBy)
            .limit(parseInt(limit))
            .offset(offset);
        const totalCount = await db
            .select({ count: sql `count(*)` })
            .from(comics)
            .where(and(...whereConditions));
        return res.status(200).json({
            success: true,
            data: {
                comics: comicsList,
                pagination: {
                    page: parseInt(page),
                    limit: parseInt(limit),
                    total: totalCount[0].count,
                    totalPages: Math.ceil(Number(totalCount[0].count) / parseInt(limit))
                }
            },
            message: "Comics retrieved successfully"
        });
    }
    catch (error) {
        console.error("Get comics error:", error);
        return res.status(500).json({
            success: false,
            error: "Internal server error",
            timestamp: new Date().toISOString()
        });
    }
};
// Get specific comic details
export const getComic = async (req, res) => {
    try {
        const { id } = req.params;
        const userId = req.userId;
        const [comic] = await db
            .select()
            .from(comics)
            .where(and(eq(comics.id, id), eq(comics.isActive, true)));
        if (!comic) {
            return res.status(404).json({
                success: false,
                error: "Comic not found",
                timestamp: new Date().toISOString()
            });
        }
        // Check if user has purchased this comic
        let hasPurchased = false;
        if (userId) {
            const purchase = await db
                .select()
                .from(comicPurchases)
                .where(and(eq(comicPurchases.userId, userId), eq(comicPurchases.comicId, id)));
            hasPurchased = purchase.length > 0;
        }
        // Get user's reading progress
        let progress = null;
        if (userId) {
            const [userProgress] = await db
                .select()
                .from(readingProgress)
                .where(and(eq(readingProgress.userId, userId), eq(readingProgress.comicId, id)));
            progress = userProgress || null;
        }
        return res.status(200).json({
            success: true,
            data: {
                comic,
                hasPurchased,
                progress
            },
            message: "Comic retrieved successfully"
        });
    }
    catch (error) {
        console.error("Get comic error:", error);
        return res.status(500).json({
            success: false,
            error: "Internal server error",
            timestamp: new Date().toISOString()
        });
    }
};
// Get comic pages (with access control)
export const getComicPages = async (req, res) => {
    try {
        const { id } = req.params;
        const userId = req.userId;
        // Get comic details
        const [comic] = await db
            .select()
            .from(comics)
            .where(and(eq(comics.id, id), eq(comics.isActive, true)));
        if (!comic) {
            return res.status(404).json({
                success: false,
                error: "Comic not found",
                timestamp: new Date().toISOString()
            });
        }
        // Check if user has purchased this comic or if it's freemium
        let hasPurchased = false;
        if (userId) {
            const purchase = await db
                .select()
                .from(comicPurchases)
                .where(and(eq(comicPurchases.userId, userId), eq(comicPurchases.comicId, id)));
            hasPurchased = purchase.length > 0;
        }
        let pages;
        if (hasPurchased || comic.isFreemium) {
            // Return all pages for purchased comics or free comics
            pages = await db
                .select()
                .from(comicPages)
                .where(eq(comicPages.comicId, id))
                .orderBy(asc(comicPages.pageNumber));
        }
        else {
            // Return only preview pages for non-purchased comics
            pages = await db
                .select()
                .from(comicPages)
                .where(and(eq(comicPages.comicId, id), eq(comicPages.isPreview, true)))
                .orderBy(asc(comicPages.pageNumber))
                .limit(comic.freePageCount);
        }
        return res.status(200).json({
            success: true,
            data: {
                pages,
                totalPages: comic.totalPages,
                accessLevel: hasPurchased ? 'full' : (comic.isFreemium ? 'free' : 'preview')
            },
            message: "Comic pages retrieved successfully"
        });
    }
    catch (error) {
        console.error("Get comic pages error:", error);
        return res.status(500).json({
            success: false,
            error: "Internal server error",
            timestamp: new Date().toISOString()
        });
    }
};
// Update reading progress
export const updateReadingProgress = async (req, res) => {
    try {
        const { id } = req.params;
        const { currentPage } = req.body;
        const userId = req.userId;
        if (!userId) {
            return res.status(401).json({
                success: false,
                error: "Authentication required",
                timestamp: new Date().toISOString()
            });
        }
        const [comic] = await db
            .select()
            .from(comics)
            .where(eq(comics.id, id));
        if (!comic) {
            return res.status(404).json({
                success: false,
                error: "Comic not found",
                timestamp: new Date().toISOString()
            });
        }
        // Check if progress entry exists
        const [existingProgress] = await db
            .select()
            .from(readingProgress)
            .where(and(eq(readingProgress.userId, userId), eq(readingProgress.comicId, id)));
        const isCompleted = currentPage >= comic.totalPages;
        const progressData = {
            userId,
            comicId: id,
            currentPage,
            totalPages: comic.totalPages,
            completedAt: isCompleted ? new Date() : null,
            lastReadAt: new Date(),
            updatedAt: new Date(),
        };
        let updatedProgress;
        if (existingProgress) {
            [updatedProgress] = await db
                .update(readingProgress)
                .set({
                currentPage,
                completedAt: isCompleted ? new Date() : null,
                lastReadAt: new Date(),
                updatedAt: new Date(),
            })
                .where(eq(readingProgress.id, existingProgress.id))
                .returning();
        }
        else {
            [updatedProgress] = await db
                .insert(readingProgress)
                .values(progressData)
                .returning();
        }
        return res.status(200).json({
            success: true,
            data: updatedProgress,
            message: "Reading progress updated successfully"
        });
    }
    catch (error) {
        console.error("Update reading progress error:", error);
        return res.status(500).json({
            success: false,
            error: "Internal server error",
            timestamp: new Date().toISOString()
        });
    }
};
// Get user's reading history
export const getReadingHistory = async (req, res) => {
    try {
        const userId = req.userId;
        if (!userId) {
            return res.status(401).json({
                success: false,
                error: "Authentication required",
                timestamp: new Date().toISOString()
            });
        }
        const history = await db
            .select({
            id: readingProgress.id,
            currentPage: readingProgress.currentPage,
            totalPages: readingProgress.totalPages,
            completedAt: readingProgress.completedAt,
            lastReadAt: readingProgress.lastReadAt,
            comic: {
                id: comics.id,
                title: comics.title,
                author: comics.author,
                coverUrl: comics.coverUrl,
            }
        })
            .from(readingProgress)
            .innerJoin(comics, eq(readingProgress.comicId, comics.id))
            .where(eq(readingProgress.userId, userId))
            .orderBy(desc(readingProgress.lastReadAt));
        return res.status(200).json({
            success: true,
            data: history,
            message: "Reading history retrieved successfully"
        });
    }
    catch (error) {
        console.error("Get reading history error:", error);
        return res.status(500).json({
            success: false,
            error: "Internal server error",
            timestamp: new Date().toISOString()
        });
    }
};
// Add comic review
export const addComicReview = async (req, res) => {
    try {
        const { id } = req.params;
        const { rating, review } = req.body;
        const userId = req.userId;
        if (!userId) {
            return res.status(401).json({
                success: false,
                error: "Authentication required",
                timestamp: new Date().toISOString()
            });
        }
        if (!rating || rating < 1 || rating > 5) {
            return res.status(400).json({
                success: false,
                error: "Rating must be between 1 and 5",
                timestamp: new Date().toISOString()
            });
        }
        // Check if comic exists
        const [comic] = await db
            .select()
            .from(comics)
            .where(eq(comics.id, id));
        if (!comic) {
            return res.status(404).json({
                success: false,
                error: "Comic not found",
                timestamp: new Date().toISOString()
            });
        }
        // Check if user already reviewed this comic
        const [existingReview] = await db
            .select()
            .from(comicReviews)
            .where(and(eq(comicReviews.userId, userId), eq(comicReviews.comicId, id)));
        let reviewResult;
        if (existingReview) {
            [reviewResult] = await db
                .update(comicReviews)
                .set({
                rating,
                review,
                updatedAt: new Date(),
            })
                .where(eq(comicReviews.id, existingReview.id))
                .returning();
        }
        else {
            [reviewResult] = await db
                .insert(comicReviews)
                .values({
                userId,
                comicId: id,
                rating,
                review,
            })
                .returning();
        }
        return res.status(200).json({
            success: true,
            data: reviewResult,
            message: existingReview ? "Review updated successfully" : "Review added successfully"
        });
    }
    catch (error) {
        console.error("Add comic review error:", error);
        return res.status(500).json({
            success: false,
            error: "Internal server error",
            timestamp: new Date().toISOString()
        });
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29taWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb21pYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDN0QsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFdEcsK0NBQStDO0FBQy9DLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQUUsR0FBUSxFQUFFLEdBQVEsRUFBRSxFQUFFO0lBQ3BELElBQUksQ0FBQztRQUNILE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLFdBQVcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDeEYsTUFBTSxNQUFNLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXRELElBQUksZUFBZSxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVsRCxJQUFJLEtBQUssRUFBRSxDQUFDO1lBQ1YsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxRCxDQUFDO1FBRUQsSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUNYLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVB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QUFDLEdBQUcsTUFBTSxFQUFFO2lCQUN0QixNQUFNLENBQUMsWUFBWSxDQUFDO2lCQUNwQixNQUFNLENBQUM7Z0JBQ04sTUFBTTtnQkFDTixPQUFPLEVBQUUsRUFBRTtnQkFDWCxNQUFNO2dCQUNOLE1BQU07YUFDUCxDQUFDO2lCQUNELFNBQVMsRUFBRSxDQUFDO1FBQ2pCLENBQUM7UUFFRCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQzFCLE9BQU8sRUFBRSxJQUFJO1lBQ2IsSUFBSSxFQUFFLFlBQVk7WUFDbEIsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLDJCQUEyQjtTQUN0RixDQUFDLENBQUM7SUFDTCxDQUFDO0lBQUMsT0FBTyxLQUFVLEVBQUUsQ0FBQztRQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLHlCQUF5QixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2hELE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDMUIsT0FBTyxFQUFFLEtBQUs7WUFDZCxLQUFLLEVBQUUsdUJBQXVCO1lBQzlCLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtTQUNwQyxDQUFDLENBQUM7SUFDTCxDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXEsIGRlc2MsIGFzYywgaWxpa2UsIGFuZCwgc3FsIH0gZnJvbSBcImRyaXp6bGUtb3JtXCI7XG5pbXBvcnQgeyBkYiB9IGZyb20gXCIuLi9jb25maWcvZGIuanNcIjtcbmltcG9ydCB7IGNvbWljcywgY29taWNQYWdlcywgcmVhZGluZ1Byb2dyZXNzLCBjb21pY1B1cmNoYXNlcywgY29taWNSZXZpZXdzIH0gZnJvbSBcIi4uL21vZGVsL2NvbWljLmpzXCI7XG5cbi8vIEdldCBhbGwgY29taWNzIHdpdGggcGFnaW5hdGlvbiBhbmQgZmlsdGVyaW5nXG5leHBvcnQgY29uc3QgZ2V0Q29taWNzID0gYXN5bmMgKHJlcTogYW55LCByZXM6IGFueSkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHsgcGFnZSA9IDEsIGxpbWl0ID0gMjAsIGdlbnJlLCBhdXRob3IsIHNlYXJjaCwgc29ydEJ5ID0gJ2NyZWF0ZWRBdCcgfSA9IHJlcS5xdWVyeTtcbiAgICBjb25zdCBvZmZzZXQgPSAocGFyc2VJbnQocGFnZSkgLSAxKSAqIHBhcnNlSW50KGxpbWl0KTtcblxuICAgIGxldCB3aGVyZUNvbmRpdGlvbnMgPSBbZXEoY29taWNzLmlzQWN0aXZlLCB0cnVlKV07XG4gICAgXG4gICAgaWYgKGdlbnJlKSB7XG4gICAgICB3aGVyZUNvbmRpdGlvbnMucHVzaChpbGlrZShjb21pY3MuZ2VucmUsIGAlJHtnZW5yZX0lYCkpO1xuICAgIH1cbiAgICBcbiAgICBpZiAoYXV0aG9yKSB7XG4gICAgICB3aGVyZUNvbmRpdGlvbnMucHVzaChpbGlrZShjb21pY3MuYXV0aG9yLCBgJSR7YXV0aG9yfSVgKSk7XG4gICAgfVxuICAgIFxuICAgIGlmIChzZWFyY2gpIHtcbiAgICAgIHdoZXJlQ29uZGl0aW9ucy5wdXNoKFxuICAgICAgICBzcWxgKCR7Y29taWNzLnRpdGxlfSBJTElLRSAke2AlJHtzZWFyY2h9JWB9IE9SICR7Y29taWNzLmRlc2NyaXB0aW9ufSBJTElLRSAke2AlJHtzZWFyY2h9JWB9KWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3JkZXJCeSA9IHNvcnRCeSA9PT0gJ3RpdGxlJyA/IGFzYyhjb21pY3MudGl0bGUpIDogZGVzYyhjb21pY3MuY3JlYXRlZEF0KTtcblxuICAgIGNvbnN0IGNvbWljc0xpc3QgPSBhd2FpdCBkYlxuICAgICAgLnNlbGVjdCh7XG4gICAgICAgIGlkOiBjb21pY3MuaWQsXG4gICAgICAgIHRpdGxlOiBjb21pY3MudGl0bGUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBjb21pY3MuZGVzY3JpcHRpb24sXG4gICAgICAgIGF1dGhvcjogY29taWNzLmF1dGhvcixcbiAgICAgICAgYXJ0aXN0OiBjb21pY3MuYXJ0aXN0LFxuICAgICAgICBwdWJsaXNoZXI6IGNvbWljcy5wdWJsaXNoZXIsXG4gICAgICAgIGdlbnJlOiBjb21pY3MuZ2VucmUsXG4gICAgICAgIGNvdmVyVXJsOiBjb21pY3MuY292ZXJVcmwsXG4gICAgICAgIHRvdGFsUGFnZXM6IGNvbWljcy50b3RhbFBhZ2VzLFxuICAgICAgICBwcmljZTogY29taWNzLnByaWNlLFxuICAgICAgICBpc0ZyZWVtaXVtOiBjb21pY3MuaXNGcmVlbWl1bSxcbiAgICAgICAgZnJlZVBhZ2VDb3VudDogY29taWNzLmZyZWVQYWdlQ291bnQsXG4gICAgICAgIHB1Ymxpc2hlZEF0OiBjb21pY3MucHVibGlzaGVkQXQsXG4gICAgICAgIGNyZWF0ZWRBdDogY29taWNzLmNyZWF0ZWRBdCxcbiAgICAgIH0pXG4gICAgICAuZnJvbShjb21pY3MpXG4gICAgICAud2hlcmUoYW5kKC4uLndoZXJlQ29uZGl0aW9ucykpXG4gICAgICAub3JkZXJCeShvcmRlckJ5KVxuICAgICAgLmxpbWl0KHBhcnNlSW50KGxpbWl0KSlcbiAgICAgIC5vZmZzZXQob2Zmc2V0KTtcblxuICAgIGNvbnN0IHRvdGFsQ291bnQgPSBhd2FpdCBkYlxuICAgICAgLnNlbGVjdCh7IGNvdW50OiBzcWxgY291bnQoKilgIH0pXG4gICAgICAuZnJvbShjb21pY3MpXG4gICAgICAud2hlcmUoYW5kKC4uLndoZXJlQ29uZGl0aW9ucykpO1xuXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGNvbWljczogY29taWNzTGlzdCxcbiAgICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICAgIHBhZ2U6IHBhcnNlSW50KHBhZ2UpLFxuICAgICAgICAgIGxpbWl0OiBwYXJzZUludChsaW1pdCksXG4gICAgICAgICAgdG90YWw6IHRvdGFsQ291bnRbMF0uY291bnQsXG4gICAgICAgICAgdG90YWxQYWdlczogTWF0aC5jZWlsKE51bWJlcih0b3RhbENvdW50WzBdLmNvdW50KSAvIHBhcnNlSW50KGxpbWl0KSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6IFwiQ29taWNzIHJldHJpZXZlZCBzdWNjZXNzZnVsbHlcIlxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgY29uc29sZS5lcnJvcihcIkdldCBjb21pY3MgZXJyb3I6XCIsIGVycm9yKTtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogXCJJbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcIixcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIEdldCBzcGVjaWZpYyBjb21pYyBkZXRhaWxzXG5leHBvcnQgY29uc3QgZ2V0Q29taWMgPSBhc3luYyAocmVxOiBhbnksIHJlczogYW55KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlcklkO1xuXG4gICAgY29uc3QgW2NvbWljXSA9IGF3YWl0IGRiXG4gICAgICAuc2VsZWN0KClcbiAgICAgIC5mcm9tKGNvbWljcylcbiAgICAgIC53aGVyZShhbmQoZXEoY29taWNzLmlkLCBpZCksIGVxKGNvbWljcy5pc0FjdGl2ZSwgdHJ1ZSkpKTtcblxuICAgIGlmICghY29taWMpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogXCJDb21pYyBub3QgZm91bmRcIixcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHVzZXIgaGFzIHB1cmNoYXNlZCB0aGlzIGNvbWljXG4gICAgbGV0IGhhc1B1cmNoYXNlZCA9IGZhbHNlO1xuICAgIGlmICh1c2VySWQpIHtcbiAgICAgIGNvbnN0IHB1cmNoYXNlID0gYXdhaXQgZGJcbiAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgIC5mcm9tKGNvbWljUHVyY2hhc2VzKVxuICAgICAgICAud2hlcmUoYW5kKGVxKGNvbWljUHVyY2hhc2VzLnVzZXJJZCwgdXNlcklkKSwgZXEoY29taWNQdXJjaGFzZXMuY29taWNJZCwgaWQpKSk7XG4gICAgICBoYXNQdXJjaGFzZWQgPSBwdXJjaGFzZS5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIC8vIEdldCB1c2VyJ3MgcmVhZGluZyBwcm9ncmVzc1xuICAgIGxldCBwcm9ncmVzcyA9IG51bGw7XG4gICAgaWYgKHVzZXJJZCkge1xuICAgICAgY29uc3QgW3VzZXJQcm9ncmVzc10gPSBhd2FpdCBkYlxuICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgLmZyb20ocmVhZGluZ1Byb2dyZXNzKVxuICAgICAgICAud2hlcmUoYW5kKGVxKHJlYWRpbmdQcm9ncmVzcy51c2VySWQsIHVzZXJJZCksIGVxKHJlYWRpbmdQcm9ncmVzcy5jb21pY0lkLCBpZCkpKTtcbiAgICAgIHByb2dyZXNzID0gdXNlclByb2dyZXNzIHx8IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGNvbWljLFxuICAgICAgICBoYXNQdXJjaGFzZWQsXG4gICAgICAgIHByb2dyZXNzXG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogXCJDb21pYyByZXRyaWV2ZWQgc3VjY2Vzc2Z1bGx5XCJcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJHZXQgY29taWMgZXJyb3I6XCIsIGVycm9yKTtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogXCJJbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcIixcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIEdldCBjb21pYyBwYWdlcyAod2l0aCBhY2Nlc3MgY29udHJvbClcbmV4cG9ydCBjb25zdCBnZXRDb21pY1BhZ2VzID0gYXN5bmMgKHJlcTogYW55LCByZXM6IGFueSkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHsgaWQgfSA9IHJlcS5wYXJhbXM7XG4gICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXJJZDtcblxuICAgIC8vIEdldCBjb21pYyBkZXRhaWxzXG4gICAgY29uc3QgW2NvbWljXSA9IGF3YWl0IGRiXG4gICAgICAuc2VsZWN0KClcbiAgICAgIC5mcm9tKGNvbWljcylcbiAgICAgIC53aGVyZShhbmQoZXEoY29taWNzLmlkLCBpZCksIGVxKGNvbWljcy5pc0FjdGl2ZSwgdHJ1ZSkpKTtcblxuICAgIGlmICghY29taWMpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogXCJDb21pYyBub3QgZm91bmRcIixcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHVzZXIgaGFzIHB1cmNoYXNlZCB0aGlzIGNvbWljIG9yIGlmIGl0J3MgZnJlZW1pdW1cbiAgICBsZXQgaGFzUHVyY2hhc2VkID0gZmFsc2U7XG4gICAgaWYgKHVzZXJJZCkge1xuICAgICAgY29uc3QgcHVyY2hhc2UgPSBhd2FpdCBkYlxuICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgLmZyb20oY29taWNQdXJjaGFzZXMpXG4gICAgICAgIC53aGVyZShhbmQoZXEoY29taWNQdXJjaGFzZXMudXNlcklkLCB1c2VySWQpLCBlcShjb21pY1B1cmNoYXNlcy5jb21pY0lkLCBpZCkpKTtcbiAgICAgIGhhc1B1cmNoYXNlZCA9IHB1cmNoYXNlLmxlbmd0aCA+IDA7XG4gICAgfVxuXG4gICAgbGV0IHBhZ2VzO1xuICAgIGlmIChoYXNQdXJjaGFzZWQgfHwgY29taWMuaXNGcmVlbWl1bSkge1xuICAgICAgLy8gUmV0dXJuIGFsbCBwYWdlcyBmb3IgcHVyY2hhc2VkIGNvbWljcyBvciBmcmVlIGNvbWljc1xuICAgICAgcGFnZXMgPSBhd2FpdCBkYlxuICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgLmZyb20oY29taWNQYWdlcylcbiAgICAgICAgLndoZXJlKGVxKGNvbWljUGFnZXMuY29taWNJZCwgaWQpKVxuICAgICAgICAub3JkZXJCeShhc2MoY29taWNQYWdlcy5wYWdlTnVtYmVyKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJldHVybiBvbmx5IHByZXZpZXcgcGFnZXMgZm9yIG5vbi1wdXJjaGFzZWQgY29taWNzXG4gICAgICBwYWdlcyA9IGF3YWl0IGRiXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuZnJvbShjb21pY1BhZ2VzKVxuICAgICAgICAud2hlcmUoYW5kKFxuICAgICAgICAgIGVxKGNvbWljUGFnZXMuY29taWNJZCwgaWQpLFxuICAgICAgICAgIGVxKGNvbWljUGFnZXMuaXNQcmV2aWV3LCB0cnVlKVxuICAgICAgICApKVxuICAgICAgICAub3JkZXJCeShhc2MoY29taWNQYWdlcy5wYWdlTnVtYmVyKSlcbiAgICAgICAgLmxpbWl0KGNvbWljLmZyZWVQYWdlQ291bnQpO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YToge1xuICAgICAgICBwYWdlcyxcbiAgICAgICAgdG90YWxQYWdlczogY29taWMudG90YWxQYWdlcyxcbiAgICAgICAgYWNjZXNzTGV2ZWw6IGhhc1B1cmNoYXNlZCA/ICdmdWxsJyA6IChjb21pYy5pc0ZyZWVtaXVtID8gJ2ZyZWUnIDogJ3ByZXZpZXcnKVxuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6IFwiQ29taWMgcGFnZXMgcmV0cmlldmVkIHN1Y2Nlc3NmdWxseVwiXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiR2V0IGNvbWljIHBhZ2VzIGVycm9yOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IFwiSW50ZXJuYWwgc2VydmVyIGVycm9yXCIsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIH0pO1xuICB9XG59O1xuXG4vLyBVcGRhdGUgcmVhZGluZyBwcm9ncmVzc1xuZXhwb3J0IGNvbnN0IHVwZGF0ZVJlYWRpbmdQcm9ncmVzcyA9IGFzeW5jIChyZXE6IGFueSwgcmVzOiBhbnkpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuICAgIGNvbnN0IHsgY3VycmVudFBhZ2UgfSA9IHJlcS5ib2R5O1xuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VySWQ7XG5cbiAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiBcIkF1dGhlbnRpY2F0aW9uIHJlcXVpcmVkXCIsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBbY29taWNdID0gYXdhaXQgZGJcbiAgICAgIC5zZWxlY3QoKVxuICAgICAgLmZyb20oY29taWNzKVxuICAgICAgLndoZXJlKGVxKGNvbWljcy5pZCwgaWQpKTtcblxuICAgIGlmICghY29taWMpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogXCJDb21pYyBub3QgZm91bmRcIixcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHByb2dyZXNzIGVudHJ5IGV4aXN0c1xuICAgIGNvbnN0IFtleGlzdGluZ1Byb2dyZXNzXSA9IGF3YWl0IGRiXG4gICAgICAuc2VsZWN0KClcbiAgICAgIC5mcm9tKHJlYWRpbmdQcm9ncmVzcylcbiAgICAgIC53aGVyZShhbmQoZXEocmVhZGluZ1Byb2dyZXNzLnVzZXJJZCwgdXNlcklkKSwgZXEocmVhZGluZ1Byb2dyZXNzLmNvbWljSWQsIGlkKSkpO1xuXG4gICAgY29uc3QgaXNDb21wbGV0ZWQgPSBjdXJyZW50UGFnZSA+PSBjb21pYy50b3RhbFBhZ2VzO1xuICAgIGNvbnN0IHByb2dyZXNzRGF0YSA9IHtcbiAgICAgIHVzZXJJZCxcbiAgICAgIGNvbWljSWQ6IGlkLFxuICAgICAgY3VycmVudFBhZ2UsXG4gICAgICB0b3RhbFBhZ2VzOiBjb21pYy50b3RhbFBhZ2VzLFxuICAgICAgY29tcGxldGVkQXQ6IGlzQ29tcGxldGVkID8gbmV3IERhdGUoKSA6IG51bGwsXG4gICAgICBsYXN0UmVhZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgIH07XG5cbiAgICBsZXQgdXBkYXRlZFByb2dyZXNzO1xuICAgIGlmIChleGlzdGluZ1Byb2dyZXNzKSB7XG4gICAgICBbdXBkYXRlZFByb2dyZXNzXSA9IGF3YWl0IGRiXG4gICAgICAgIC51cGRhdGUocmVhZGluZ1Byb2dyZXNzKVxuICAgICAgICAuc2V0KHtcbiAgICAgICAgICBjdXJyZW50UGFnZSxcbiAgICAgICAgICBjb21wbGV0ZWRBdDogaXNDb21wbGV0ZWQgPyBuZXcgRGF0ZSgpIDogbnVsbCxcbiAgICAgICAgICBsYXN0UmVhZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgfSlcbiAgICAgICAgLndoZXJlKGVxKHJlYWRpbmdQcm9ncmVzcy5pZCwgZXhpc3RpbmdQcm9ncmVzcy5pZCkpXG4gICAgICAgIC5yZXR1cm5pbmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgW3VwZGF0ZWRQcm9ncmVzc10gPSBhd2FpdCBkYlxuICAgICAgICAuaW5zZXJ0KHJlYWRpbmdQcm9ncmVzcylcbiAgICAgICAgLnZhbHVlcyhwcm9ncmVzc0RhdGEpXG4gICAgICAgIC5yZXR1cm5pbmcoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHVwZGF0ZWRQcm9ncmVzcyxcbiAgICAgIG1lc3NhZ2U6IFwiUmVhZGluZyBwcm9ncmVzcyB1cGRhdGVkIHN1Y2Nlc3NmdWxseVwiXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiVXBkYXRlIHJlYWRpbmcgcHJvZ3Jlc3MgZXJyb3I6XCIsIGVycm9yKTtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogXCJJbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcIixcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIEdldCB1c2VyJ3MgcmVhZGluZyBoaXN0b3J5XG5leHBvcnQgY29uc3QgZ2V0UmVhZGluZ0hpc3RvcnkgPSBhc3luYyAocmVxOiBhbnksIHJlczogYW55KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXJJZDtcblxuICAgIGlmICghdXNlcklkKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IFwiQXV0aGVudGljYXRpb24gcmVxdWlyZWRcIixcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGhpc3RvcnkgPSBhd2FpdCBkYlxuICAgICAgLnNlbGVjdCh7XG4gICAgICAgIGlkOiByZWFkaW5nUHJvZ3Jlc3MuaWQsXG4gICAgICAgIGN1cnJlbnRQYWdlOiByZWFkaW5nUHJvZ3Jlc3MuY3VycmVudFBhZ2UsXG4gICAgICAgIHRvdGFsUGFnZXM6IHJlYWRpbmdQcm9ncmVzcy50b3RhbFBhZ2VzLFxuICAgICAgICBjb21wbGV0ZWRBdDogcmVhZGluZ1Byb2dyZXNzLmNvbXBsZXRlZEF0LFxuICAgICAgICBsYXN0UmVhZEF0OiByZWFkaW5nUHJvZ3Jlc3MubGFzdFJlYWRBdCxcbiAgICAgICAgY29taWM6IHtcbiAgICAgICAgICBpZDogY29taWNzLmlkLFxuICAgICAgICAgIHRpdGxlOiBjb21pY3MudGl0bGUsXG4gICAgICAgICAgYXV0aG9yOiBjb21pY3MuYXV0aG9yLFxuICAgICAgICAgIGNvdmVyVXJsOiBjb21pY3MuY292ZXJVcmwsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuZnJvbShyZWFkaW5nUHJvZ3Jlc3MpXG4gICAgICAuaW5uZXJKb2luKGNvbWljcywgZXEocmVhZGluZ1Byb2dyZXNzLmNvbWljSWQsIGNvbWljcy5pZCkpXG4gICAgICAud2hlcmUoZXEocmVhZGluZ1Byb2dyZXNzLnVzZXJJZCwgdXNlcklkKSlcbiAgICAgIC5vcmRlckJ5KGRlc2MocmVhZGluZ1Byb2dyZXNzLmxhc3RSZWFkQXQpKTtcblxuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YTogaGlzdG9yeSxcbiAgICAgIG1lc3NhZ2U6IFwiUmVhZGluZyBoaXN0b3J5IHJldHJpZXZlZCBzdWNjZXNzZnVsbHlcIlxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgY29uc29sZS5lcnJvcihcIkdldCByZWFkaW5nIGhpc3RvcnkgZXJyb3I6XCIsIGVycm9yKTtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogXCJJbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcIixcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIEFkZCBjb21pYyByZXZpZXdcbmV4cG9ydCBjb25zdCBhZGRDb21pY1JldmlldyA9IGFzeW5jIChyZXE6IGFueSwgcmVzOiBhbnkpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuICAgIGNvbnN0IHsgcmF0aW5nLCByZXZpZXcgfSA9IHJlcS5ib2R5O1xuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VySWQ7XG5cbiAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiBcIkF1dGhlbnRpY2F0aW9uIHJlcXVpcmVkXCIsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXJhdGluZyB8fCByYXRpbmcgPCAxIHx8IHJhdGluZyA+IDUpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogXCJSYXRpbmcgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDVcIixcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIGNvbWljIGV4aXN0c1xuICAgIGNvbnN0IFtjb21pY10gPSBhd2FpdCBkYlxuICAgICAgLnNlbGVjdCgpXG4gICAgICAuZnJvbShjb21pY3MpXG4gICAgICAud2hlcmUoZXEoY29taWNzLmlkLCBpZCkpO1xuXG4gICAgaWYgKCFjb21pYykge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiBcIkNvbWljIG5vdCBmb3VuZFwiLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgdXNlciBhbHJlYWR5IHJldmlld2VkIHRoaXMgY29taWNcbiAgICBjb25zdCBbZXhpc3RpbmdSZXZpZXddID0gYXdhaXQgZGJcbiAgICAgIC5zZWxlY3QoKVxuICAgICAgLmZyb20oY29taWNSZXZpZXdzKVxuICAgICAgLndoZXJlKGFuZChlcShjb21pY1Jldmlld3MudXNlcklkLCB1c2VySWQpLCBlcShjb21pY1Jldmlld3MuY29taWNJZCwgaWQpKSk7XG5cbiAgICBsZXQgcmV2aWV3UmVzdWx0O1xuICAgIGlmIChleGlzdGluZ1Jldmlldykge1xuICAgICAgW3Jldmlld1Jlc3VsdF0gPSBhd2FpdCBkYlxuICAgICAgICAudXBkYXRlKGNvbWljUmV2aWV3cylcbiAgICAgICAgLnNldCh7XG4gICAgICAgICAgcmF0aW5nLFxuICAgICAgICAgIHJldmlldyxcbiAgICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICAgIH0pXG4gICAgICAgIC53aGVyZShlcShjb21pY1Jldmlld3MuaWQsIGV4aXN0aW5nUmV2aWV3LmlkKSlcbiAgICAgICAgLnJldHVybmluZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBbcmV2aWV3UmVzdWx0XSA9IGF3YWl0IGRiXG4gICAgICAgIC5pbnNlcnQoY29taWNSZXZpZXdzKVxuICAgICAgICAudmFsdWVzKHtcbiAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgY29taWNJZDogaWQsXG4gICAgICAgICAgcmF0aW5nLFxuICAgICAgICAgIHJldmlldyxcbiAgICAgICAgfSlcbiAgICAgICAgLnJldHVybmluZygpO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YTogcmV2aWV3UmVzdWx0LFxuICAgICAgbWVzc2FnZTogZXhpc3RpbmdSZXZpZXcgPyBcIlJldmlldyB1cGRhdGVkIHN1Y2Nlc3NmdWxseVwiIDogXCJSZXZpZXcgYWRkZWQgc3VjY2Vzc2Z1bGx5XCJcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJBZGQgY29taWMgcmV2aWV3IGVycm9yOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IFwiSW50ZXJuYWwgc2VydmVyIGVycm9yXCIsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIH0pO1xuICB9XG59OyJdfQ==