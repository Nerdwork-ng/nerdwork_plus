import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import morgan from 'morgan';
export const setupMiddleware = (app) => {
    // Security middleware
    app.use(helmet());
    // CORS configuration
    app.use(cors({
        origin: process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000'],
        credentials: true,
    }));
    // Compression
    app.use(compression());
    // Logging
    app.use(morgan('combined'));
    // Parse JSON bodies
    app.use('/api', (req, res, next) => {
        // Skip JSON parsing for file uploads
        if (req.path.includes('/upload') && req.method === 'POST') {
            return next();
        }
        return require('express').json({ limit: '10mb' })(req, res, next);
    });
    // Parse URL-encoded bodies
    app.use('/api', require('express').urlencoded({ extended: true, limit: '10mb' }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxXQUFXLE1BQU0sYUFBYSxDQUFDO0FBQ3RDLE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUU1QixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBRTtJQUMxQyxzQkFBc0I7SUFDdEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBRWxCLHFCQUFxQjtJQUNyQixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztRQUNYLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztRQUM1RSxXQUFXLEVBQUUsSUFBSTtLQUNsQixDQUFDLENBQUMsQ0FBQztJQUVKLGNBQWM7SUFDZCxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFFdkIsVUFBVTtJQUNWLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFFNUIsb0JBQW9CO0lBQ3BCLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBUSxFQUFFLEdBQVEsRUFBRSxJQUFTLEVBQUUsRUFBRTtRQUNoRCxxQ0FBcUM7UUFDckMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBRSxDQUFDO1lBQzFELE9BQU8sSUFBSSxFQUFFLENBQUM7UUFDaEIsQ0FBQztRQUNELE9BQU8sT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEUsQ0FBQyxDQUFDLENBQUM7SUFFSCwyQkFBMkI7SUFDM0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNwRixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29ycyBmcm9tICdjb3JzJztcclxuaW1wb3J0IGhlbG1ldCBmcm9tICdoZWxtZXQnO1xyXG5pbXBvcnQgY29tcHJlc3Npb24gZnJvbSAnY29tcHJlc3Npb24nO1xyXG5pbXBvcnQgbW9yZ2FuIGZyb20gJ21vcmdhbic7XHJcblxyXG5leHBvcnQgY29uc3Qgc2V0dXBNaWRkbGV3YXJlID0gKGFwcDogYW55KSA9PiB7XHJcbiAgLy8gU2VjdXJpdHkgbWlkZGxld2FyZVxyXG4gIGFwcC51c2UoaGVsbWV0KCkpO1xyXG4gIFxyXG4gIC8vIENPUlMgY29uZmlndXJhdGlvblxyXG4gIGFwcC51c2UoY29ycyh7XHJcbiAgICBvcmlnaW46IHByb2Nlc3MuZW52LkFMTE9XRURfT1JJR0lOUz8uc3BsaXQoJywnKSB8fCBbJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCddLFxyXG4gICAgY3JlZGVudGlhbHM6IHRydWUsXHJcbiAgfSkpO1xyXG4gIFxyXG4gIC8vIENvbXByZXNzaW9uXHJcbiAgYXBwLnVzZShjb21wcmVzc2lvbigpKTtcclxuICBcclxuICAvLyBMb2dnaW5nXHJcbiAgYXBwLnVzZShtb3JnYW4oJ2NvbWJpbmVkJykpO1xyXG4gIFxyXG4gIC8vIFBhcnNlIEpTT04gYm9kaWVzXHJcbiAgYXBwLnVzZSgnL2FwaScsIChyZXE6IGFueSwgcmVzOiBhbnksIG5leHQ6IGFueSkgPT4ge1xyXG4gICAgLy8gU2tpcCBKU09OIHBhcnNpbmcgZm9yIGZpbGUgdXBsb2Fkc1xyXG4gICAgaWYgKHJlcS5wYXRoLmluY2x1ZGVzKCcvdXBsb2FkJykgJiYgcmVxLm1ldGhvZCA9PT0gJ1BPU1QnKSB7XHJcbiAgICAgIHJldHVybiBuZXh0KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVxdWlyZSgnZXhwcmVzcycpLmpzb24oeyBsaW1pdDogJzEwbWInIH0pKHJlcSwgcmVzLCBuZXh0KTtcclxuICB9KTtcclxuICBcclxuICAvLyBQYXJzZSBVUkwtZW5jb2RlZCBib2RpZXNcclxuICBhcHAudXNlKCcvYXBpJywgcmVxdWlyZSgnZXhwcmVzcycpLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSwgbGltaXQ6ICcxMG1iJyB9KSk7XHJcbn07Il19