import axios from 'axios';
import FormData from 'form-data';
class PinataService {
    config;
    constructor(config) {
        this.config = config;
    }
    async uploadFile(fileBuffer, filename, options) {
        try {
            const formData = new FormData();
            formData.append('file', fileBuffer, {
                filename,
                contentType: this.getMimeType(filename),
            });
            if (options?.metadata) {
                formData.append('pinataMetadata', JSON.stringify({
                    name: filename,
                    ...options.metadata
                }));
            }
            if (options?.pinataOptions) {
                formData.append('pinataOptions', JSON.stringify(options.pinataOptions));
            }
            const response = await axios.post(`${this.config.baseUrl}/pinning/pinFileToIPFS`, formData, {
                headers: {
                    'Authorization': `Bearer ${this.config.apiKey}`,
                    ...formData.getHeaders(),
                },
            });
            return {
                ...response.data,
                originalname: filename,
                mimetype: this.getMimeType(filename),
            };
        }
        catch (error) {
            console.error('Pinata upload file error:', error.response?.data || error.message);
            throw new Error(`Failed to upload file to IPFS: ${error.response?.data?.message || error.message}`);
        }
    }
    async uploadJson(jsonObject, options) {
        try {
            const data = {
                pinataContent: jsonObject,
                pinataMetadata: options?.metadata || {},
                pinataOptions: options?.pinataOptions || {}
            };
            const response = await axios.post(`${this.config.baseUrl}/pinning/pinJSONToIPFS`, data, {
                headers: {
                    'Authorization': `Bearer ${this.config.apiKey}`,
                    'Content-Type': 'application/json',
                },
            });
            return {
                ...response.data,
                metadata: jsonObject,
            };
        }
        catch (error) {
            console.error('Pinata upload JSON error:', error.response?.data || error.message);
            throw new Error(`Failed to upload JSON to IPFS: ${error.response?.data?.message || error.message}`);
        }
    }
    async unpinFile(ipfsHash) {
        try {
            await axios.delete(`${this.config.baseUrl}/pinning/unpin/${ipfsHash}`, {
                headers: {
                    'Authorization': `Bearer ${this.config.apiKey}`,
                },
            });
        }
        catch (error) {
            console.error('Pinata unpin error:', error.response?.data || error.message);
            throw new Error(`Failed to unpin file from IPFS: ${error.response?.data?.message || error.message}`);
        }
    }
    async getPinnedFiles(options) {
        try {
            const params = new URLSearchParams();
            if (options?.status)
                params.append('status', options.status);
            if (options?.pageLimit)
                params.append('pageLimit', options.pageLimit.toString());
            if (options?.pageOffset)
                params.append('pageOffset', options.pageOffset.toString());
            if (options?.metadata) {
                Object.entries(options.metadata).forEach(([key, value]) => {
                    params.append(`metadata[${key}]`, value);
                });
            }
            const response = await axios.get(`${this.config.baseUrl}/data/pinList?${params.toString()}`, {
                headers: {
                    'Authorization': `Bearer ${this.config.apiKey}`,
                },
            });
            return response.data;
        }
        catch (error) {
            console.error('Pinata get pinned files error:', error.response?.data || error.message);
            throw new Error(`Failed to get pinned files: ${error.response?.data?.message || error.message}`);
        }
    }
    getGatewayUrl(ipfsHash, isDedicated = false) {
        if (isDedicated && process.env.PINATA_DEDICATED_GATEWAY) {
            return `https://${process.env.PINATA_DEDICATED_GATEWAY}/ipfs/${ipfsHash}`;
        }
        return `https://gateway.pinata.cloud/ipfs/${ipfsHash}`;
    }
    getMimeType(filename) {
        const ext = filename.toLowerCase().split('.').pop();
        const mimeTypes = {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'gif': 'image/gif',
            'webp': 'image/webp',
            'pdf': 'application/pdf',
            'json': 'application/json',
            'txt': 'text/plain',
            'mp4': 'video/mp4',
            'webm': 'video/webm',
            'mp3': 'audio/mpeg',
            'wav': 'audio/wav',
        };
        return mimeTypes[ext || ''] || 'application/octet-stream';
    }
}
export default PinataService;
//# sourceMappingURL=data:application/json;base64,