import { Router } from "express";
import { getWallet, getTransactionHistory, getNwtPricing, purchaseNwtTokens, spendNwtTokens, addPaymentMethod, getPaymentMethods } from "../controller/wallet.js";
import { connectCryptoWallet, purchaseNwtWithCrypto, handleHelioWebhook, checkCryptoPaymentStatus } from "../controller/crypto-wallet.js";
import { authenticate } from "../middleware/auth.js";
const router = Router();
// Wallet routes (all require authentication)
router.get("/", authenticate, getWallet);
router.get("/transactions", authenticate, getTransactionHistory);
router.get("/pricing", getNwtPricing); // Public route for pricing
router.post("/purchase", authenticate, purchaseNwtTokens);
router.post("/spend", authenticate, spendNwtTokens);
// Payment method routes
router.get("/payment-methods", authenticate, getPaymentMethods);
router.post("/payment-methods", authenticate, addPaymentMethod);
// Crypto wallet routes
router.post("/crypto/connect", authenticate, connectCryptoWallet);
router.post("/crypto/purchase", authenticate, purchaseNwtWithCrypto);
router.get("/crypto/payment/:paymentId/status", authenticate, checkCryptoPaymentStatus);
// Webhook routes (no auth required)
router.post("/webhooks/helio", handleHelioWebhook);
export default router;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0LnJvdXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndhbGxldC5yb3V0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNqQyxPQUFPLEVBQ0wsU0FBUyxFQUNULHFCQUFxQixFQUNyQixhQUFhLEVBQ2IsaUJBQWlCLEVBQ2pCLGNBQWMsRUFDZCxnQkFBZ0IsRUFDaEIsaUJBQWlCLEVBQ2xCLE1BQU0seUJBQXlCLENBQUM7QUFDakMsT0FBTyxFQUNMLG1CQUFtQixFQUNuQixxQkFBcUIsRUFDckIsa0JBQWtCLEVBQ2xCLHdCQUF3QixFQUN6QixNQUFNLGdDQUFnQyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUVyRCxNQUFNLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUV4Qiw2Q0FBNkM7QUFDN0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3pDLE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLFlBQVksRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0FBQ2pFLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsMkJBQTJCO0FBQ2xFLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFlBQVksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0FBQzFELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxjQUFjLENBQUMsQ0FBQztBQUVwRCx3QkFBd0I7QUFDeEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxZQUFZLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUNoRSxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBRWhFLHVCQUF1QjtBQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLFlBQVksRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsWUFBWSxFQUFFLHFCQUFxQixDQUFDLENBQUM7QUFDckUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsRUFBRSxZQUFZLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztBQUV4RixvQ0FBb0M7QUFDcEMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0FBRW5ELGVBQWUsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm91dGVyIH0gZnJvbSBcImV4cHJlc3NcIjtcclxuaW1wb3J0IHsgXHJcbiAgZ2V0V2FsbGV0LCBcclxuICBnZXRUcmFuc2FjdGlvbkhpc3RvcnksIFxyXG4gIGdldE53dFByaWNpbmcsXHJcbiAgcHVyY2hhc2VOd3RUb2tlbnMsXHJcbiAgc3BlbmROd3RUb2tlbnMsXHJcbiAgYWRkUGF5bWVudE1ldGhvZCxcclxuICBnZXRQYXltZW50TWV0aG9kc1xyXG59IGZyb20gXCIuLi9jb250cm9sbGVyL3dhbGxldC5qc1wiO1xyXG5pbXBvcnQge1xyXG4gIGNvbm5lY3RDcnlwdG9XYWxsZXQsXHJcbiAgcHVyY2hhc2VOd3RXaXRoQ3J5cHRvLFxyXG4gIGhhbmRsZUhlbGlvV2ViaG9vayxcclxuICBjaGVja0NyeXB0b1BheW1lbnRTdGF0dXNcclxufSBmcm9tIFwiLi4vY29udHJvbGxlci9jcnlwdG8td2FsbGV0LmpzXCI7XHJcbmltcG9ydCB7IGF1dGhlbnRpY2F0ZSB9IGZyb20gXCIuLi9taWRkbGV3YXJlL2F1dGguanNcIjtcclxuXHJcbmNvbnN0IHJvdXRlciA9IFJvdXRlcigpO1xyXG5cclxuLy8gV2FsbGV0IHJvdXRlcyAoYWxsIHJlcXVpcmUgYXV0aGVudGljYXRpb24pXHJcbnJvdXRlci5nZXQoXCIvXCIsIGF1dGhlbnRpY2F0ZSwgZ2V0V2FsbGV0KTtcclxucm91dGVyLmdldChcIi90cmFuc2FjdGlvbnNcIiwgYXV0aGVudGljYXRlLCBnZXRUcmFuc2FjdGlvbkhpc3RvcnkpO1xyXG5yb3V0ZXIuZ2V0KFwiL3ByaWNpbmdcIiwgZ2V0Tnd0UHJpY2luZyk7IC8vIFB1YmxpYyByb3V0ZSBmb3IgcHJpY2luZ1xyXG5yb3V0ZXIucG9zdChcIi9wdXJjaGFzZVwiLCBhdXRoZW50aWNhdGUsIHB1cmNoYXNlTnd0VG9rZW5zKTtcclxucm91dGVyLnBvc3QoXCIvc3BlbmRcIiwgYXV0aGVudGljYXRlLCBzcGVuZE53dFRva2Vucyk7XHJcblxyXG4vLyBQYXltZW50IG1ldGhvZCByb3V0ZXNcclxucm91dGVyLmdldChcIi9wYXltZW50LW1ldGhvZHNcIiwgYXV0aGVudGljYXRlLCBnZXRQYXltZW50TWV0aG9kcyk7XHJcbnJvdXRlci5wb3N0KFwiL3BheW1lbnQtbWV0aG9kc1wiLCBhdXRoZW50aWNhdGUsIGFkZFBheW1lbnRNZXRob2QpO1xyXG5cclxuLy8gQ3J5cHRvIHdhbGxldCByb3V0ZXNcclxucm91dGVyLnBvc3QoXCIvY3J5cHRvL2Nvbm5lY3RcIiwgYXV0aGVudGljYXRlLCBjb25uZWN0Q3J5cHRvV2FsbGV0KTtcclxucm91dGVyLnBvc3QoXCIvY3J5cHRvL3B1cmNoYXNlXCIsIGF1dGhlbnRpY2F0ZSwgcHVyY2hhc2VOd3RXaXRoQ3J5cHRvKTtcclxucm91dGVyLmdldChcIi9jcnlwdG8vcGF5bWVudC86cGF5bWVudElkL3N0YXR1c1wiLCBhdXRoZW50aWNhdGUsIGNoZWNrQ3J5cHRvUGF5bWVudFN0YXR1cyk7XHJcblxyXG4vLyBXZWJob29rIHJvdXRlcyAobm8gYXV0aCByZXF1aXJlZClcclxucm91dGVyLnBvc3QoXCIvd2ViaG9va3MvaGVsaW9cIiwgaGFuZGxlSGVsaW9XZWJob29rKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjsiXX0=