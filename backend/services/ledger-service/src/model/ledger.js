import { pgTable, uuid, text, timestamp, decimal, boolean, json, integer, unique } from 'drizzle-orm/pg-core';
import { authUsers } from './auth.js';
// Chart of Accounts - defines all account types
export const accounts = pgTable('accounts', {
    id: uuid('id').primaryKey().defaultRandom(),
    code: text('code').notNull().unique(), // e.g., '1000', '2000', '3000'
    name: text('name').notNull(), // e.g., 'Cash', 'NWT Token Inventory', 'User Deposits'
    type: text('type').notNull(), // 'asset', 'liability', 'equity', 'revenue', 'expense'
    parentAccountId: uuid('parent_account_id').references(() => accounts.id),
    normalBalance: text('normal_balance').notNull(), // 'debit' or 'credit'
    description: text('description'),
    isActive: boolean('is_active').notNull().default(true),
    level: integer('level').notNull().default(1), // Account hierarchy level
    fullPath: text('full_path').notNull(), // e.g., "Assets > Current Assets > Cash"
    createdAt: timestamp('created_at', { mode: 'date' }).notNull().defaultNow(),
    updatedAt: timestamp('updated_at', { mode: 'date' }).notNull().defaultNow(),
});
// Double-Entry Ledger Entries
export const ledgerEntries = pgTable('ledger_entries', {
    id: uuid('id').primaryKey().defaultRandom(),
    transactionId: uuid('transaction_id').notNull(), // Groups related entries
    userId: uuid('user_id').references(() => authUsers.id), // Optional: user associated with entry
    accountId: uuid('account_id')
        .notNull()
        .references(() => accounts.id),
    debitAmount: decimal('debit_amount', { precision: 18, scale: 8 }).notNull().default('0.00000000'),
    creditAmount: decimal('credit_amount', { precision: 18, scale: 8 }).notNull().default('0.00000000'),
    description: text('description').notNull(),
    referenceType: text('reference_type'), // 'nwt_purchase', 'comic_purchase', 'event_ticket'
    referenceId: text('reference_id'), // ID of the related transaction
    metadata: json('metadata'), // Additional context data
    entryDate: timestamp('entry_date', { mode: 'date' }).notNull().defaultNow(),
    isReversed: boolean('is_reversed').notNull().default(false),
    reversedBy: uuid('reversed_by').references(() => ledgerEntries.id),
    createdAt: timestamp('created_at', { mode: 'date' }).notNull().defaultNow(),
});
// Transaction Headers (groups ledger entries)
export const transactions = pgTable('transactions', {
    id: uuid('id').primaryKey().defaultRandom(),
    description: text('description').notNull(),
    type: text('type').notNull(), // 'nwt_purchase', 'comic_purchase', 'event_ticket', etc.
    userId: uuid('user_id').references(() => authUsers.id),
    totalAmount: decimal('total_amount', { precision: 18, scale: 8 }).notNull(),
    currency: text('currency').notNull().default('NWT'),
    status: text('status').notNull().default('completed'), // 'pending', 'completed', 'reversed'
    referenceId: text('reference_id'), // External reference (Stripe payment, etc.)
    isReversed: boolean('is_reversed').notNull().default(false),
    reversedBy: uuid('reversed_by').references(() => transactions.id),
    transactionDate: timestamp('transaction_date', { mode: 'date' }).notNull().defaultNow(),
    metadata: json('metadata'),
    createdAt: timestamp('created_at', { mode: 'date' }).notNull().defaultNow(),
    updatedAt: timestamp('updated_at', { mode: 'date' }).notNull().defaultNow(),
});
// Account Balances (cached for performance)
export const accountBalances = pgTable('account_balances', {
    id: uuid('id').primaryKey().defaultRandom(),
    accountId: uuid('account_id')
        .notNull()
        .references(() => accounts.id),
    userId: uuid('user_id').references(() => authUsers.id), // For user-specific balances
    debitBalance: decimal('debit_balance', { precision: 18, scale: 8 }).notNull().default('0.00000000'),
    creditBalance: decimal('credit_balance', { precision: 18, scale: 8 }).notNull().default('0.00000000'),
    netBalance: decimal('net_balance', { precision: 18, scale: 8 }).notNull().default('0.00000000'),
    lastUpdated: timestamp('last_updated', { mode: 'date' }).notNull().defaultNow(),
    createdAt: timestamp('created_at', { mode: 'date' }).notNull().defaultNow(),
}, (table) => {
    return {
        unique_account_user: unique().on(table.accountId, table.userId)
    };
});
// Audit Trail
export const auditTrail = pgTable('audit_trail', {
    id: uuid('id').primaryKey().defaultRandom(),
    tableName: text('table_name').notNull(),
    recordId: text('record_id').notNull(),
    action: text('action').notNull(), // 'insert', 'update', 'delete'
    oldValues: json('old_values'),
    newValues: json('new_values'),
    userId: uuid('user_id').references(() => authUsers.id),
    ipAddress: text('ip_address'),
    userAgent: text('user_agent'),
    timestamp: timestamp('timestamp', { mode: 'date' }).notNull().defaultNow(),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVkZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibGVkZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxPQUFPLEVBQ1AsSUFBSSxFQUNKLElBQUksRUFDSixTQUFTLEVBQ1QsT0FBTyxFQUNQLE9BQU8sRUFDUCxJQUFJLEVBQ0osT0FBTyxFQUNQLE1BQU0sRUFDUCxNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFdEMsZ0RBQWdEO0FBQ2hELE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFO0lBQzFDLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsYUFBYSxFQUFFO0lBQzNDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsK0JBQStCO0lBQ3RFLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsdURBQXVEO0lBQ3JGLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsdURBQXVEO0lBQ3JGLGVBQWUsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztJQUN4RSxhQUFhLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsc0JBQXNCO0lBQ3ZFLFdBQVcsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQ2hDLFFBQVEsRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztJQUN0RCxLQUFLLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9B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LEVBQUUsRUFBRTtJQUNYLE9BQU87UUFDTCxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDO0tBQ2hFLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsRUFBRTtJQUMvQyxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLGFBQWEsRUFBRTtJQUMzQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sRUFBRTtJQUN2QyxRQUFRLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sRUFBRTtJQUNyQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLCtCQUErQjtJQUNqRSxTQUFTLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixTQUFTLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO0lBQ3RELFNBQVMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzdCLFNBQVMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzdCLFNBQVMsRUFBRSxTQUFTLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFO0NBQzNFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgcGdUYWJsZSxcclxuICB1dWlkLFxyXG4gIHRleHQsXHJcbiAgdGltZXN0YW1wLFxyXG4gIGRlY2ltYWwsXHJcbiAgYm9vbGVhbixcclxuICBqc29uLFxyXG4gIGludGVnZXIsXHJcbiAgdW5pcXVlXHJcbn0gZnJvbSAnZHJpenpsZS1vcm0vcGctY29yZSc7XHJcbmltcG9ydCB7IGF1dGhVc2VycyB9IGZyb20gJy4vYXV0aC5qcyc7XHJcblxyXG4vLyBDaGFydCBvZiBBY2NvdW50cyAtIGRlZmluZXMgYWxsIGFjY291bnQgdHlwZXNcclxuZXhwb3J0IGNvbnN0IGFjY291bnRzID0gcGdUYWJsZSgnYWNjb3VudHMnLCB7XHJcbiAgaWQ6IHV1aWQoJ2lkJykucHJpbWFyeUtleSgpLmRlZmF1bHRSYW5kb20oKSxcclxuICBjb2RlOiB0ZXh0KCdjb2RlJykubm90TnVsbCgpLnVuaXF1ZSgpLCAvLyBlLmcuLCAnMTAwMCcsICcyMDAwJywgJzMwMDAnXHJcbiAgbmFtZTogdGV4dCgnbmFtZScpLm5vdE51bGwoKSwgLy8gZS5nLiwgJ0Nhc2gnLCAnTldUIFRva2VuIEludmVudG9yeScsICdVc2VyIERlcG9zaXRzJ1xyXG4gIHR5cGU6IHRleHQoJ3R5cGUnKS5ub3ROdWxsKCksIC8vICdhc3NldCcsICdsaWFiaWxpdHknLCAnZXF1aXR5JywgJ3JldmVudWUnLCAnZXhwZW5zZSdcclxuICBwYXJlbnRBY2NvdW50SWQ6IHV1aWQoJ3BhcmVudF9hY2NvdW50X2lkJykucmVmZXJlbmNlcygoKSA9PiBhY2NvdW50cy5pZCksXHJcbiAgbm9ybWFsQmFsYW5jZTogdGV4dCgnbm9ybWFsX2JhbGFuY2UnKS5ub3ROdWxsKCksIC8vICdkZWJpdCcgb3IgJ2NyZWRpdCdcclxuICBkZXNjcmlwdGlvbjogdGV4dCgnZGVzY3JpcHRpb24nKSxcclxuICBpc0FjdGl2ZTogYm9vbGVhbignaXNfYWN0aXZlJykubm90TnVsbCgpLmRlZmF1bHQodHJ1ZSksXHJcbiAgbGV2ZWw6IGludGVnZXIoJ2xldmVsJykubm90TnVsbCgpLmRlZmF1bHQoMSksIC8vIEFjY291bnQgaGllcmFyY2h5IGxldmVsXHJcbiAgZnVsbFBhdGg6IHRleHQoJ2Z1bGxfcGF0aCcpLm5vdE51bGwoKSwgLy8gZS5nLiwgXCJBc3NldHMgPiBDdXJyZW50IEFzc2V0cyA+IENhc2hcIlxyXG4gIGNyZWF0ZWRBdDogdGltZXN0YW1wKCdjcmVhdGVkX2F0JywgeyBtb2RlOiAnZGF0ZScgfSkubm90TnVsbCgpLmRlZmF1bHROb3coKSxcclxuICB1cGRhdGVkQXQ6IHRpbWVzdGFtcCgndXBkYXRlZF9hdCcsIHsgbW9kZTogJ2RhdGUnIH0pLm5vdE51bGwoKS5kZWZhdWx0Tm93KCksXHJcbn0pO1xyXG5cclxuLy8gRG91YmxlLUVudHJ5IExlZGdlciBFbnRyaWVzXHJcbmV4cG9ydCBjb25zdCBsZWRnZXJFbnRyaWVzID0gcGdUYWJsZSgnbGVkZ2VyX2VudHJpZXMnLCB7XHJcbiAgaWQ6IHV1aWQoJ2lkJykucHJpbWFyeUtleSgpLmRlZmF1bHRSYW5kb20oKSxcclxuICB0cmFuc2FjdGlvbklkOiB1dWlkKCd0cmFuc2FjdGlvbl9pZCcpLm5vdE51bGwoKSwgLy8gR3JvdXBzIHJlbGF0ZWQgZW50cmllc1xyXG4gIHVzZXJJZDogdXVpZCgndXNlcl9pZCcpLnJlZmVyZW5jZXMoKCkgPT4gYXV0aFVzZXJzLmlkKSwgLy8gT3B0aW9uYWw6IHVzZXIgYXNzb2NpYXRlZCB3aXRoIGVudHJ5XHJcbiAgYWNjb3VudElkOiB1dWlkKCdhY2NvdW50X2lkJylcclxuICAgIC5ub3ROdWxsKClcclxuICAgIC5yZWZlcmVuY2VzKCgpID0+IGFjY291bnRzLmlkKSxcclxuICBkZWJpdEFtb3VudDogZGVjaW1hbCgnZGViaXRfYW1vdW50JywgeyBwcmVjaXNpb246IDE4LCBzY2FsZTogOCB9KS5ub3ROdWxsKCkuZGVmYXVsdCgnMC4wMDAwMDAwMCcpLFxyXG4gIGNyZWRpdEFtb3VudDogZGVjaW1hbCgnY3JlZGl0X2Ftb3VudCcsIHsgcHJlY2lzaW9uOiAxOCwgc2NhbGU6IDggfSkubm90TnVsbCgpLmRlZmF1bHQoJzAuMDAwMDAwMDAnKSxcclxuICBkZXNjcmlwdGlvbjogdGV4dCgnZGVzY3JpcHRpb24nKS5ub3ROdWxsKCksXHJcbiAgcmVmZXJlbmNlVHlwZTogdGV4dCgncmVmZXJlbmNlX3R5cGUnKSwgLy8gJ253dF9wdXJjaGFzZScsICdjb21pY19wdXJjaGFzZScsICdldmVudF90aWNrZXQnXHJcbiAgcmVmZXJlbmNlSWQ6IHRleHQoJ3JlZmVyZW5jZV9pZCcpLCAvLyBJRCBvZiB0aGUgcmVsYXRlZCB0cmFuc2FjdGlvblxyXG4gIG1ldGFkYXRhOiBqc29uKCdtZXRhZGF0YScpLCAvLyBBZGRpdGlvbmFsIGNvbnRleHQgZGF0YVxyXG4gIGVudHJ5RGF0ZTogdGltZXN0YW1wKCdlbnRyeV9kYXRlJywgeyBtb2RlOiAnZGF0ZScgfSkubm90TnVsbCgpLmRlZmF1bHROb3coKSxcclxuICBpc1JldmVyc2VkOiBib29sZWFuKCdpc19yZXZlcnNlZCcpLm5vdE51bGwoKS5kZWZhdWx0KGZhbHNlKSxcclxuICByZXZlcnNlZEJ5OiB1dWlkKCdyZXZlcnNlZF9ieScpLnJlZmVyZW5jZXMoKCkgPT4gbGVkZ2VyRW50cmllcy5pZCksXHJcbiAgY3JlYXRlZEF0OiB0aW1lc3RhbXAoJ2NyZWF0ZWRfYXQnLCB7IG1vZGU6ICdkYXRlJyB9KS5ub3ROdWxsKCkuZGVmYXVsdE5vdygpLFxyXG59KTtcclxuXHJcbi8vIFRyYW5zYWN0aW9uIEhlYWRlcnMgKGdyb3VwcyBsZWRnZXIgZW50cmllcylcclxuZXhwb3J0IGNvbnN0IHRyYW5zYWN0aW9ucyA9IHBnVGFibGUoJ3RyYW5zYWN0aW9ucycsIHtcclxuICBpZDogdXVpZCgnaWQnKS5wcmltYXJ5S2V5KCkuZGVmYXVsdFJhbmRvbSgpLFxyXG4gIGRlc2NyaXB0aW9uOiB0ZXh0KCdkZXNjcmlwdGlvbicpLm5vdE51bGwoKSxcclxuICB0eXBlOiB0ZXh0KCd0eXBlJykubm90TnVsbCgpLCAvLyAnbnd0X3B1cmNoYXNlJywgJ2NvbWljX3B1cmNoYXNlJywgJ2V2ZW50X3RpY2tldCcsIGV0Yy5cclxuICB1c2VySWQ6IHV1aWQoJ3VzZXJfaWQnKS5yZWZlcmVuY2VzKCgpID0+IGF1dGhVc2Vycy5pZCksXHJcbiAgdG90YWxBbW91bnQ6IGRlY2ltYWwoJ3RvdGFsX2Ftb3VudCcsIHsgcHJlY2lzaW9uOiAxOCwgc2NhbGU6IDggfSkubm90TnVsbCgpLFxyXG4gIGN1cnJlbmN5OiB0ZXh0KCdjdXJyZW5jeScpLm5vdE51bGwoKS5kZWZhdWx0KCdOV1QnKSxcclxuICBzdGF0dXM6IHRleHQoJ3N0YXR1cycpLm5vdE51bGwoKS5kZWZhdWx0KCdjb21wbGV0ZWQnKSwgLy8gJ3BlbmRpbmcnLCAnY29tcGxldGVkJywgJ3JldmVyc2VkJ1xyXG4gIHJlZmVyZW5jZUlkOiB0ZXh0KCdyZWZlcmVuY2VfaWQnKSwgLy8gRXh0ZXJuYWwgcmVmZXJlbmNlIChTdHJpcGUgcGF5bWVudCwgZXRjLilcclxuICBpc1JldmVyc2VkOiBib29sZWFuKCdpc19yZXZlcnNlZCcpLm5vdE51bGwoKS5kZWZhdWx0KGZhbHNlKSxcclxuICByZXZlcnNlZEJ5OiB1dWlkKCdyZXZlcnNlZF9ieScpLnJlZmVyZW5jZXMoKCkgPT4gdHJhbnNhY3Rpb25zLmlkKSxcclxuICB0cmFuc2FjdGlvbkRhdGU6IHRpbWVzdGFtcCgndHJhbnNhY3Rpb25fZGF0ZScsIHsgbW9kZTogJ2RhdGUnIH0pLm5vdE51bGwoKS5kZWZhdWx0Tm93KCksXHJcbiAgbWV0YWRhdGE6IGpzb24oJ21ldGFkYXRhJyksXHJcbiAgY3JlYXRlZEF0OiB0aW1lc3RhbXAoJ2NyZWF0ZWRfYXQnLCB7IG1vZGU6ICdkYXRlJyB9KS5ub3ROdWxsKCkuZGVmYXVsdE5vdygpLFxyXG4gIHVwZGF0ZWRBdDogdGltZXN0YW1wKCd1cGRhdGVkX2F0JywgeyBtb2RlOiAnZGF0ZScgfSkubm90TnVsbCgpLmRlZmF1bHROb3coKSxcclxufSk7XHJcblxyXG4vLyBBY2NvdW50IEJhbGFuY2VzIChjYWNoZWQgZm9yIHBlcmZvcm1hbmNlKVxyXG5leHBvcnQgY29uc3QgYWNjb3VudEJhbGFuY2VzID0gcGdUYWJsZSgnYWNjb3VudF9iYWxhbmNlcycsIHtcclxuICBpZDogdXVpZCgnaWQnKS5wcmltYXJ5S2V5KCkuZGVmYXVsdFJhbmRvbSgpLFxyXG4gIGFjY291bnRJZDogdXVpZCgnYWNjb3VudF9pZCcpXHJcbiAgICAubm90TnVsbCgpXHJcbiAgICAucmVmZXJlbmNlcygoKSA9PiBhY2NvdW50cy5pZCksXHJcbiAgdXNlcklkOiB1dWlkKCd1c2VyX2lkJykucmVmZXJlbmNlcygoKSA9PiBhdXRoVXNlcnMuaWQpLCAvLyBGb3IgdXNlci1zcGVjaWZpYyBiYWxhbmNlc1xyXG4gIGRlYml0QmFsYW5jZTogZGVjaW1hbCgnZGViaXRfYmFsYW5jZScsIHsgcHJlY2lzaW9uOiAxOCwgc2NhbGU6IDggfSkubm90TnVsbCgpLmRlZmF1bHQoJzAuMDAwMDAwMDAnKSxcclxuICBjcmVkaXRCYWxhbmNlOiBkZWNpbWFsKCdjcmVkaXRfYmFsYW5jZScsIHsgcHJlY2lzaW9uOiAxOCwgc2NhbGU6IDggfSkubm90TnVsbCgpLmRlZmF1bHQoJzAuMDAwMDAwMDAnKSxcclxuICBuZXRCYWxhbmNlOiBkZWNpbWFsKCduZXRfYmFsYW5jZScsIHsgcHJlY2lzaW9uOiAxOCwgc2NhbGU6IDggfSkubm90TnVsbCgpLmRlZmF1bHQoJzAuMDAwMDAwMDAnKSxcclxuICBsYXN0VXBkYXRlZDogdGltZXN0YW1wKCdsYXN0X3VwZGF0ZWQnLCB7IG1vZGU6ICdkYXRlJyB9KS5ub3ROdWxsKCkuZGVmYXVsdE5vdygpLFxyXG4gIGNyZWF0ZWRBdDogdGltZXN0YW1wKCdjcmVhdGVkX2F0JywgeyBtb2RlOiAnZGF0ZScgfSkubm90TnVsbCgpLmRlZmF1bHROb3coKSxcclxufSwgKHRhYmxlKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHVuaXF1ZV9hY2NvdW50X3VzZXI6IHVuaXF1ZSgpLm9uKHRhYmxlLmFjY291bnRJZCwgdGFibGUudXNlcklkKVxyXG4gIH07XHJcbn0pO1xyXG5cclxuLy8gQXVkaXQgVHJhaWxcclxuZXhwb3J0IGNvbnN0IGF1ZGl0VHJhaWwgPSBwZ1RhYmxlKCdhdWRpdF90cmFpbCcsIHtcclxuICBpZDogdXVpZCgnaWQnKS5wcmltYXJ5S2V5KCkuZGVmYXVsdFJhbmRvbSgpLFxyXG4gIHRhYmxlTmFtZTogdGV4dCgndGFibGVfbmFtZScpLm5vdE51bGwoKSxcclxuICByZWNvcmRJZDogdGV4dCgncmVjb3JkX2lkJykubm90TnVsbCgpLFxyXG4gIGFjdGlvbjogdGV4dCgnYWN0aW9uJykubm90TnVsbCgpLCAvLyAnaW5zZXJ0JywgJ3VwZGF0ZScsICdkZWxldGUnXHJcbiAgb2xkVmFsdWVzOiBqc29uKCdvbGRfdmFsdWVzJyksXHJcbiAgbmV3VmFsdWVzOiBqc29uKCduZXdfdmFsdWVzJyksXHJcbiAgdXNlcklkOiB1dWlkKCd1c2VyX2lkJykucmVmZXJlbmNlcygoKSA9PiBhdXRoVXNlcnMuaWQpLFxyXG4gIGlwQWRkcmVzczogdGV4dCgnaXBfYWRkcmVzcycpLFxyXG4gIHVzZXJBZ2VudDogdGV4dCgndXNlcl9hZ2VudCcpLFxyXG4gIHRpbWVzdGFtcDogdGltZXN0YW1wKCd0aW1lc3RhbXAnLCB7IG1vZGU6ICdkYXRlJyB9KS5ub3ROdWxsKCkuZGVmYXVsdE5vdygpLFxyXG59KTtcclxuXHJcbmV4cG9ydCB0eXBlIEluc2VydEFjY291bnQgPSB0eXBlb2YgYWNjb3VudHMuJGluZmVySW5zZXJ0O1xyXG5leHBvcnQgdHlwZSBTZWxlY3RBY2NvdW50ID0gdHlwZW9mIGFjY291bnRzLiRpbmZlclNlbGVjdDtcclxuXHJcbmV4cG9ydCB0eXBlIEluc2VydExlZGdlckVudHJ5ID0gdHlwZW9mIGxlZGdlckVudHJpZXMuJGluZmVySW5zZXJ0O1xyXG5leHBvcnQgdHlwZSBTZWxlY3RMZWRnZXJFbnRyeSA9IHR5cGVvZiBsZWRnZXJFbnRyaWVzLiRpbmZlclNlbGVjdDtcclxuXHJcbmV4cG9ydCB0eXBlIEluc2VydFRyYW5zYWN0aW9uID0gdHlwZW9mIHRyYW5zYWN0aW9ucy4kaW5mZXJJbnNlcnQ7XHJcbmV4cG9ydCB0eXBlIFNlbGVjdFRyYW5zYWN0aW9uID0gdHlwZW9mIHRyYW5zYWN0aW9ucy4kaW5mZXJTZWxlY3Q7XHJcblxyXG5leHBvcnQgdHlwZSBJbnNlcnRBY2NvdW50QmFsYW5jZSA9IHR5cGVvZiBhY2NvdW50QmFsYW5jZXMuJGluZmVySW5zZXJ0O1xyXG5leHBvcnQgdHlwZSBTZWxlY3RBY2NvdW50QmFsYW5jZSA9IHR5cGVvZiBhY2NvdW50QmFsYW5jZXMuJGluZmVyU2VsZWN0O1xyXG5cclxuZXhwb3J0IHR5cGUgSW5zZXJ0QXVkaXRUcmFpbCA9IHR5cGVvZiBhdWRpdFRyYWlsLiRpbmZlckluc2VydDtcclxuZXhwb3J0IHR5cGUgU2VsZWN0QXVkaXRUcmFpbCA9IHR5cGVvZiBhdWRpdFRyYWlsLiRpbmZlclNlbGVjdDsiXX0=